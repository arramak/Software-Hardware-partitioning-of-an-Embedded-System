FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 36 42 LJMP  _Timer_ISR         (0153)     ljmp	_Timer_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 04 A1 LJMP  _UART_TX_ISR       (0157)     ljmp	_UART_TX_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 04 A2 LJMP  _UART_RX_ISR       (0161)     ljmp	_UART_RX_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
0030: 7D 0A 32 LJMP  _DUALADC_CNT1_ISR  (0165)     ljmp	_DUALADC_CNT1_ISR
0033: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
0034: 7D 0A 35 LJMP  _DUALADC_CNT2_ISR  (0169)     ljmp	_DUALADC_CNT2_ISR
0037: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
003C: 7D 0A 38 LJMP  _DUALADC_PWM16_ISR (0177)     ljmp	_DUALADC_PWM16_ISR
003F: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [avgFirstMat+3],0x0(0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [avgFirstMat+4],0x0(0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 04 36 LCALL 0x0436             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 03    MOV   A,0x3              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 2F    MOV   X,0x2F             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 99    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 99    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 99    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 98    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 99    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 99 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 98    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 98    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 99    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 99 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 98    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
0129: 43 E3 20 OR    REG[0xE3],0x20     (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
012C: 70 EF    AND   F,0xEF             
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012E: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
0131: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0133: 62 E0 03 MOV   REG[0xE0],0x3      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0136: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0139: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
013B: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013E: 7C 19 96 LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
0141: 8F FF    JMP   0x0141             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0143: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0145: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
0331: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_project1_Bank1
                                        (0019) export LoadConfigTBL_project1_Bank0
                                        (0020) export LoadConfigTBL_project1_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_project1_Bank0:
                                        (0023) ;  Instance name DUALADC, User Module DUALADC
                                        (0024) ;       Instance name DUALADC, Block Name ADC1(ASD20)
                                        (0025) 	db		90h, 90h		;DUALADC_bfADC1cr0(ASD20CR0)
                                        (0026) 	db		91h, a0h		;DUALADC_bfADC1cr1(ASD20CR1)
                                        (0027) 	db		92h, 61h		;DUALADC_bfADC1cr2(ASD20CR2)
                                        (0028) 	db		93h, f0h		;DUALADC_bfADC1cr3(ASD20CR3)
                                        (0029) ;       Instance name DUALADC, Block Name ADC2(ASD22)
                                        (0030) 	db		98h, 90h		;DUALADC_bfADC2cr0(ASD22CR0)
                                        (0031) 	db		99h, a0h		;DUALADC_bfADC2cr1(ASD22CR1)
                                        (0032) 	db		9ah, 60h		;DUALADC_bfADC2cr2(ASD22CR2)
                                        (0033) 	db		9bh, f0h		;DUALADC_bfADC2cr3(ASD22CR3)
                                        (0034) ;       Instance name DUALADC, Block Name CNT1(DBB10)
                                        (0035) 	db		33h, 00h		;DUALADC_bCounter1_CR0(DBB10CR0)
                                        (0036) 	db		31h, 00h		;DUALADC_bPeriod1(DBB10DR1)
                                        (0037) 	db		32h, 00h		;DUALADC_bCompare1(DBB10DR2)
                                        (0038) ;       Instance name DUALADC, Block Name CNT2(DBB11)
                                        (0039) 	db		37h, 00h		;DUALADC_bCounter2_CR0(DBB11CR0)
                                        (0040) 	db		35h, 00h		;DUALADC_bPeriod2(DBB11DR1)
                                        (0041) 	db		36h, 00h		;DUALADC_bCompare2(DBB11DR2)
                                        (0042) ;       Instance name DUALADC, Block Name PWM16_LSB(DCB12)
                                        (0043) 	db		3bh, 00h		;DUALADC_fPWM_LSB_CR0(DCB12CR0)
                                        (0044) 	db		39h, 00h		;DUALADC_bPWM_Period_LSB(DCB12DR1)
                                        (0045) 	db		3ah, 00h		;DUALADC_bPWM_IntTime_LSB(DCB12DR2)
                                        (0046) ;       Instance name DUALADC, Block Name PWM16_MSB(DCB13)
                                        (0047) 	db		3fh, 00h		;DUALADC_fPWM_MSB_CR0(DCB13CR0)
                                        (0048) 	db		3dh, 00h		;DUALADC_bPWM_Period_MSB(DCB13DR1)
                                        (0049) 	db		3eh, 00h		;DUALADC_bPWM_IntTime_MSB(DCB13DR2)
                                        (0050) ;  Instance name LCD, User Module LCD
                                        (0051) ;  Instance name LPF2_1, User Module LPF2
                                        (0052) ;       Instance name LPF2_1, Block Name FLIN(ASC12)
                                        (0053) 	db		88h, a0h		;LPF2_1_FLIN_CR0(ASC12CR0)
                                        (0054) 	db		89h, 80h		;LPF2_1_FLIN_CR1(ASC12CR1)
                                        (0055) 	db		8ah, 00h		;LPF2_1_FLIN_CR2(ASC12CR2)
                                        (0056) 	db		8bh, 24h		;LPF2_1_FLIN_CR3(ASC12CR3)
                                        (0057) ;       Instance name LPF2_1, Block Name FLOUT(ASD13)
                                        (0058) 	db		8ch, 80h		;LPF2_1_FLOUT_CR0(ASD13CR0)
                                        (0059) 	db		8dh, 40h		;LPF2_1_FLOUT_CR1(ASD13CR1)
                                        (0060) 	db		8eh, 80h		;LPF2_1_FLOUT_CR2(ASD13CR2)
                                        (0061) 	db		8fh, 20h		;LPF2_1_FLOUT_CR3(ASD13CR3)
                                        (0062) ;  Instance name LPF2_3, User Module LPF2
                                        (0063) ;       Instance name LPF2_3, Block Name FLIN(ASC10)
                                        (0064) 	db		80h, 94h		;LPF2_3_FLIN_CR0(ASC10CR0)
                                        (0065) 	db		81h, 88h		;LPF2_3_FLIN_CR1(ASC10CR1)
                                        (0066) 	db		82h, 00h		;LPF2_3_FLIN_CR2(ASC10CR2)
                                        (0067) 	db		83h, 24h		;LPF2_3_FLIN_CR3(ASC10CR3)
                                        (0068) ;       Instance name LPF2_3, Block Name FLOUT(ASD11)
                                        (0069) 	db		84h, 92h		;LPF2_3_FLOUT_CR0(ASD11CR0)
                                        (0070) 	db		85h, 40h		;LPF2_3_FLOUT_CR1(ASD11CR1)
                                        (0071) 	db		86h, 9fh		;LPF2_3_FLOUT_CR2(ASD11CR2)
                                        (0072) 	db		87h, 20h		;LPF2_3_FLOUT_CR3(ASD11CR3)
                                        (0073) ;  Instance name PGA_1, User Module PGA
                                        (0074) ;       Instance name PGA_1, Block Name GAIN(ACB00)
                                        (0075) 	db		71h, fdh		;PGA_1_GAIN_CR0(ACB00CR0)
                                        (0076) 	db		72h, a3h		;PGA_1_GAIN_CR1(ACB00CR1)
                                        (0077) 	db		73h, 20h		;PGA_1_GAIN_CR2(ACB00CR2)
                                        (0078) 	db		70h, 00h		;PGA_1_GAIN_CR3(ACB00CR3)
                                        (0079) ;  Instance name PGA_2, User Module PGA
                                        (0080) ;       Instance name PGA_2, Block Name GAIN(ACB01)
                                        (0081) 	db		75h, 1dh		;PGA_2_GAIN_CR0(ACB01CR0)
                                        (0082) 	db		76h, 21h		;PGA_2_GAIN_CR1(ACB01CR1)
                                        (0083) 	db		77h, 20h		;PGA_2_GAIN_CR2(ACB01CR2)
                                        (0084) 	db		74h, 01h		;PGA_2_GAIN_CR3(ACB01CR3)
                                        (0085) ;  Instance name PGA_3, User Module PGA
                                        (0086) ;       Instance name PGA_3, Block Name GAIN(ACB02)
                                        (0087) 	db		79h, 0dh		;PGA_3_GAIN_CR0(ACB02CR0)
                                        (0088) 	db		7ah, a3h		;PGA_3_GAIN_CR1(ACB02CR1)
                                        (0089) 	db		7bh, 20h		;PGA_3_GAIN_CR2(ACB02CR2)
                                        (0090) 	db		78h, 00h		;PGA_3_GAIN_CR3(ACB02CR3)
                                        (0091) ;  Instance name PGA_4, User Module PGA
                                        (0092) ;       Instance name PGA_4, Block Name GAIN(ACB03)
                                        (0093) 	db		7dh, 0dh		;PGA_4_GAIN_CR0(ACB03CR0)
                                        (0094) 	db		7eh, 21h		;PGA_4_GAIN_CR1(ACB03CR1)
                                        (0095) 	db		7fh, 20h		;PGA_4_GAIN_CR2(ACB03CR2)
                                        (0096) 	db		7ch, 00h		;PGA_4_GAIN_CR3(ACB03CR3)
                                        (0097) ;  Instance name Timer, User Module Timer16
                                        (0098) ;       Instance name Timer, Block Name TIMER16_LSB(DBB00)
                                        (0099) 	db		23h, 00h		;Timer_CONTROL_LSB_REG(DBB00CR0)
                                        (0100) 	db		21h, 40h		;Timer_PERIOD_LSB_REG(DBB00DR1)
                                        (0101) 	db		22h, 00h		;Timer_COMPARE_LSB_REG(DBB00DR2)
                                        (0102) ;       Instance name Timer, Block Name TIMER16_MSB(DBB01)
                                        (0103) 	db		27h, 04h		;Timer_CONTROL_MSB_REG(DBB01CR0)
                                        (0104) 	db		25h, 1fh		;Timer_PERIOD_MSB_REG(DBB01DR1)
                                        (0105) 	db		26h, 00h		;Timer_COMPARE_MSB_REG(DBB01DR2)
                                        (0106) ;  Instance name UART, User Module UART
                                        (0107) ;       Instance name UART, Block Name RX(DCB03)
                                        (0108) 	db		2fh, 00h		;UART_RX_CONTROL_REG(DCB03CR0)
                                        (0109) 	db		2dh, 00h		;UART_(DCB03DR1)
                                        (0110) 	db		2eh, 00h		;UART_RX_BUFFER_REG (DCB03DR2)
                                        (0111) ;       Instance name UART, Block Name TX(DCB02)
                                        (0112) 	db		2bh, 00h		;UART_TX_CONTROL_REG(DCB02CR0)
                                        (0113) 	db		29h, 00h		;UART_TX_BUFFER_REG (DCB02DR1)
                                        (0114) 	db		2ah, 00h		;UART_(DCB02DR2)
                                        (0115) ;  Global Register values Bank 0
                                        (0116) 	db		60h, e4h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0117) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0118) 	db		63h, 15h		; AnalogReferenceControl register (ARF_CR)
                                        (0119) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0120) 	db		e6h, 58h		; DecimatorControl_0 register (DEC_CR0)
                                        (0121) 	db		e7h, 18h		; DecimatorControl_1 register (DEC_CR1)
                                        (0122) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0123) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0124) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0125) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0126) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0127) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0128) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0129) 	db		b6h, 20h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0130) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0131) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0132) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0133) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0134) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0135) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0136) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0137) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0138) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0139) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0140) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0141) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0142) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0143) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0144) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0145) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0146) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0147) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0148) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0149) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0150) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0151) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0152) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0153) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0154) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0155) 	db		ffh
                                        (0156) LoadConfigTBL_project1_Bank1:
                                        (0157) ;  Instance name DUALADC, User Module DUALADC
                                        (0158) ;       Instance name DUALADC, Block Name ADC1(ASD20)
                                        (0159) ;       Instance name DUALADC, Block Name ADC2(ASD22)
                                        (0160) ;       Instance name DUALADC, Block Name CNT1(DBB10)
                                        (0161) 	db		30h, 21h		;DUALADC_fCounter1FN(DBB10FN)
                                        (0162) 	db		31h, 45h		;DUALADC_fCounter1SL(DBB10IN)
                                        (0163) 	db		32h, 40h		;DUALADC_fCounter1OS(DBB10OU)
                                        (0164) ;       Instance name DUALADC, Block Name CNT2(DBB11)
                                        (0165) 	db		34h, 21h		;DUALADC_fCounter2FN(DBB11FN)
                                        (0166) 	db		35h, 65h		;DUALADC_fCounter2SL(DBB11IN)
                                        (0167) 	db		36h, 40h		;DUALADC_fCounter2OS(DBB11OU)
                                        (0168) ;       Instance name DUALADC, Block Name PWM16_LSB(DCB12)
                                        (0169) 	db		38h, 01h		;DUALADC_bfPWM_LSB_FN(DCB12FN)
                                        (0170) 	db		39h, 15h		;DUALADC_(DCB12IN)
                                        (0171) 	db		3ah, 40h		;DUALADC_(DCB12OU)
                                        (0172) ;       Instance name DUALADC, Block Name PWM16_MSB(DCB13)
                                        (0173) 	db		3ch, 21h		;DUALADC_bfPWM_MSB_FN(DCB13FN)
                                        (0174) 	db		3dh, 35h		;DUALADC_(DCB13IN)
                                        (0175) 	db		3eh, 40h		;DUALADC_(DCB13OU)
                                        (0176) ;  Instance name LCD, User Module LCD
                                        (0177) ;  Instance name LPF2_1, User Module LPF2
                                        (0178) ;       Instance name LPF2_1, Block Name FLIN(ASC12)
                                        (0179) ;       Instance name LPF2_1, Block Name FLOUT(ASD13)
                                        (0180) ;  Instance name LPF2_3, User Module LPF2
                                        (0181) ;       Instance name LPF2_3, Block Name FLIN(ASC10)
                                        (0182) ;       Instance name LPF2_3, Block Name FLOUT(ASD11)
                                        (0183) ;  Instance name PGA_1, User Module PGA
                                        (0184) ;       Instance name PGA_1, Block Name GAIN(ACB00)
                                        (0185) ;  Instance name PGA_2, User Module PGA
                                        (0186) ;       Instance name PGA_2, Block Name GAIN(ACB01)
                                        (0187) ;  Instance name PGA_3, User Module PGA
                                        (0188) ;       Instance name PGA_3, Block Name GAIN(ACB02)
                                        (0189) ;  Instance name PGA_4, User Module PGA
                                        (0190) ;       Instance name PGA_4, Block Name GAIN(ACB03)
                                        (0191) ;  Instance name Timer, User Module Timer16
                                        (0192) ;       Instance name Timer, Block Name TIMER16_LSB(DBB00)
                                        (0193) 	db		20h, 00h		;Timer_FUNC_LSB_REG(DBB00FN)
                                        (0194) 	db		21h, 05h		;Timer_INPUT_LSB_REG(DBB00IN)
                                        (0195) 	db		22h, 40h		;Timer_OUTPUT_LSB_REG(DBB00OU)
                                        (0196) ;       Instance name Timer, Block Name TIMER16_MSB(DBB01)
                                        (0197) 	db		24h, 20h		;Timer_FUNC_MSB_REG(DBB01FN)
                                        (0198) 	db		25h, 35h		;Timer_INPUT_MSB_REG(DBB01IN)
                                        (0199) 	db		26h, 40h		;Timer_OUTPUT_MSB_REG(DBB01OU)
                                        (0200) ;  Instance name UART, User Module UART
                                        (0201) ;       Instance name UART, Block Name RX(DCB03)
                                        (0202) 	db		2ch, 05h		;UART_RX_FUNC_REG   (DCB03FN)
                                        (0203) 	db		2dh, 01h		;UART_RX_INPUT_REG  (DCB03IN)
                                        (0204) 	db		2eh, 40h		;UART_RX_OUTPUT_REG (DCB03OU)
                                        (0205) ;       Instance name UART, Block Name TX(DCB02)
                                        (0206) 	db		28h, 0dh		;UART_TX_FUNC_REG   (DCB02FN)
                                        (0207) 	db		29h, 01h		;UART_TX_INPUT_REG  (DCB02IN)
                                        (0208) 	db		2ah, 47h		;UART_TX_OUTPUT_REG (DCB02OU)
                                        (0209) ;  Global Register values Bank 1
                                        (0210) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0211) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0212) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0213) 	db		62h, 58h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0214) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0215) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0216) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0217) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0218) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0219) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0220) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0221) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0222) 	db		e1h, 27h		; OscillatorControl_1 register (OSC_CR1)
                                        (0223) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0224) 	db		dfh, 9bh		; OscillatorControl_3 register (OSC_CR3)
                                        (0225) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0226) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0227) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0228) 	db		ffh
                                        (0229) AREA psoc_config(rom, rel)
                                        (0230) LoadConfigTBL_project1_Ordered:
                                        (0231) ;  Ordered Global Register values
                                        (0232) 	M8C_SetBank0
0333: 62 00 00 MOV   REG[0x0],0x0       (0233) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0336: 71 10    OR    F,0x10             
                                        (0234) 	M8C_SetBank1
0338: 62 00 00 MOV   REG[0x0],0x0       (0235) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
033B: 62 01 FE MOV   REG[0x1],0xFE      (0236) 	mov	reg[01h], feh		; Port_0_DriveMode_1 register (PRT0DM1)
033E: 70 EF    AND   F,0xEF             
                                        (0237) 	M8C_SetBank0
0340: 62 03 FE MOV   REG[0x3],0xFE      (0238) 	mov	reg[03h], feh		; Port_0_DriveMode_2 register (PRT0DM2)
0343: 62 02 00 MOV   REG[0x2],0x0       (0239) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
0346: 71 10    OR    F,0x10             
                                        (0240) 	M8C_SetBank1
0348: 62 02 00 MOV   REG[0x2],0x0       (0241) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
034B: 62 03 00 MOV   REG[0x3],0x0       (0242) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
034E: 70 EF    AND   F,0xEF             
                                        (0243) 	M8C_SetBank0
0350: 62 01 00 MOV   REG[0x1],0x0       (0244) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0353: 62 04 00 MOV   REG[0x4],0x0       (0245) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0356: 71 10    OR    F,0x10             
                                        (0246) 	M8C_SetBank1
0358: 62 04 07 MOV   REG[0x4],0x7       (0247) 	mov	reg[04h], 07h		; Port_1_DriveMode_0 register (PRT1DM0)
035B: 62 05 F8 MOV   REG[0x5],0xF8      (0248) 	mov	reg[05h], f8h		; Port_1_DriveMode_1 register (PRT1DM1)
035E: 70 EF    AND   F,0xEF             
                                        (0249) 	M8C_SetBank0
0360: 62 07 F8 MOV   REG[0x7],0xF8      (0250) 	mov	reg[07h], f8h		; Port_1_DriveMode_2 register (PRT1DM2)
0363: 62 06 00 MOV   REG[0x6],0x0       (0251) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0366: 71 10    OR    F,0x10             
                                        (0252) 	M8C_SetBank1
0368: 62 06 00 MOV   REG[0x6],0x0       (0253) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
036B: 62 07 00 MOV   REG[0x7],0x0       (0254) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
036E: 70 EF    AND   F,0xEF             
                                        (0255) 	M8C_SetBank0
0370: 62 05 00 MOV   REG[0x5],0x0       (0256) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0373: 62 08 00 MOV   REG[0x8],0x0       (0257) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0376: 71 10    OR    F,0x10             
                                        (0258) 	M8C_SetBank1
0378: 62 08 FF MOV   REG[0x8],0xFF      (0259) 	mov	reg[08h], ffh		; Port_2_DriveMode_0 register (PRT2DM0)
037B: 62 09 00 MOV   REG[0x9],0x0       (0260) 	mov	reg[09h], 00h		; Port_2_DriveMode_1 register (PRT2DM1)
037E: 70 EF    AND   F,0xEF             
                                        (0261) 	M8C_SetBank0
0380: 62 0B 00 MOV   REG[0xB],0x0       (0262) 	mov	reg[0bh], 00h		; Port_2_DriveMode_2 register (PRT2DM2)
0383: 62 0A 80 MOV   REG[0xA],0x80      (0263) 	mov	reg[0ah], 80h		; Port_2_GlobalSelect register (PRT2GS)
0386: 71 10    OR    F,0x10             
                                        (0264) 	M8C_SetBank1
0388: 62 0A 00 MOV   REG[0xA],0x0       (0265) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
038B: 62 0B 00 MOV   REG[0xB],0x0       (0266) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
038E: 70 EF    AND   F,0xEF             
                                        (0267) 	M8C_SetBank0
0390: 62 09 00 MOV   REG[0x9],0x0       (0268) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0393: 62 0C 00 MOV   REG[0xC],0x0       (0269) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0396: 71 10    OR    F,0x10             
                                        (0270) 	M8C_SetBank1
0398: 62 0C 00 MOV   REG[0xC],0x0       (0271) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
039B: 62 0D 00 MOV   REG[0xD],0x0       (0272) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
039E: 70 EF    AND   F,0xEF             
                                        (0273) 	M8C_SetBank0
03A0: 62 0F 00 MOV   REG[0xF],0x0       (0274) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
03A3: 62 0E 00 MOV   REG[0xE],0x0       (0275) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
03A6: 71 10    OR    F,0x10             
                                        (0276) 	M8C_SetBank1
03A8: 62 0E 00 MOV   REG[0xE],0x0       (0277) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
03AB: 62 0F 00 MOV   REG[0xF],0x0       (0278) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
03AE: 70 EF    AND   F,0xEF             
                                        (0279) 	M8C_SetBank0
03B0: 62 0D 00 MOV   REG[0xD],0x0       (0280) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
03B3: 62 10 00 MOV   REG[0x10],0x0      (0281) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
03B6: 71 10    OR    F,0x10             
                                        (0282) 	M8C_SetBank1
03B8: 62 10 00 MOV   REG[0x10],0x0      (0283) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
03BB: 62 11 00 MOV   REG[0x11],0x0      (0284) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
03BE: 70 EF    AND   F,0xEF             
                                        (0285) 	M8C_SetBank0
03C0: 62 13 00 MOV   REG[0x13],0x0      (0286) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
03C3: 62 12 00 MOV   REG[0x12],0x0      (0287) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
03C6: 71 10    OR    F,0x10             
                                        (0288) 	M8C_SetBank1
03C8: 62 12 00 MOV   REG[0x12],0x0      (0289) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
03CB: 62 13 00 MOV   REG[0x13],0x0      (0290) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
03CE: 70 EF    AND   F,0xEF             
                                        (0291) 	M8C_SetBank0
03D0: 62 11 00 MOV   REG[0x11],0x0      (0292) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
03D3: 62 14 00 MOV   REG[0x14],0x0      (0293) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
03D6: 71 10    OR    F,0x10             
                                        (0294) 	M8C_SetBank1
03D8: 62 14 00 MOV   REG[0x14],0x0      (0295) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
03DB: 62 15 00 MOV   REG[0x15],0x0      (0296) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
03DE: 70 EF    AND   F,0xEF             
                                        (0297) 	M8C_SetBank0
03E0: 62 17 00 MOV   REG[0x17],0x0      (0298) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
03E3: 62 16 00 MOV   REG[0x16],0x0      (0299) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
03E6: 71 10    OR    F,0x10             
                                        (0300) 	M8C_SetBank1
03E8: 62 16 00 MOV   REG[0x16],0x0      (0301) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
03EB: 62 17 00 MOV   REG[0x17],0x0      (0302) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
03EE: 70 EF    AND   F,0xEF             
                                        (0303) 	M8C_SetBank0
03F0: 62 15 00 MOV   REG[0x15],0x0      (0304) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
03F3: 62 18 00 MOV   REG[0x18],0x0      (0305) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
03F6: 71 10    OR    F,0x10             
                                        (0306) 	M8C_SetBank1
03F8: 62 18 00 MOV   REG[0x18],0x0      (0307) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
03FB: 62 19 00 MOV   REG[0x19],0x0      (0308) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
03FE: 70 EF    AND   F,0xEF             
                                        (0309) 	M8C_SetBank0
0400: 62 1B 00 MOV   REG[0x1B],0x0      (0310) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
0403: 62 1A 00 MOV   REG[0x1A],0x0      (0311) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
0406: 71 10    OR    F,0x10             
                                        (0312) 	M8C_SetBank1
0408: 62 1A 00 MOV   REG[0x1A],0x0      (0313) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
040B: 62 1B 00 MOV   REG[0x1B],0x0      (0314) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
040E: 70 EF    AND   F,0xEF             
                                        (0315) 	M8C_SetBank0
0410: 62 19 00 MOV   REG[0x19],0x0      (0316) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0413: 62 1C 00 MOV   REG[0x1C],0x0      (0317) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
0416: 71 10    OR    F,0x10             
                                        (0318) 	M8C_SetBank1
0418: 62 1C 00 MOV   REG[0x1C],0x0      (0319) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
041B: 62 1D 00 MOV   REG[0x1D],0x0      (0320) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
041E: 70 EF    AND   F,0xEF             
                                        (0321) 	M8C_SetBank0
0420: 62 1F 00 MOV   REG[0x1F],0x0      (0322) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0423: 62 1E 00 MOV   REG[0x1E],0x0      (0323) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
0426: 71 10    OR    F,0x10             
                                        (0324) 	M8C_SetBank1
0428: 62 1E 00 MOV   REG[0x1E],0x0      (0325) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
042B: 62 1F 00 MOV   REG[0x1F],0x0      (0326) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
042E: 70 EF    AND   F,0xEF             
                                        (0327) 	M8C_SetBank0
0430: 62 1D 00 MOV   REG[0x1D],0x0      (0328) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0433: 70 EF    AND   F,0xEF             
                                        (0329) 	M8C_SetBank0
0435: 7F       RET                      (0330) 	ret
                                        (0331) 
                                        (0332) 
                                        (0333) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_project1
                                        (0026) export _LoadConfig_project1
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
0436: 55 00 00 MOV   [0x0],0x0          (0065) 	mov		[Port_2_Data_SHADE], 0h
0439: 55 01 FF MOV   [0x1],0xFF         (0066) 	mov		[Port_2_DriveMode_0_SHADE], ffh
043C: 55 02 00 MOV   [0x2],0x0          (0067) 	mov		[Port_2_DriveMode_1_SHADE], 0h
                                        (0068) 
043F: 7C 04 46 LCALL 0x0446             (0069) 	lcall	LoadConfig_project1
0442: 7C 03 31 LCALL 0x0331             (0070) 	lcall	LoadConfigTBL_project1_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
0445: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration project1
                                        (0078) ;
                                        (0079) ;    Load configuration registers for project1.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_project1:
                                        (0096)  LoadConfig_project1:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
0446: 10       PUSH  X                  (0099) 	push	x
0447: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
0449: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
044B: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
044C: 50 02    MOV   A,0x2              (0104)     mov     A, >LoadConfigTBL_project1_Bank0
044E: 57 0B    MOV   X,0xB              (0105)     mov     X, <LoadConfigTBL_project1_Bank0
0450: 7C 04 61 LCALL 0x0461             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
0453: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
0455: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
0456: 50 02    MOV   A,0x2              (0111)     mov     A, >LoadConfigTBL_project1_Bank1
0458: 57 DA    MOV   X,0xDA             (0112)     mov     X, <LoadConfigTBL_project1_Bank1
045A: 7C 04 61 LCALL 0x0461             (0113)     lcall   LoadConfig              ; Load the bank 1 values
045D: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
045F: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
0460: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
0461: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
0463: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
0464: 08       PUSH  A                  (0143)     push    A
0465: 4F       MOV   X,SP               (0144)     mov     X, SP
0466: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
0469: D0 04    JNC   0x046E             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
046B: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
046E: 18       POP   A                  (0149)     pop     A
046F: 20       POP   X                  (0150)     pop     X
0470: 70 EF    AND   F,0xEF             
0472: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0475: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
0476: 08       PUSH  A                  (0156)     push    A
0477: 28       ROMX                     (0157)     romx                            ; Load register address from table
0478: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
047A: A0 1F    JZ    0x049A             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
047C: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
047D: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
0480: A0 03    JZ    0x0484             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
0482: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
0484: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
0486: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
0487: 20       POP   X                  (0167)     pop     X
0488: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
0489: 09 00    ADC   A,0x0              (0169)     adc     A, 0
048B: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
048C: 08       PUSH  A                  (0171)     push    A
048D: 28       ROMX                     (0172)     romx                            ; load config data from the table
048E: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
048F: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
0491: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
0493: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
0494: 20       POP   X                  (0177)     pop     X
0495: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
0496: 09 00    ADC   A,0x0              (0179)     adc     A, 0
0498: 8F D7    JMP   0x0470             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
049A: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
049C: 70 3F    AND   F,0x3F             
049E: 71 C0    OR    F,0xC0             
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
04A0: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2014/7/14 at 8:16:55
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
04A1: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_RXBUF_ENABLE)
                                        (0180)    push A
                                        (0181)    push X
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
                                        (0187)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
                                        (0188)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
                                        (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
                                        (0191)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
                                        (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
                                        (0193)    pop  A                                                  ; Restore stack
                                        (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
                                        (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
                                        (0200)    and  A,UART_RX_ERROR
                                        (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
                                        (0203)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
                                        (0204)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
                                        (0205)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
                                        (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
                                        (0210)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
                                        (0211)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
                                        (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
                                        (0216)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
                                        (0219)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
                                        (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
                                        (0222)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
                                        (0223)    jnz  .UARTRX_CHK_BACKSPACE
                                        (0224)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0230)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
                                        (0246)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
                                        (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
                                        (0253)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
                                        (0254)    jc   .UARTRX_ISR_GETDATA
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0256)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0258)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
                                        (0259)    jmp  .RESTORE_IDX_PP
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0264)    mov  [X+UART_aRxBuffer],A                               ; store data in array
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0266)    inc  X                                                  ; Inc the pointer
                                        (0267)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
                                        (0275)    pop  X
                                        (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_RX_ISR_END:
04A2: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UARTINT.asm
                                        (0284) 
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
04A3: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
04A6: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2014/7/14 at 8:16:55
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
04A9: 7F       RET                      (0182)    ret
04AA: 41 E1 FB AND   REG[0xE1],0xFB     
04AD: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
04B0: 7F       RET                      (0214)    ret
04B1: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
04B3: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
04B5: A0 07    JZ    0x04BD             (0249)    jz    .SetModeRegEmpty
04B7: 43 28 10 OR    REG[0x28],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
04BA: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
04BC: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
04BD: 41 28 EF AND   REG[0x28],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
04C0: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
04C2: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
04C3: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
04C5: 60 2B    MOV   REG[0x2B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
04C7: 60 2F    MOV   REG[0x2F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
                                        (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
04C9: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
04CA: 41 2B FE AND   REG[0x2B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
04CD: 41 2F FE AND   REG[0x2F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
04D0: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
04D1: 60 29    MOV   REG[0x29],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
04D3: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
04D4: 5D 2B    MOV   A,REG[0x2B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
04D6: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
04D7: 5D 2E    MOV   A,REG[0x2E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
04D9: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
04DA: 5D 2F    MOV   A,REG[0x2F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
04DC: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
04DD: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
04DF: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
04E1: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
04E3: A0 06    JZ    0x04EA             (0492)    jz   .SetTxCmpMode
                                        (0493) 
04E5: 41 28 EF AND   REG[0x28],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
04E8: 80 04    JMP   0x04ED             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
04EA: 43 28 10 OR    REG[0x28],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
04ED: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
04EF: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
04F0: 08       PUSH  A                  (0536)    push A
04F1: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
04F3: A0 06    JZ    0x04FA             (0538)    jz   .DisRxInt
04F5: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
04F8: 80 04    JMP   0x04FD             (0541)    jmp  .CheckTxInt
04FA: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
04FD: 18       POP   A                  (0547)    pop  A
04FE: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
0500: A0 06    JZ    0x0507             (0549)    jz   .DisTxInt
0502: 43 E1 04 OR    REG[0xE1],0x4      
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
0505: 80 04    JMP   0x050A             (0552)    jmp  .End_IntCntl
0507: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
050A: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
051B: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
051C: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
051D: 67       ASR   A                  (0603)    asr   A
051E: 67       ASR   A                  (0604)    asr   A
051F: 67       ASR   A                  (0605)    asr   A
0520: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
0522: FF E7    INDEX 0x050B             (0607)    index UART_HEX_STR                  ; Get Hex value
0524: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
0526: 18       POP   A                  (0609)    pop   A                             ; Restore value
0527: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
0529: FF E0    INDEX 0x050B             (0611)    index UART_HEX_STR                  ; Get Hex value
052B: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
052D: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
052E: 4B       SWAP  A,X                (0645)    swap  A,X
052F: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
0531: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
0532: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
0534: 7F       RET                      (0650)    ret
0535: 49 2B 10 TST   REG[0x2B],0x10     
0538: AF FC    JZ    _UART_PutChar      
053A: 60 29    MOV   REG[0x29],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
053C: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
053D: 49 2F 08 TST   REG[0x2F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
0540: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
0542: 5D 2E    MOV   A,REG[0x2E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
0544: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
0545: 5D 2F    MOV   A,REG[0x2F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
0547: 08       PUSH  A                  (0756)    push A
0548: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
054A: B0 04    JNZ   0x054F             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
054C: 18       POP   A                  (0759)    pop  A
054D: 80 0B    JMP   0x0559             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
054F: 5D 2E    MOV   A,REG[0x2E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
0551: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
0552: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
0553: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
0555: B0 03    JNZ   0x0559             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
0557: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
0558: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
0559: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
055B: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
055C: 5D 2F    MOV   A,REG[0x2F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
055E: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
0560: 08       PUSH  A                  (0819)    push A
0561: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0563: B0 07    JNZ   0x056B             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
0565: 18       POP   A                  (0822)    pop  A
0566: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
0568: 4B       SWAP  A,X                (0824)    swap A,X
0569: 80 07    JMP   0x0571             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
056B: 18       POP   A                  (0828)    pop  A
056C: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
056E: 4B       SWAP  A,X                (0830)    swap A,X
056F: 5D 2E    MOV   A,REG[0x2E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
0571: 7F       RET                      (0836)    ret
0572: 70 BF    AND   F,0xBF             
0574: 60 D3    MOV   REG[0xD3],A        
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
0576: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
0578: A0 06    JZ    0x057F             (0872)    jz    End_PutString                           ; Check for end of string
057A: 9F B9    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
057C: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
057D: 8F F8    JMP   0x0576             (0875)    jmp   .PutStringLoop                          ; Get next character
057F: 70 3F    AND   F,0x3F             
0581: 71 C0    OR    F,0xC0             
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
0583: 7F       RET                      (0879)    ret
0584: 70 BF    AND   F,0xBF             
0586: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
0589: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
058A: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
058C: A0 1A    JZ    0x05A7             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
058E: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
0590: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
0592: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
0594: 60 D3    MOV   REG[0xD3],A        
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
0596: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
0598: 49 2B 10 TST   REG[0x2B],0x10     
059B: AF FC    JZ    0x0598             
059D: 60 29    MOV   REG[0x29],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
059F: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
05A0: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
05A3: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
05A5: 8F E4    JMP   0x058A             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
05A7: 70 3F    AND   F,0x3F             
05A9: 71 C0    OR    F,0xC0             
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
05AB: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
05AC: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
05AD: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
05B0: B0 06    JNZ   0x05B7             (0980)    jnz   .CW_WRITEIT
05B2: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
05B5: A0 1D    JZ    0x05D3             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
05B7: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
05B8: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
05BA: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
05BC: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
05BD: 49 2B 10 TST   REG[0x2B],0x10     
05C0: AF FC    JZ    0x05BD             
05C2: 60 29    MOV   REG[0x29],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
05C4: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
05C5: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
05C8: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
05CB: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
05CE: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
05D1: 8F DB    JMP   0x05AD             (0995)    jmp   .CW_Loop
05D3: 70 3F    AND   F,0x3F             
05D5: 71 C0    OR    F,0xC0             
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
05D7: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
05D8: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
05D9: 10       PUSH  X                  (1030)    push  X
05DA: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
05DB: A0 0B    JZ    0x05E7             (1032)    jz    .End_CPutString
05DD: 9F 56    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
05DF: 20       POP   X                  (1034)    pop   X
05E0: 18       POP   A                  (1035)    pop   A
05E1: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
05E2: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
05E4: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
05E5: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
05E7: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
05E9: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
05EA: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
05EC: 9F 47    CALL  _UART_PutChar      (1074)    call UART_PutChar
05EE: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
05F0: 9F 43    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
05F2: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
                                        (1122)    mov [UART_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1124)    mov [UART_bRxCnt], 0x00
                                        (1125)    and [UART_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
                                        (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1165)    mov A,  [UART_fStatus]
                                        (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1209)    mov A,  [UART_fStatus]
                                        (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
                                        (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
                                        (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
                                        (1305)    add   A, [ptrParam]                      ; Add string offset
                                        (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (1308)    mov   A, [X]                             ; Get character pointed by X
                                        (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
                                        (1310)    push  X                                  ;       Yes, Save LSB of current pointer
                                        (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
                                        (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
                                        (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
                                        (1317)    inc   X                                  ;   Yes, Increment both index and...
                                        (1318)    inc   [ptrParam]                         ;          the stored pointer.
                                        (1319)    mov   A, [X]                             ; Get character pointed by X
                                        (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
                                        (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
                                        (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
                                        (1326)    mov   [X], 0x00                          ; Make sure string is zero
                                        (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
                                        (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
                                        (1333)    inc   X                                  ; Advance pointers.
                                        (1334)    inc   [ptrParam]
                                        (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1336)    jz    .TerminateString
                                        (1337)    mov   A, [X]                             ; Get next character
                                        (1338)    jz    .End_GetNextParam
                                        (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
                                        (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
                                        (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
                                        (1342)    inc   [ptrParam]
                                        (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
                                        (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
                                        (1348)    pop   X
                                        (1349)    push  X
                                        (1350)    cmp   [X], 0x00
                                        (1351)    jnz   .NotNullString
                                        (1352)    pop   X
                                        (1353)    mov   X, 0x00
                                        (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
                                        (1360)    pop  X
                                        (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
                                        (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
                                        (1397)    add  A, [ptrParam]                       ; Add string offset
                                        (1398)    mov  X,A
                                        (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: lib\timer.asm                     (0001) ;;*****************************************************************************
05F3: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer.asm
                                        (0004) ;;   Version: 2.6, Updated on 2014/7/14 at 8:16:39
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer_EnableInt
                                        (0030) export _Timer_EnableInt
                                        (0031) export  Timer_DisableInt
                                        (0032) export _Timer_DisableInt
                                        (0033) export  Timer_Start
                                        (0034) export _Timer_Start
                                        (0035) export  Timer_Stop
                                        (0036) export _Timer_Stop
                                        (0037) export  Timer_WritePeriod
                                        (0038) export _Timer_WritePeriod
                                        (0039) export  Timer_WriteCompareValue
                                        (0040) export _Timer_WriteCompareValue
                                        (0041) export  Timer_wReadCompareValue
                                        (0042) export _Timer_wReadCompareValue
                                        (0043) export  Timer_wReadTimer
                                        (0044) export _Timer_wReadTimer
                                        (0045) export  Timer_wReadTimerSaveCV
                                        (0046) export _Timer_wReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  wTimer_ReadCompareValue  ; deprecated
                                        (0051) export _wTimer_ReadCompareValue  ; deprecated
                                        (0052) export  wTimer_ReadTimer         ; deprecated
                                        (0053) export _wTimer_ReadTimer         ; deprecated
                                        (0054) export  wTimer_ReadTimerSaveCV   ; deprecated
                                        (0055) export _wTimer_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  wTimer_ReadCounter       ; obsolete
                                        (0058) export _wTimer_ReadCounter       ; obsolete
                                        (0059) export  wTimer_CaptureCounter    ; obsolete
                                        (0060) export _wTimer_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA project1_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer_EnableInt:
                                        (0098) _Timer_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
05F6: 7F       RET                      (0102)    ret
05F7: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer_DisableInt:
                                        (0126) _Timer_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
05FA: 7F       RET                      (0130)    ret
05FB: 43 23 01 OR    REG[0x23],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer_Start:
                                        (0154) _Timer_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
05FE: 7F       RET                      (0158)    ret
05FF: 41 23 FE AND   REG[0x23],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register of the LSB block.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer_Stop:
                                        (0182) _Timer_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
0602: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 16-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS:
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer_WritePeriod:
                                        (0211) _Timer_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
0603: 60 21    MOV   REG[0x21],A        (0213)    mov   reg[Timer_PERIOD_LSB_REG], A
0605: 5B       MOV   A,X                (0214)    mov   A, X
0606: 60 25    MOV   REG[0x25],A        (0215)    mov   reg[Timer_PERIOD_MSB_REG], A
                                        (0216)    RAM_EPILOGUE RAM_USE_CLASS_1
0608: 7F       RET                      (0217)    ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) 
                                        (0222) .SECTION
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;  FUNCTION NAME: Timer_WriteCompareValue
                                        (0225) ;
                                        (0226) ;  DESCRIPTION:
                                        (0227) ;     Writes compare value into the Compare register (DR2).
                                        (0228) ;
                                        (0229) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0230) ;           Compare register. (Call Timer_Stop to disable).
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;
                                        (0233) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0234) ;  RETURNS:      Nothing
                                        (0235) ;  SIDE EFFECTS: 
                                        (0236) ;    The A and X registers may be modified by this or future implementations
                                        (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0239) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0240) ;    functions.
                                        (0241) ;
                                        (0242)  Timer_WriteCompareValue:
                                        (0243) _Timer_WriteCompareValue:
                                        (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
0609: 60 22    MOV   REG[0x22],A        (0245)    mov   reg[Timer_COMPARE_LSB_REG], A
060B: 5B       MOV   A,X                (0246)    mov   A, X
060C: 60 26    MOV   REG[0x26],A        (0247)    mov   reg[Timer_COMPARE_MSB_REG], A
                                        (0248)    RAM_EPILOGUE RAM_USE_CLASS_1
060E: 7F       RET                      (0249)    ret
                                        (0250) 
                                        (0251) .ENDSECTION
                                        (0252) 
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: Timer_wReadCompareValue
                                        (0257) ;
                                        (0258) ;  DESCRIPTION:
                                        (0259) ;     Reads the Compare registers.
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;
                                        (0262) ;  ARGUMENTS:    None
                                        (0263) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0264) ;  SIDE EFFECTS: 
                                        (0265) ;    The A and X registers may be modified by this or future implementations
                                        (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0269) ;    functions.
                                        (0270) ;
                                        (0271)  Timer_wReadCompareValue:
                                        (0272) _Timer_wReadCompareValue:
                                        (0273)  wTimer_ReadCompareValue:                        ; this name deprecated
                                        (0274) _wTimer_ReadCompareValue:                        ; this name deprecated
                                        (0275)    RAM_PROLOGUE RAM_USE_CLASS_1
060F: 5D 26    MOV   A,REG[0x26]        (0276)    mov   A, reg[Timer_COMPARE_MSB_REG]
0611: 5C       MOV   X,A                (0277)    mov   X, A
0612: 5D 22    MOV   A,REG[0x22]        (0278)    mov   A, reg[Timer_COMPARE_LSB_REG]
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_1
0614: 7F       RET                      (0280)    ret
                                        (0281) 
                                        (0282) .ENDSECTION
                                        (0283) 
                                        (0284) 
                                        (0285) .SECTION
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: Timer_wReadTimerSaveCV
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:
                                        (0290) ;     Returns the value in the Count register (DR0), preserving the
                                        (0291) ;     value in the compare register (DR2).
                                        (0292) ;-----------------------------------------------------------------------------
                                        (0293) ;
                                        (0294) ;  ARGUMENTS: None
                                        (0295) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0296) ;  SIDE EFFECTS:
                                        (0297) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0298) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0299) ;     3) The user module is stopped momentarily while the compare value is
                                        (0300) ;        restored.  This may cause the Count register to miss one or more
                                        (0301) ;        counts depending on the input clock speed.
                                        (0302) ;     4) The A and X registers may be modified by this or future implementations
                                        (0303) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0304) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0305) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0306) ;        functions.
                                        (0307) ;
                                        (0308) ;  THEORY of OPERATION:
                                        (0309) ;     1) Read and save the Compare register.
                                        (0310) ;     2) Read the Count register, causing its data to be latched into
                                        (0311) ;        the Compare register.
                                        (0312) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0313) ;        to the buffer.
                                        (0314) ;     4) Disable global interrupts
                                        (0315) ;     5) Halt the timer
                                        (0316) ;     6) Restore the Compare register values
                                        (0317) ;     7) Start the Timer again
                                        (0318) ;     8) Restore global interrupt state
                                        (0319) ;
                                        (0320)  Timer_wReadTimerSaveCV:
                                        (0321) _Timer_wReadTimerSaveCV:
                                        (0322)  wTimer_ReadTimerSaveCV:                         ; this name deprecated
                                        (0323) _wTimer_ReadTimerSaveCV:                         ; this name deprecated
                                        (0324)  wTimer_ReadCounter:                             ; this name deprecated
                                        (0325) _wTimer_ReadCounter:                             ; this name deprecated
                                        (0326) 
                                        (0327) CpuFlags:      equ   0
                                        (0328) wCount_MSB:    equ   1
                                        (0329) wCount_LSB:    equ   2
                                        (0330) 
                                        (0331)    RAM_PROLOGUE RAM_USE_CLASS_2
0615: 4F       MOV   X,SP               (0332)    mov   X, SP                                   ; X <- stack frame pointer
0616: 38 03    ADD   SP,0x3             (0333)    add   SP, 3                                   ; Reserve space for flags, count
0618: 5D 23    MOV   A,REG[0x23]        (0334)    mov   A, reg[Timer_CONTROL_LSB_REG]           ; save the Control register
061A: 08       PUSH  A                  (0335)    push  A
061B: 5D 22    MOV   A,REG[0x22]        (0336)    mov   A, reg[Timer_COMPARE_LSB_REG]           ; save the Compare register
061D: 08       PUSH  A                  (0337)    push  A
061E: 5D 26    MOV   A,REG[0x26]        (0338)    mov   A, reg[Timer_COMPARE_MSB_REG]
0620: 08       PUSH  A                  (0339)    push  A
0621: 5D 20    MOV   A,REG[0x20]        (0340)    mov   A, reg[Timer_COUNTER_LSB_REG]           ; synchronous copy DR2 <- DR0
                                        (0341)                                                  ; This may cause an interrupt!
0623: 5D 26    MOV   A,REG[0x26]        (0342)    mov   A, reg[Timer_COMPARE_MSB_REG]           ; Now grab DR2 (DR0) and save
0625: 54 01    MOV   [X+1],A            (0343)    mov   [X+wCount_MSB], A
0627: 5D 22    MOV   A,REG[0x22]        (0344)    mov   A, reg[Timer_COMPARE_LSB_REG]
0629: 54 02    MOV   [X+2],A            (0345)    mov   [X+wCount_LSB], A
062B: 50 00    MOV   A,0x0              (0346)    mov   A, 0                                    ; Guess the global interrupt state
062D: 49 F7 01 TST   REG[0xF7],0x1      (0347)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
0630: A0 03    JZ    0x0634             (0348)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
0632: 50 01    MOV   A,0x1              (0349)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0350) .SetupStatusFlag:                                ; and ...
0634: 54 00    MOV   [X+0],A            (0351)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
0636: 70 FE    AND   F,0xFE             
0638: 41 23 FE AND   REG[0x23],0xFE     
                                        (0352)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0353)    Timer_Stop_M                                  ; Disable (stop) the timer
063B: 18       POP   A                  (0354)    pop   A                                       ; Restore the Compare register
063C: 60 26    MOV   REG[0x26],A        (0355)    mov   reg[Timer_COMPARE_MSB_REG], A
063E: 18       POP   A                  (0356)    pop   A
063F: 60 22    MOV   REG[0x22],A        (0357)    mov   reg[Timer_COMPARE_LSB_REG], A
0641: 18       POP   A                  (0358)    pop   A                                       ; restore start state of the timer
0642: 60 23    MOV   REG[0x23],A        (0359)    mov   reg[Timer_CONTROL_LSB_REG], A
0644: 18       POP   A                  (0360)    pop   A                                       ; Return result stored in stack frame
0645: 20       POP   X                  (0361)    pop   X
0646: 70 3F    AND   F,0x3F             
0648: 71 C0    OR    F,0xC0             
                                        (0362)    RAM_EPILOGUE RAM_USE_CLASS_2
064A: 7E       RETI                     (0363)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0364) 
                                        (0365) .ENDSECTION
                                        (0366) 
                                        (0367) 
                                        (0368) .SECTION
                                        (0369) ;-----------------------------------------------------------------------------
                                        (0370) ;  FUNCTION NAME: Timer_wReadTimer
                                        (0371) ;
                                        (0372) ;  DESCRIPTION:
                                        (0373) ;     Performs a software capture of the Count register.  A synchronous
                                        (0374) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0375) ;
                                        (0376) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0377) ;-----------------------------------------------------------------------------
                                        (0378) ;
                                        (0379) ;  ARGUMENTS:    None
                                        (0380) ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
                                        (0381) ;  SIDE EFFECTS:
                                        (0382) ;    May cause an interrupt.
                                        (0383) ;
                                        (0384) ;    The A and X registers may be modified by this or future implementations
                                        (0385) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0386) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390) ;  THEORY of OPERATION:
                                        (0391) ;     1) Read the Count register - this causes the count value to be
                                        (0392) ;        latched into the Compare registers.
                                        (0393) ;     2) Read and return the Count register values from the Compare
                                        (0394) ;        registers into the return buffer.
                                        (0395) ;
                                        (0396)  Timer_wReadTimer:
                                        (0397) _Timer_wReadTimer:
                                        (0398)  wTimer_ReadTimer:                               ; this name deprecated
                                        (0399) _wTimer_ReadTimer:                               ; this name deprecated
                                        (0400)  wTimer_CaptureCounter:                          ; this name deprecated
                                        (0401) _wTimer_CaptureCounter:                          ; this name deprecated
                                        (0402) 
                                        (0403)    RAM_PROLOGUE RAM_USE_CLASS_1
064B: 5D 20    MOV   A,REG[0x20]        (0404)    mov   A, reg[Timer_COUNTER_LSB_REG]           ; synchronous copy DR2 <- DR0
                                        (0405)                                                  ; This may cause an interrupt!
                                        (0406) 
064D: 5D 26    MOV   A,REG[0x26]        (0407)    mov   A, reg[Timer_COMPARE_MSB_REG]           ; Return DR2 (actually DR0)
064F: 5C       MOV   X,A                (0408)    mov   X, A
0650: 5D 22    MOV   A,REG[0x22]        (0409)    mov   A, reg[Timer_COMPARE_LSB_REG]
                                        (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
0652: 7F       RET                      (0411)    ret
                                        (0412) 
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) ; End of File Timer.asm
FILE: lib\pga_4.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_4.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2014/7/14 at 8:14:38
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_4.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_4_Start
                                        (0060) export _PGA_4_Start
                                        (0061) export  PGA_4_SetPower
                                        (0062) export _PGA_4_SetPower
                                        (0063) 
                                        (0064) export  PGA_4_SetGain
                                        (0065) export _PGA_4_SetGain
                                        (0066) 
                                        (0067) export  PGA_4_Stop
                                        (0068) export _PGA_4_Stop
                                        (0069) 
                                        (0070) IF (PGA_4_AGNDBUFAPI)
                                        (0071) export  PGA_4_EnableAGNDBuffer
                                        (0072) export _PGA_4_EnableAGNDBuffer
                                        (0073) export  PGA_4_DisableAGNDBuffer
                                        (0074) export _PGA_4_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_4_Start
                                        (0092) ;  FUNCTION NAME: PGA_4_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_4_Start:
                                        (0111) _PGA_4_Start:
                                        (0112)  PGA_4_SetPower:
                                        (0113) _PGA_4_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
0653: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
0655: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
0656: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
0657: 5D 7F    MOV   A,REG[0x7F]        (0120)    mov  A, reg[PGA_4_GAIN_CR2]                             ; read power value
0659: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
065B: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
065D: 60 7F    MOV   REG[0x7F],A        (0123)    mov  reg[PGA_4_GAIN_CR2], A                        ; move complete value back to register
065F: 18       POP   A                  (0124)    pop  A
0660: 70 3F    AND   F,0x3F             
0662: 71 C0    OR    F,0xC0             
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
0664: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_4_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_4_SetGain:
                                        (0154) _PGA_4_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
0665: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
0667: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
0668: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
0669: 5D 7D    MOV   A,REG[0x7D]        (0161)    mov  A, reg[PGA_4_GAIN_CR0]                             ; read mux settings
066B: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
066D: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
0670: B0 0E    JNZ   0x067F             (0164)    jnz  .SETHIGHGAIN
0672: 41 7C FE AND   REG[0x7C],0xFE     (0165)    and  reg[PGA_4_GAIN_CR3],~EXGAIN                        ; Clear High Gain bit.
0675: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
0677: 60 7D    MOV   REG[0x7D],A        (0167)    mov  reg[PGA_4_GAIN_CR0], A                             ; move complete value back to register
0679: 18       POP   A                  (0168)    pop  A
067A: 70 3F    AND   F,0x3F             
067C: 71 C0    OR    F,0xC0             
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
067E: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
067F: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
0682: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
0684: 60 7D    MOV   REG[0x7D],A        (0175)    mov  reg[PGA_4_GAIN_CR0], A                             ; move complete value back to register
0686: 43 7C 01 OR    REG[0x7C],0x1      (0176)    or   reg[PGA_4_GAIN_CR3], EXGAIN                        ; Set High Gain bit.
0689: 18       POP   A                  (0177)    pop  A
068A: 70 3F    AND   F,0x3F             
068C: 71 C0    OR    F,0xC0             
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
068E: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_4_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_4_Stop:
                                        (0203) _PGA_4_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
068F: 41 7F FC AND   REG[0x7F],0xFC     (0206)    and REG[PGA_4_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
0692: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_4_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_4_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_4_EnableAGNDBuffer:
                                        (0233) _PGA_4_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_4_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_4_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_4_DisableAGNDBuffer:
                                        (0261) _PGA_4_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_4_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_4.asm
FILE: lib\pga_3.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_3.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2014/7/14 at 8:14:38
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_3.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_3_Start
                                        (0060) export _PGA_3_Start
                                        (0061) export  PGA_3_SetPower
                                        (0062) export _PGA_3_SetPower
                                        (0063) 
                                        (0064) export  PGA_3_SetGain
                                        (0065) export _PGA_3_SetGain
                                        (0066) 
                                        (0067) export  PGA_3_Stop
                                        (0068) export _PGA_3_Stop
                                        (0069) 
                                        (0070) IF (PGA_3_AGNDBUFAPI)
                                        (0071) export  PGA_3_EnableAGNDBuffer
                                        (0072) export _PGA_3_EnableAGNDBuffer
                                        (0073) export  PGA_3_DisableAGNDBuffer
                                        (0074) export _PGA_3_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_3_Start
                                        (0092) ;  FUNCTION NAME: PGA_3_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_3_Start:
                                        (0111) _PGA_3_Start:
                                        (0112)  PGA_3_SetPower:
                                        (0113) _PGA_3_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
0693: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
0695: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
0696: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
0697: 5D 7B    MOV   A,REG[0x7B]        (0120)    mov  A, reg[PGA_3_GAIN_CR2]                             ; read power value
0699: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
069B: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
069D: 60 7B    MOV   REG[0x7B],A        (0123)    mov  reg[PGA_3_GAIN_CR2], A                        ; move complete value back to register
069F: 18       POP   A                  (0124)    pop  A
06A0: 70 3F    AND   F,0x3F             
06A2: 71 C0    OR    F,0xC0             
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
06A4: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_3_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_3_SetGain:
                                        (0154) _PGA_3_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
06A5: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
06A7: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
06A8: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
06A9: 5D 79    MOV   A,REG[0x79]        (0161)    mov  A, reg[PGA_3_GAIN_CR0]                             ; read mux settings
06AB: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
06AD: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
06B0: B0 0E    JNZ   0x06BF             (0164)    jnz  .SETHIGHGAIN
06B2: 41 78 FE AND   REG[0x78],0xFE     (0165)    and  reg[PGA_3_GAIN_CR3],~EXGAIN                        ; Clear High Gain bit.
06B5: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
06B7: 60 79    MOV   REG[0x79],A        (0167)    mov  reg[PGA_3_GAIN_CR0], A                             ; move complete value back to register
06B9: 18       POP   A                  (0168)    pop  A
06BA: 70 3F    AND   F,0x3F             
06BC: 71 C0    OR    F,0xC0             
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
06BE: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
06BF: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
06C2: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
06C4: 60 79    MOV   REG[0x79],A        (0175)    mov  reg[PGA_3_GAIN_CR0], A                             ; move complete value back to register
06C6: 43 78 01 OR    REG[0x78],0x1      (0176)    or   reg[PGA_3_GAIN_CR3], EXGAIN                        ; Set High Gain bit.
06C9: 18       POP   A                  (0177)    pop  A
06CA: 70 3F    AND   F,0x3F             
06CC: 71 C0    OR    F,0xC0             
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
06CE: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_3_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_3_Stop:
                                        (0203) _PGA_3_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
06CF: 41 7B FC AND   REG[0x7B],0xFC     (0206)    and REG[PGA_3_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
06D2: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_3_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_3_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_3_EnableAGNDBuffer:
                                        (0233) _PGA_3_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_3_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_3_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_3_DisableAGNDBuffer:
                                        (0261) _PGA_3_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_3_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_3.asm
FILE: lib\pga_2.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_2.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2014/7/14 at 8:14:38
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_2.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_2_Start
                                        (0060) export _PGA_2_Start
                                        (0061) export  PGA_2_SetPower
                                        (0062) export _PGA_2_SetPower
                                        (0063) 
                                        (0064) export  PGA_2_SetGain
                                        (0065) export _PGA_2_SetGain
                                        (0066) 
                                        (0067) export  PGA_2_Stop
                                        (0068) export _PGA_2_Stop
                                        (0069) 
                                        (0070) IF (PGA_2_AGNDBUFAPI)
                                        (0071) export  PGA_2_EnableAGNDBuffer
                                        (0072) export _PGA_2_EnableAGNDBuffer
                                        (0073) export  PGA_2_DisableAGNDBuffer
                                        (0074) export _PGA_2_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_2_Start
                                        (0092) ;  FUNCTION NAME: PGA_2_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_2_Start:
                                        (0111) _PGA_2_Start:
                                        (0112)  PGA_2_SetPower:
                                        (0113) _PGA_2_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
06D3: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
06D5: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
06D6: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
06D7: 5D 77    MOV   A,REG[0x77]        (0120)    mov  A, reg[PGA_2_GAIN_CR2]                             ; read power value
06D9: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
06DB: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
06DD: 60 77    MOV   REG[0x77],A        (0123)    mov  reg[PGA_2_GAIN_CR2], A                        ; move complete value back to register
06DF: 18       POP   A                  (0124)    pop  A
06E0: 70 3F    AND   F,0x3F             
06E2: 71 C0    OR    F,0xC0             
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
06E4: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_2_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_2_SetGain:
                                        (0154) _PGA_2_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
06E5: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
06E7: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
06E8: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
06E9: 5D 75    MOV   A,REG[0x75]        (0161)    mov  A, reg[PGA_2_GAIN_CR0]                             ; read mux settings
06EB: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
06ED: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
06F0: B0 0E    JNZ   0x06FF             (0164)    jnz  .SETHIGHGAIN
06F2: 41 74 FE AND   REG[0x74],0xFE     (0165)    and  reg[PGA_2_GAIN_CR3],~EXGAIN                        ; Clear High Gain bit.
06F5: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
06F7: 60 75    MOV   REG[0x75],A        (0167)    mov  reg[PGA_2_GAIN_CR0], A                             ; move complete value back to register
06F9: 18       POP   A                  (0168)    pop  A
06FA: 70 3F    AND   F,0x3F             
06FC: 71 C0    OR    F,0xC0             
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
06FE: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
06FF: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
0702: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
0704: 60 75    MOV   REG[0x75],A        (0175)    mov  reg[PGA_2_GAIN_CR0], A                             ; move complete value back to register
0706: 43 74 01 OR    REG[0x74],0x1      (0176)    or   reg[PGA_2_GAIN_CR3], EXGAIN                        ; Set High Gain bit.
0709: 18       POP   A                  (0177)    pop  A
070A: 70 3F    AND   F,0x3F             
070C: 71 C0    OR    F,0xC0             
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
070E: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_2_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_2_Stop:
                                        (0203) _PGA_2_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
070F: 41 77 FC AND   REG[0x77],0xFC     (0206)    and REG[PGA_2_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
0712: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_2_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_2_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_2_EnableAGNDBuffer:
                                        (0233) _PGA_2_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_2_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_2_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_2_DisableAGNDBuffer:
                                        (0261) _PGA_2_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_2_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_2.asm
FILE: lib\pga_1.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_1.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2014/7/14 at 8:14:38
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_1.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_1_Start
                                        (0060) export _PGA_1_Start
                                        (0061) export  PGA_1_SetPower
                                        (0062) export _PGA_1_SetPower
                                        (0063) 
                                        (0064) export  PGA_1_SetGain
                                        (0065) export _PGA_1_SetGain
                                        (0066) 
                                        (0067) export  PGA_1_Stop
                                        (0068) export _PGA_1_Stop
                                        (0069) 
                                        (0070) IF (PGA_1_AGNDBUFAPI)
                                        (0071) export  PGA_1_EnableAGNDBuffer
                                        (0072) export _PGA_1_EnableAGNDBuffer
                                        (0073) export  PGA_1_DisableAGNDBuffer
                                        (0074) export _PGA_1_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_1_Start
                                        (0092) ;  FUNCTION NAME: PGA_1_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_1_Start:
                                        (0111) _PGA_1_Start:
                                        (0112)  PGA_1_SetPower:
                                        (0113) _PGA_1_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
0713: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
0715: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
0716: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
0717: 5D 73    MOV   A,REG[0x73]        (0120)    mov  A, reg[PGA_1_GAIN_CR2]                             ; read power value
0719: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
071B: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
071D: 60 73    MOV   REG[0x73],A        (0123)    mov  reg[PGA_1_GAIN_CR2], A                        ; move complete value back to register
071F: 18       POP   A                  (0124)    pop  A
0720: 70 3F    AND   F,0x3F             
0722: 71 C0    OR    F,0xC0             
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
0724: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_1_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_1_SetGain:
                                        (0154) _PGA_1_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
0725: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
0727: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
0728: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
0729: 5D 71    MOV   A,REG[0x71]        (0161)    mov  A, reg[PGA_1_GAIN_CR0]                             ; read mux settings
072B: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
072D: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
0730: B0 0E    JNZ   0x073F             (0164)    jnz  .SETHIGHGAIN
0732: 41 70 FE AND   REG[0x70],0xFE     (0165)    and  reg[PGA_1_GAIN_CR3],~EXGAIN                        ; Clear High Gain bit.
0735: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
0737: 60 71    MOV   REG[0x71],A        (0167)    mov  reg[PGA_1_GAIN_CR0], A                             ; move complete value back to register
0739: 18       POP   A                  (0168)    pop  A
073A: 70 3F    AND   F,0x3F             
073C: 71 C0    OR    F,0xC0             
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
073E: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
073F: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
0742: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
0744: 60 71    MOV   REG[0x71],A        (0175)    mov  reg[PGA_1_GAIN_CR0], A                             ; move complete value back to register
0746: 43 70 01 OR    REG[0x70],0x1      (0176)    or   reg[PGA_1_GAIN_CR3], EXGAIN                        ; Set High Gain bit.
0749: 18       POP   A                  (0177)    pop  A
074A: 70 3F    AND   F,0x3F             
074C: 71 C0    OR    F,0xC0             
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
074E: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_1_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_1_Stop:
                                        (0203) _PGA_1_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
074F: 41 73 FC AND   REG[0x73],0xFC     (0206)    and REG[PGA_1_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
0752: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_1_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_1_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_1_EnableAGNDBuffer:
                                        (0233) _PGA_1_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_1_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_1_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_1_DisableAGNDBuffer:
                                        (0261) _PGA_1_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_1_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_1.asm
FILE: lib\lpf2_3.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: LPF2_3.asm
                                        (0004) ;;   Version: 4.10, Updated on 2014/7/14 at 8:14:18
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Asm source for 2 Pole Switched Capacitor Low Pass Filter
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "LPF2_3.inc"
                                        (0025) 
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  LPF2_3_Start
                                        (0031) export _LPF2_3_Start
                                        (0032) export  LPF2_3_SetPower
                                        (0033) export _LPF2_3_SetPower
                                        (0034) 
                                        (0035) export  LPF2_3_SetC1
                                        (0036) export _LPF2_3_SetC1
                                        (0037) export  LPF2_3_SetC2
                                        (0038) export _LPF2_3_SetC2
                                        (0039) export  LPF2_3_SetC3
                                        (0040) export _LPF2_3_SetC3
                                        (0041) export  LPF2_3_SetC4
                                        (0042) export _LPF2_3_SetC4
                                        (0043) export  LPF2_3_SetCA
                                        (0044) export _LPF2_3_SetCA
                                        (0045) export  LPF2_3_SetCB
                                        (0046) export _LPF2_3_SetCB
                                        (0047) export  LPF2_3_SetPolarity
                                        (0048) export _LPF2_3_SetPolarity
                                        (0049) 
                                        (0050) export  LPF2_3_Stop
                                        (0051) export _LPF2_3_Stop
                                        (0052) 
                                        (0053) 
                                        (0054) ;-----------------------------------------------
                                        (0055) ; Variable Allocation
                                        (0056) ;-----------------------------------------------
                                        (0057) AREA bss (RAM,REL)
                                        (0058) 
                                        (0059) 
                                        (0060) 
                                        (0061) ;-----------------------------------------------
                                        (0062) ;  EQUATES
                                        (0063) ;-----------------------------------------------
                                        (0064) bPOWERMASK:          equ   03h         ; Power field mask for CR3
                                        (0065) LPF_CNUMMASK:        equ   1fh         ; Mask for A, B & C Caps
                                        (0066) LPF_CFBMASK:         equ   80h         ; Mask for Feedback Caps
                                        (0067) LPF_POLARITYMASK:    equ   20h         ; Mask of Asign field for CR0
                                        (0068) 
                                        (0069) LPF2_3_IfCond:          equ LPF2_3_AMD_MSK & 0x01
                                        (0070) 
                                        (0071) IF (LPF2_3_AMD_VAL)
                                        (0072)  IF (LPF2_3_IfCond)
                                        (0073)   LPF2_3_AMD:           equ LPF2_3_AMD_VAL
                                        (0074)  ELSE
                                        (0075)   LPF2_3_AMD:           equ LPF2_3_AMD_VAL << 4
                                        (0076)  ENDIF
                                        (0077) ENDIF
                                        (0078) 
                                        (0079) AREA UserModules (ROM,REL)
                                        (0080) ;-----------------------------------------------------------------------------
                                        (0081) ;  FUNCTION NAME: LPF2_3_Start
                                        (0082) ;
                                        (0083) ;  DESCRIPTION: Applies power setting to the module's PSoC blocks
                                        (0084) ;
                                        (0085) ;-----------------------------------------------------------------------------
                                        (0086) ;
                                        (0087) ;  ARGUMENTS:    A register contains the power setting (constant)
                                        (0088) ;  RETURNS:      Nothing
                                        (0089) ;  SIDE EFFECTS: 
                                        (0090) ;    The A and X registers may be modified by this or future implementations
                                        (0091) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0092) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0093) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0094) ;    functions.
                                        (0095) ;
                                        (0096) 
                                        (0097)  LPF2_3_Start:
                                        (0098) _LPF2_3_Start:
                                        (0099)  LPF2_3_SetPower:
                                        (0100) _LPF2_3_SetPower:
                                        (0101)     RAM_PROLOGUE RAM_USE_CLASS_2
0753: 21 03    AND   A,0x3              (0102)     and A, bPOWERMASK                        ; mask A to protect unchanged bits
0755: 4F       MOV   X,SP               (0103)     mov X, SP                                ; define temp store location
                                        (0104) 
0756: 08       PUSH  A                  (0105)     push A                                   ; put power value in temp store
                                        (0106) 
                                        (0107) IF (LPF2_3_AMD_VAL)
                                        (0108)    M8C_SetBank1
                                        (0109)    mov   A, reg[LPF2_3_AMD_REG]                  ; read modulator register
                                        (0110)    and   A, ~LPF2_3_AMD_MSK                      ; clear modulator bittfield in A
                                        (0111)    or    A, LPF2_3_AMD                           ; combine modulator value with balance of register
                                        (0112)    mov   reg[LPF2_3_AMD_REG], A                  ; move complete value back to register
                                        (0113)    M8C_SetBank0
                                        (0114) ENDIF
                                        (0115) 
0757: 5D 83    MOV   A,REG[0x83]        (0116)     mov A, reg[LPF2_3_FLIN_CR3]    ; read power value
0759: 21 FC    AND   A,0xFC             (0117)     and A, ~bPOWERMASK                       ; clear power bits in A
075B: 2B 00    OR    A,[X+0]            (0118)     or  A, [X]                               ; combine power value with balance of reg.
075D: 60 83    MOV   REG[0x83],A        (0119)     mov reg[LPF2_3_FLIN_CR3], A    ; move complete value back to register
                                        (0120) 
075F: 5D 87    MOV   A,REG[0x87]        (0121)     mov A, reg[LPF2_3_FLOUT_CR3]   ; read power value
0761: 21 FC    AND   A,0xFC             (0122)     and A, ~bPOWERMASK                       ; clear power bits in A
0763: 2B 00    OR    A,[X+0]            (0123)     or  A, [X]                               ; combine power value with balance of reg.
0765: 60 87    MOV   REG[0x87],A        (0124)     mov reg[LPF2_3_FLOUT_CR3], A   ; move complete value back to register
0767: 18       POP   A                  (0125)     pop A
0768: 70 3F    AND   F,0x3F             
076A: 71 C0    OR    F,0xC0             
                                        (0126)     RAM_EPILOGUE RAM_USE_CLASS_2
076C: 7F       RET                      (0127)     ret
                                        (0128) 
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: LPF2_3_SetCn, n=1..4
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:   Alters the filter transfer function by modifying the value
                                        (0133) ;                 of the capacitors (defined in LPF2_3.inc)
                                        (0134) ;
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;
                                        (0137) ;  ARGUMENTS:    The A register contains a non-negative integer less than 32
                                        (0138) ;  RETURNS:
                                        (0139) ;  SIDE EFFECTS: 
                                        (0140) ;    The A and X registers may be modified by this or future implementations
                                        (0141) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0142) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0143) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0144) ;    functions.
                                        (0145) ;
                                        (0146) 
                                        (0147)  LPF2_3_SetC1:
                                        (0148) _LPF2_3_SetC1:
                                        (0149)     RAM_PROLOGUE RAM_USE_CLASS_2
076D: 21 1F    AND   A,0x1F             (0150)     and A, LPF_CNUMMASK                      ; mask A to protect unchanged bits
076F: 4F       MOV   X,SP               (0151)     mov X, SP                                ; define temp store location
0770: 08       PUSH  A                  (0152)     push A                                   ; put C1 value in temp store
0771: 5D 80    MOV   A,REG[0x80]        (0153)     mov A, reg[LPF2_3_FILT_C1_REG] ; read current C1
0773: 21 E0    AND   A,0xE0             (0154)     and A, ~LPF_CNUMMASK                     ; clear C1 bits in A
0775: 2B 00    OR    A,[X+0]            (0155)     or  A, [X]                               ; combine C1 value with balance of reg.
0777: 60 80    MOV   REG[0x80],A        (0156)     mov reg[LPF2_3_FILT_C1_REG], A ; move complete value back to register
0779: 18       POP   A                  (0157)     pop  A
077A: 70 3F    AND   F,0x3F             
077C: 71 C0    OR    F,0xC0             
                                        (0158)     RAM_EPILOGUE RAM_USE_CLASS_2
077E: 7F       RET                      (0159)     ret
                                        (0160) 
                                        (0161)  LPF2_3_SetC2:
                                        (0162) _LPF2_3_SetC2:
                                        (0163)     RAM_PROLOGUE RAM_USE_CLASS_2
077F: 21 1F    AND   A,0x1F             (0164)     and A, LPF_CNUMMASK                      ; mask A to protect unchanged bits
0781: 4F       MOV   X,SP               (0165)     mov X, SP                                ; define temp store location
0782: 08       PUSH  A                  (0166)     push A                                   ; put C2 value in temp store
0783: 5D 81    MOV   A,REG[0x81]        (0167)     mov A, reg[LPF2_3_FILT_C2_REG] ; read current C2
0785: 21 E0    AND   A,0xE0             (0168)     and A, ~LPF_CNUMMASK                     ; clear C2 bits in A
0787: 2B 00    OR    A,[X+0]            (0169)     or  A, [X]                               ; combine C2 value with balance of reg.
0789: 60 81    MOV   REG[0x81],A        (0170)     mov reg[LPF2_3_FILT_C2_REG], A ; move complete value back to register
078B: 18       POP   A                  (0171)     pop A
078C: 70 3F    AND   F,0x3F             
078E: 71 C0    OR    F,0xC0             
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
0790: 7F       RET                      (0173)     ret
                                        (0174) 
                                        (0175)  LPF2_3_SetC3:
                                        (0176) _LPF2_3_SetC3:
                                        (0177)     RAM_PROLOGUE RAM_USE_CLASS_2
0791: 21 1F    AND   A,0x1F             (0178)     and A, LPF_CNUMMASK                      ; mask A to protect unchanged bits
0793: 4F       MOV   X,SP               (0179)     mov X, SP                                ; define temp store location
0794: 08       PUSH  A                  (0180)     push A                                   ; put C3 value in temp store
0795: 5D 84    MOV   A,REG[0x84]        (0181)     mov A, reg[LPF2_3_FILT_C3_REG] ; read current C3
0797: 21 E0    AND   A,0xE0             (0182)     and A, ~LPF_CNUMMASK                     ; clear C3 bits in A
0799: 2B 00    OR    A,[X+0]            (0183)     or  A, [X]                               ; combine C3 value with balance of reg.
079B: 60 84    MOV   REG[0x84],A        (0184)     mov reg[LPF2_3_FILT_C3_REG], A ; move complete value back to register
079D: 18       POP   A                  (0185)     pop A
079E: 70 3F    AND   F,0x3F             
07A0: 71 C0    OR    F,0xC0             
                                        (0186)     RAM_EPILOGUE RAM_USE_CLASS_2
07A2: 7F       RET                      (0187)     ret
                                        (0188) 
                                        (0189)  LPF2_3_SetC4:
                                        (0190) _LPF2_3_SetC4:
                                        (0191)     RAM_PROLOGUE RAM_USE_CLASS_2
07A3: 21 1F    AND   A,0x1F             (0192)     and A, LPF_CNUMMASK                      ; mask A to protect unchanged bits
07A5: 4F       MOV   X,SP               (0193)     mov X, SP                                ; define temp store location
07A6: 08       PUSH  A                  (0194)     push A                                   ; put C4 value in temp store
07A7: 5D 86    MOV   A,REG[0x86]        (0195)     mov A, reg[LPF2_3_FILT_C4_REG] ; read current C4
07A9: 21 E0    AND   A,0xE0             (0196)     and A, ~LPF_CNUMMASK                     ; clear C4 bits in A
07AB: 2B 00    OR    A,[X+0]            (0197)     or  A, [X]                               ; combine C4 value with balance of reg.
07AD: 60 86    MOV   REG[0x86],A        (0198)     mov reg[LPF2_3_FILT_C4_REG], A ; move complete value back to register
07AF: 18       POP   A                  (0199)     pop A
07B0: 70 3F    AND   F,0x3F             
07B2: 71 C0    OR    F,0xC0             
                                        (0200)     RAM_EPILOGUE RAM_USE_CLASS_2
07B4: 7F       RET                      (0201)     ret
                                        (0202) 
                                        (0203) 
                                        (0204) ;-----------------------------------------------------------------------------
                                        (0205) ;  FUNCTION NAME: LPF2_3_SetCA
                                        (0206) ;            and  LPF2_3_SetCB
                                        (0207) ;
                                        (0208) ;  DESCRIPTION:   Alters the filter transfer function by modifying the value
                                        (0209) ;                 of the op-amp feedback capacitors (see LPF2_3.inc)
                                        (0210) ;-----------------------------------------------------------------------------
                                        (0211) ;
                                        (0212) ;  ARGUMENTS:    The A register contains one of the LPF2_3_FEEDBACK
                                        (0213) ;                  constants defined in LPF2_3.inc
                                        (0214) ;  RETURNS:      Nothing.
                                        (0215) ;  SIDE EFFECTS: 
                                        (0216) ;    The A and X registers may be modified by this or future implementations
                                        (0217) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0218) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0219) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0220) ;    functions.
                                        (0221) ;
                                        (0222) 
                                        (0223)  LPF2_3_SetCA:
                                        (0224) _LPF2_3_SetCA:
                                        (0225)     RAM_PROLOGUE RAM_USE_CLASS_1
07B5: 39 01    CMP   A,0x1              (0226)     cmp   A, LPF2_3_FEEDBACK_32    ; Change Feedback to 32 units?
07B7: A0 05    JZ    0x07BD             (0227)     jz    .SetCAto32                         ;    Yes, go make it so
                                        (0228)                                              ;     No, clear it to 16 units...
07B9: 41 80 7F AND   REG[0x80],0x7F     (0229)     and   reg[LPF2_3_FILT_CA_REG], ~LPF_CFBMASK
                                        (0230)     RAM_EPILOGUE RAM_USE_CLASS_1 
07BC: 7F       RET                      (0231)     ret
                                        (0232) .SetCAto32:
07BD: 43 80 80 OR    REG[0x80],0x80     (0233)     or    reg[LPF2_3_FILT_CA_REG],  LPF_CFBMASK
                                        (0234)     RAM_EPILOGUE RAM_USE_CLASS_1
07C0: 7F       RET                      (0235)     ret
                                        (0236) 
                                        (0237) 
                                        (0238)  LPF2_3_SetCB:
                                        (0239) _LPF2_3_SetCB:
                                        (0240)     RAM_PROLOGUE RAM_USE_CLASS_1
07C1: 39 01    CMP   A,0x1              (0241)     cmp   A, LPF2_3_FEEDBACK_32    ; Change Feedback to 32 units?
07C3: A0 05    JZ    0x07C9             (0242)     jz    .SetCAto32                         ;    Yes, go make it so
                                        (0243)                                              ;     No, clear it to 16 units...
07C5: 41 84 7F AND   REG[0x84],0x7F     (0244)     and   reg[LPF2_3_FILT_CB_REG], ~LPF_CFBMASK
                                        (0245)     RAM_EPILOGUE RAM_USE_CLASS_1
07C8: 7F       RET                      (0246)     ret
                                        (0247) .SetCAto32:
07C9: 43 84 80 OR    REG[0x84],0x80     (0248)     or    reg[LPF2_3_FILT_CB_REG],  LPF_CFBMASK
                                        (0249)     RAM_EPILOGUE RAM_USE_CLASS_1
07CC: 7F       RET                      (0250)     ret
                                        (0251) 
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;  FUNCTION NAME: LPF2_3_SetPolarity
                                        (0254) ;
                                        (0255) ;  DESCRIPTION:   Alters the output polarity of the data by altering the
                                        (0256) ;                 input polarity at FLIN
                                        (0257) ;-----------------------------------------------------------------------------
                                        (0258) ;
                                        (0259) ;  ARGUMENTS:    The A register contains one of the LPF2_3_POLARITY
                                        (0260) ;                  constants defined in LPF2_3.inc
                                        (0261) ;  RETURNS:      Nothing.
                                        (0262) ;  SIDE EFFECTS: 
                                        (0263) ;    The A and X registers may be modified by this or future implementations
                                        (0264) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0265) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0266) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0267) ;    functions.
                                        (0268) ;
                                        (0269) 
                                        (0270)  LPF2_3_SetPolarity:
                                        (0271) _LPF2_3_SetPolarity:
                                        (0272)     RAM_PROLOGUE RAM_USE_CLASS_1
07CD: 39 01    CMP   A,0x1              (0273)     cmp   A, LPF2_3_POLARITY_NON_INVERTING ; Should the output be non-inverting?
07CF: A0 05    JZ    0x07D5             (0274)     jz    .SetPoltoNonInv                         ;    Yes, go make it so
                                        (0275)                                                   ;    No, then set it to Inverting...
07D1: 43 80 20 OR    REG[0x80],0x20     (0276)     or    reg[LPF2_3_FLIN_CR0], LPF_POLARITYMASK
                                        (0277)     RAM_EPILOGUE RAM_USE_CLASS_1
07D4: 7F       RET                      (0278)     ret
                                        (0279) .SetPoltoNonInv:
07D5: 41 80 DF AND   REG[0x80],0xDF     (0280)     and   reg[LPF2_3_FLIN_CR0], ~LPF_POLARITYMASK
                                        (0281)     RAM_EPILOGUE RAM_USE_CLASS_1
07D8: 7F       RET                      (0282)     ret
                                        (0283) 
                                        (0284) ;-----------------------------------------------------------------------------
                                        (0285) ;  FUNCTION NAME: LPF2_3_Stop
                                        (0286) ;
                                        (0287) ;  DESCRIPTION: Cuts power to the user module.
                                        (0288) ;
                                        (0289) ;-----------------------------------------------------------------------------
                                        (0290) ;
                                        (0291) ;  ARGUMENTS:     None
                                        (0292) ;  RETURNS:       Nothing
                                        (0293) ;  SIDE EFFECTS: 
                                        (0294) ;    The A and X registers may be modified by this or future implementations
                                        (0295) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0296) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0297) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0298) ;    functions.
                                        (0299) ;
                                        (0300)  LPF2_3_Stop:
                                        (0301) _LPF2_3_Stop:
                                        (0302) 
                                        (0303)     RAM_PROLOGUE RAM_USE_CLASS_1
07D9: 41 83 FC AND   REG[0x83],0xFC     (0304)     and reg[LPF2_3_FLIN_CR3],  ~bPOWERMASK
07DC: 41 87 FC AND   REG[0x87],0xFC     (0305)     and reg[LPF2_3_FLOUT_CR3], ~bPOWERMASK
                                        (0306)     RAM_EPILOGUE RAM_USE_CLASS_1
07DF: 7F       RET                      (0307)     ret
                                        (0308) 
                                        (0309) 
                                        (0310) ; End of File LPF2_3.asm
FILE: lib\lpf2_1.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: LPF2_1.asm
                                        (0004) ;;   Version: 4.10, Updated on 2014/7/14 at 8:14:18
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Asm source for 2 Pole Switched Capacitor Low Pass Filter
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "LPF2_1.inc"
                                        (0025) 
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  LPF2_1_Start
                                        (0031) export _LPF2_1_Start
                                        (0032) export  LPF2_1_SetPower
                                        (0033) export _LPF2_1_SetPower
                                        (0034) 
                                        (0035) export  LPF2_1_SetC1
                                        (0036) export _LPF2_1_SetC1
                                        (0037) export  LPF2_1_SetC2
                                        (0038) export _LPF2_1_SetC2
                                        (0039) export  LPF2_1_SetC3
                                        (0040) export _LPF2_1_SetC3
                                        (0041) export  LPF2_1_SetC4
                                        (0042) export _LPF2_1_SetC4
                                        (0043) export  LPF2_1_SetCA
                                        (0044) export _LPF2_1_SetCA
                                        (0045) export  LPF2_1_SetCB
                                        (0046) export _LPF2_1_SetCB
                                        (0047) export  LPF2_1_SetPolarity
                                        (0048) export _LPF2_1_SetPolarity
                                        (0049) 
                                        (0050) export  LPF2_1_Stop
                                        (0051) export _LPF2_1_Stop
                                        (0052) 
                                        (0053) 
                                        (0054) ;-----------------------------------------------
                                        (0055) ; Variable Allocation
                                        (0056) ;-----------------------------------------------
                                        (0057) AREA bss (RAM,REL)
                                        (0058) 
                                        (0059) 
                                        (0060) 
                                        (0061) ;-----------------------------------------------
                                        (0062) ;  EQUATES
                                        (0063) ;-----------------------------------------------
                                        (0064) bPOWERMASK:          equ   03h         ; Power field mask for CR3
                                        (0065) LPF_CNUMMASK:        equ   1fh         ; Mask for A, B & C Caps
                                        (0066) LPF_CFBMASK:         equ   80h         ; Mask for Feedback Caps
                                        (0067) LPF_POLARITYMASK:    equ   20h         ; Mask of Asign field for CR0
                                        (0068) 
                                        (0069) LPF2_1_IfCond:          equ LPF2_1_AMD_MSK & 0x01
                                        (0070) 
                                        (0071) IF (LPF2_1_AMD_VAL)
                                        (0072)  IF (LPF2_1_IfCond)
                                        (0073)   LPF2_1_AMD:           equ LPF2_1_AMD_VAL
                                        (0074)  ELSE
                                        (0075)   LPF2_1_AMD:           equ LPF2_1_AMD_VAL << 4
                                        (0076)  ENDIF
                                        (0077) ENDIF
                                        (0078) 
                                        (0079) AREA UserModules (ROM,REL)
                                        (0080) ;-----------------------------------------------------------------------------
                                        (0081) ;  FUNCTION NAME: LPF2_1_Start
                                        (0082) ;
                                        (0083) ;  DESCRIPTION: Applies power setting to the module's PSoC blocks
                                        (0084) ;
                                        (0085) ;-----------------------------------------------------------------------------
                                        (0086) ;
                                        (0087) ;  ARGUMENTS:    A register contains the power setting (constant)
                                        (0088) ;  RETURNS:      Nothing
                                        (0089) ;  SIDE EFFECTS: 
                                        (0090) ;    The A and X registers may be modified by this or future implementations
                                        (0091) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0092) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0093) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0094) ;    functions.
                                        (0095) ;
                                        (0096) 
                                        (0097)  LPF2_1_Start:
                                        (0098) _LPF2_1_Start:
                                        (0099)  LPF2_1_SetPower:
                                        (0100) _LPF2_1_SetPower:
                                        (0101)     RAM_PROLOGUE RAM_USE_CLASS_2
07E0: 21 03    AND   A,0x3              (0102)     and A, bPOWERMASK                        ; mask A to protect unchanged bits
07E2: 4F       MOV   X,SP               (0103)     mov X, SP                                ; define temp store location
                                        (0104) 
07E3: 08       PUSH  A                  (0105)     push A                                   ; put power value in temp store
                                        (0106) 
                                        (0107) IF (LPF2_1_AMD_VAL)
                                        (0108)    M8C_SetBank1
                                        (0109)    mov   A, reg[LPF2_1_AMD_REG]                  ; read modulator register
                                        (0110)    and   A, ~LPF2_1_AMD_MSK                      ; clear modulator bittfield in A
                                        (0111)    or    A, LPF2_1_AMD                           ; combine modulator value with balance of register
                                        (0112)    mov   reg[LPF2_1_AMD_REG], A                  ; move complete value back to register
                                        (0113)    M8C_SetBank0
                                        (0114) ENDIF
                                        (0115) 
07E4: 5D 8B    MOV   A,REG[0x8B]        (0116)     mov A, reg[LPF2_1_FLIN_CR3]    ; read power value
07E6: 21 FC    AND   A,0xFC             (0117)     and A, ~bPOWERMASK                       ; clear power bits in A
07E8: 2B 00    OR    A,[X+0]            (0118)     or  A, [X]                               ; combine power value with balance of reg.
07EA: 60 8B    MOV   REG[0x8B],A        (0119)     mov reg[LPF2_1_FLIN_CR3], A    ; move complete value back to register
                                        (0120) 
07EC: 5D 8F    MOV   A,REG[0x8F]        (0121)     mov A, reg[LPF2_1_FLOUT_CR3]   ; read power value
07EE: 21 FC    AND   A,0xFC             (0122)     and A, ~bPOWERMASK                       ; clear power bits in A
07F0: 2B 00    OR    A,[X+0]            (0123)     or  A, [X]                               ; combine power value with balance of reg.
07F2: 60 8F    MOV   REG[0x8F],A        (0124)     mov reg[LPF2_1_FLOUT_CR3], A   ; move complete value back to register
07F4: 18       POP   A                  (0125)     pop A
07F5: 70 3F    AND   F,0x3F             
07F7: 71 C0    OR    F,0xC0             
                                        (0126)     RAM_EPILOGUE RAM_USE_CLASS_2
07F9: 7F       RET                      (0127)     ret
                                        (0128) 
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: LPF2_1_SetCn, n=1..4
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:   Alters the filter transfer function by modifying the value
                                        (0133) ;                 of the capacitors (defined in LPF2_1.inc)
                                        (0134) ;
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;
                                        (0137) ;  ARGUMENTS:    The A register contains a non-negative integer less than 32
                                        (0138) ;  RETURNS:
                                        (0139) ;  SIDE EFFECTS: 
                                        (0140) ;    The A and X registers may be modified by this or future implementations
                                        (0141) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0142) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0143) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0144) ;    functions.
                                        (0145) ;
                                        (0146) 
                                        (0147)  LPF2_1_SetC1:
                                        (0148) _LPF2_1_SetC1:
                                        (0149)     RAM_PROLOGUE RAM_USE_CLASS_2
07FA: 21 1F    AND   A,0x1F             (0150)     and A, LPF_CNUMMASK                      ; mask A to protect unchanged bits
07FC: 4F       MOV   X,SP               (0151)     mov X, SP                                ; define temp store location
07FD: 08       PUSH  A                  (0152)     push A                                   ; put C1 value in temp store
07FE: 5D 88    MOV   A,REG[0x88]        (0153)     mov A, reg[LPF2_1_FILT_C1_REG] ; read current C1
0800: 21 E0    AND   A,0xE0             (0154)     and A, ~LPF_CNUMMASK                     ; clear C1 bits in A
0802: 2B 00    OR    A,[X+0]            (0155)     or  A, [X]                               ; combine C1 value with balance of reg.
0804: 60 88    MOV   REG[0x88],A        (0156)     mov reg[LPF2_1_FILT_C1_REG], A ; move complete value back to register
0806: 18       POP   A                  (0157)     pop  A
0807: 70 3F    AND   F,0x3F             
0809: 71 C0    OR    F,0xC0             
                                        (0158)     RAM_EPILOGUE RAM_USE_CLASS_2
080B: 7F       RET                      (0159)     ret
                                        (0160) 
                                        (0161)  LPF2_1_SetC2:
                                        (0162) _LPF2_1_SetC2:
                                        (0163)     RAM_PROLOGUE RAM_USE_CLASS_2
080C: 21 1F    AND   A,0x1F             (0164)     and A, LPF_CNUMMASK                      ; mask A to protect unchanged bits
080E: 4F       MOV   X,SP               (0165)     mov X, SP                                ; define temp store location
080F: 08       PUSH  A                  (0166)     push A                                   ; put C2 value in temp store
0810: 5D 89    MOV   A,REG[0x89]        (0167)     mov A, reg[LPF2_1_FILT_C2_REG] ; read current C2
0812: 21 E0    AND   A,0xE0             (0168)     and A, ~LPF_CNUMMASK                     ; clear C2 bits in A
0814: 2B 00    OR    A,[X+0]            (0169)     or  A, [X]                               ; combine C2 value with balance of reg.
0816: 60 89    MOV   REG[0x89],A        (0170)     mov reg[LPF2_1_FILT_C2_REG], A ; move complete value back to register
0818: 18       POP   A                  (0171)     pop A
0819: 70 3F    AND   F,0x3F             
081B: 71 C0    OR    F,0xC0             
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
081D: 7F       RET                      (0173)     ret
                                        (0174) 
                                        (0175)  LPF2_1_SetC3:
                                        (0176) _LPF2_1_SetC3:
                                        (0177)     RAM_PROLOGUE RAM_USE_CLASS_2
081E: 21 1F    AND   A,0x1F             (0178)     and A, LPF_CNUMMASK                      ; mask A to protect unchanged bits
0820: 4F       MOV   X,SP               (0179)     mov X, SP                                ; define temp store location
0821: 08       PUSH  A                  (0180)     push A                                   ; put C3 value in temp store
0822: 5D 8C    MOV   A,REG[0x8C]        (0181)     mov A, reg[LPF2_1_FILT_C3_REG] ; read current C3
0824: 21 E0    AND   A,0xE0             (0182)     and A, ~LPF_CNUMMASK                     ; clear C3 bits in A
0826: 2B 00    OR    A,[X+0]            (0183)     or  A, [X]                               ; combine C3 value with balance of reg.
0828: 60 8C    MOV   REG[0x8C],A        (0184)     mov reg[LPF2_1_FILT_C3_REG], A ; move complete value back to register
082A: 18       POP   A                  (0185)     pop A
082B: 70 3F    AND   F,0x3F             
082D: 71 C0    OR    F,0xC0             
                                        (0186)     RAM_EPILOGUE RAM_USE_CLASS_2
082F: 7F       RET                      (0187)     ret
                                        (0188) 
                                        (0189)  LPF2_1_SetC4:
                                        (0190) _LPF2_1_SetC4:
                                        (0191)     RAM_PROLOGUE RAM_USE_CLASS_2
0830: 21 1F    AND   A,0x1F             (0192)     and A, LPF_CNUMMASK                      ; mask A to protect unchanged bits
0832: 4F       MOV   X,SP               (0193)     mov X, SP                                ; define temp store location
0833: 08       PUSH  A                  (0194)     push A                                   ; put C4 value in temp store
0834: 5D 8E    MOV   A,REG[0x8E]        (0195)     mov A, reg[LPF2_1_FILT_C4_REG] ; read current C4
0836: 21 E0    AND   A,0xE0             (0196)     and A, ~LPF_CNUMMASK                     ; clear C4 bits in A
0838: 2B 00    OR    A,[X+0]            (0197)     or  A, [X]                               ; combine C4 value with balance of reg.
083A: 60 8E    MOV   REG[0x8E],A        (0198)     mov reg[LPF2_1_FILT_C4_REG], A ; move complete value back to register
083C: 18       POP   A                  (0199)     pop A
083D: 70 3F    AND   F,0x3F             
083F: 71 C0    OR    F,0xC0             
                                        (0200)     RAM_EPILOGUE RAM_USE_CLASS_2
0841: 7F       RET                      (0201)     ret
                                        (0202) 
                                        (0203) 
                                        (0204) ;-----------------------------------------------------------------------------
                                        (0205) ;  FUNCTION NAME: LPF2_1_SetCA
                                        (0206) ;            and  LPF2_1_SetCB
                                        (0207) ;
                                        (0208) ;  DESCRIPTION:   Alters the filter transfer function by modifying the value
                                        (0209) ;                 of the op-amp feedback capacitors (see LPF2_1.inc)
                                        (0210) ;-----------------------------------------------------------------------------
                                        (0211) ;
                                        (0212) ;  ARGUMENTS:    The A register contains one of the LPF2_1_FEEDBACK
                                        (0213) ;                  constants defined in LPF2_1.inc
                                        (0214) ;  RETURNS:      Nothing.
                                        (0215) ;  SIDE EFFECTS: 
                                        (0216) ;    The A and X registers may be modified by this or future implementations
                                        (0217) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0218) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0219) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0220) ;    functions.
                                        (0221) ;
                                        (0222) 
                                        (0223)  LPF2_1_SetCA:
                                        (0224) _LPF2_1_SetCA:
                                        (0225)     RAM_PROLOGUE RAM_USE_CLASS_1
0842: 39 01    CMP   A,0x1              (0226)     cmp   A, LPF2_1_FEEDBACK_32    ; Change Feedback to 32 units?
0844: A0 05    JZ    0x084A             (0227)     jz    .SetCAto32                         ;    Yes, go make it so
                                        (0228)                                              ;     No, clear it to 16 units...
0846: 41 88 7F AND   REG[0x88],0x7F     (0229)     and   reg[LPF2_1_FILT_CA_REG], ~LPF_CFBMASK
                                        (0230)     RAM_EPILOGUE RAM_USE_CLASS_1 
0849: 7F       RET                      (0231)     ret
                                        (0232) .SetCAto32:
084A: 43 88 80 OR    REG[0x88],0x80     (0233)     or    reg[LPF2_1_FILT_CA_REG],  LPF_CFBMASK
                                        (0234)     RAM_EPILOGUE RAM_USE_CLASS_1
084D: 7F       RET                      (0235)     ret
                                        (0236) 
                                        (0237) 
                                        (0238)  LPF2_1_SetCB:
                                        (0239) _LPF2_1_SetCB:
                                        (0240)     RAM_PROLOGUE RAM_USE_CLASS_1
084E: 39 01    CMP   A,0x1              (0241)     cmp   A, LPF2_1_FEEDBACK_32    ; Change Feedback to 32 units?
0850: A0 05    JZ    0x0856             (0242)     jz    .SetCAto32                         ;    Yes, go make it so
                                        (0243)                                              ;     No, clear it to 16 units...
0852: 41 8C 7F AND   REG[0x8C],0x7F     (0244)     and   reg[LPF2_1_FILT_CB_REG], ~LPF_CFBMASK
                                        (0245)     RAM_EPILOGUE RAM_USE_CLASS_1
0855: 7F       RET                      (0246)     ret
                                        (0247) .SetCAto32:
0856: 43 8C 80 OR    REG[0x8C],0x80     (0248)     or    reg[LPF2_1_FILT_CB_REG],  LPF_CFBMASK
                                        (0249)     RAM_EPILOGUE RAM_USE_CLASS_1
0859: 7F       RET                      (0250)     ret
                                        (0251) 
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;  FUNCTION NAME: LPF2_1_SetPolarity
                                        (0254) ;
                                        (0255) ;  DESCRIPTION:   Alters the output polarity of the data by altering the
                                        (0256) ;                 input polarity at FLIN
                                        (0257) ;-----------------------------------------------------------------------------
                                        (0258) ;
                                        (0259) ;  ARGUMENTS:    The A register contains one of the LPF2_1_POLARITY
                                        (0260) ;                  constants defined in LPF2_1.inc
                                        (0261) ;  RETURNS:      Nothing.
                                        (0262) ;  SIDE EFFECTS: 
                                        (0263) ;    The A and X registers may be modified by this or future implementations
                                        (0264) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0265) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0266) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0267) ;    functions.
                                        (0268) ;
                                        (0269) 
                                        (0270)  LPF2_1_SetPolarity:
                                        (0271) _LPF2_1_SetPolarity:
                                        (0272)     RAM_PROLOGUE RAM_USE_CLASS_1
085A: 39 01    CMP   A,0x1              (0273)     cmp   A, LPF2_1_POLARITY_NON_INVERTING ; Should the output be non-inverting?
085C: A0 05    JZ    0x0862             (0274)     jz    .SetPoltoNonInv                         ;    Yes, go make it so
                                        (0275)                                                   ;    No, then set it to Inverting...
085E: 43 88 20 OR    REG[0x88],0x20     (0276)     or    reg[LPF2_1_FLIN_CR0], LPF_POLARITYMASK
                                        (0277)     RAM_EPILOGUE RAM_USE_CLASS_1
0861: 7F       RET                      (0278)     ret
                                        (0279) .SetPoltoNonInv:
0862: 41 88 DF AND   REG[0x88],0xDF     (0280)     and   reg[LPF2_1_FLIN_CR0], ~LPF_POLARITYMASK
                                        (0281)     RAM_EPILOGUE RAM_USE_CLASS_1
0865: 7F       RET                      (0282)     ret
                                        (0283) 
                                        (0284) ;-----------------------------------------------------------------------------
                                        (0285) ;  FUNCTION NAME: LPF2_1_Stop
                                        (0286) ;
                                        (0287) ;  DESCRIPTION: Cuts power to the user module.
                                        (0288) ;
                                        (0289) ;-----------------------------------------------------------------------------
                                        (0290) ;
                                        (0291) ;  ARGUMENTS:     None
                                        (0292) ;  RETURNS:       Nothing
                                        (0293) ;  SIDE EFFECTS: 
                                        (0294) ;    The A and X registers may be modified by this or future implementations
                                        (0295) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0296) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0297) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0298) ;    functions.
                                        (0299) ;
                                        (0300)  LPF2_1_Stop:
                                        (0301) _LPF2_1_Stop:
                                        (0302) 
                                        (0303)     RAM_PROLOGUE RAM_USE_CLASS_1
0866: 41 8B FC AND   REG[0x8B],0xFC     (0304)     and reg[LPF2_1_FLIN_CR3],  ~bPOWERMASK
0869: 41 8F FC AND   REG[0x8F],0xFC     (0305)     and reg[LPF2_1_FLOUT_CR3], ~bPOWERMASK
                                        (0306)     RAM_EPILOGUE RAM_USE_CLASS_1
086C: 7F       RET                      (0307)     ret
                                        (0308) 
                                        (0309) 
                                        (0310) ; End of File LPF2_1.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2014/7/14 at 8:14:13
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
086D: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
086E: 10       PUSH  X                  (0209)     push  X
086F: 28       ROMX                     (0210)     romx                               ; Get character from ROM
0870: B0 04    JNZ   0x0875             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
0872: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
0873: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
0874: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
0875: 90 44    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
0877: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
0878: 18       POP   A                  (0220)     pop   A
0879: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
087A: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
087C: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
087D: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
088F: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
0890: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
0891: 67       ASR   A                  (0262)     asr   A
0892: 67       ASR   A                  (0263)     asr   A
0893: 67       ASR   A                  (0264)     asr   A
0894: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
0896: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
0898: 90 21    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
089A: 18       POP   A                  (0268)     pop   A                            ; Restore value
089B: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
089D: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
089F: 90 1A    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
08A1: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
08A2: 4B       SWAP  A,X                (0305)     swap  A,X
08A3: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
08A5: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
08A6: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
08A8: 7F       RET                      (0310)     ret
08A9: 70 BF    AND   F,0xBF             
08AB: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
08AD: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
08AF: A0 06    JZ    0x08B6             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
08B1: 90 08    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
08B3: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
08B4: 8F F8    JMP   0x08AD             (0351)     jmp   .Loop_PrString               ; Go get next character
08B6: 70 3F    AND   F,0x3F             
08B8: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
08BA: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
08BB: 90 65    CALL  0x0922             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
08BD: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
08BE: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
08BF: 67       ASR   A                  (0390)     asr   A
08C0: 67       ASR   A                  (0391)     asr   A
08C1: 67       ASR   A                  (0392)     asr   A
08C2: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
08C4: 90 3B    CALL  0x0901             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
08C6: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
08C7: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
08C9: 40       NOP                      (0397)     nop
08CA: 40       NOP                      (0398)     nop
08CB: 40       NOP                      (0399)     nop
08CC: 90 33    CALL  0x0901             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
08CE: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
08CF: 90 51    CALL  0x0922             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
08D1: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
08D2: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
08D3: 67       ASR   A                  (0436)     asr   A
08D4: 67       ASR   A                  (0437)     asr   A
08D5: 67       ASR   A                  (0438)     asr   A
08D6: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
08D8: 90 09    CALL  0x08E3             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
08DA: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
08DB: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
08DD: 40       NOP                      (0443)     nop
08DE: 40       NOP                      (0444)     nop
08DF: 40       NOP                      (0445)     nop
08E0: 90 01    CALL  0x08E3             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
08E2: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
08E3: 08       PUSH  A                  (0477)     push  A
08E4: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
08E7: 26 00 80 AND   [0x0],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
08EA: 51 00    MOV   A,[0x0]            (0480)     mov   A,[Port_2_Data_SHADE]
08EC: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
08EE: 18       POP   A                  (0483)     pop   A
08EF: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
08F1: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
08F3: 2A 00    OR    A,[0x0]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
08F5: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
08F7: 53 00    MOV   [0x0],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
08F9: 40       NOP                      (0489)     nop
08FA: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
08FC: 53 00    MOV   [0x0],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
08FE: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
0900: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0901: 08       PUSH  A                  (0523)     push  A
0902: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
0905: 26 00 80 AND   [0x0],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0908: 2E 00 20 OR    [0x0],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
090B: 51 00    MOV   A,[0x0]            (0527)     mov   A,[Port_2_Data_SHADE]
090D: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
090F: 18       POP   A                  (0530)     pop   A
0910: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
0912: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
0914: 2A 00    OR    A,[0x0]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
0916: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
0918: 53 00    MOV   [0x0],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
091A: 40       NOP                      (0536)     NOP
091B: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
091D: 53 00    MOV   [0x0],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
091F: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
0921: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
0922: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
0923: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
0926: 26 00 80 AND   [0x0],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
0929: 51 00    MOV   A,[0x0]            (0574)     mov   A,[Port_2_Data_SHADE]
092B: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
092D: 26 01 F0 AND   [0x1],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
0930: 51 01    MOV   A,[0x1]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
0932: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
0934: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
0936: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
0938: 2E 00 40 OR    [0x0],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
093B: 51 00    MOV   A,[0x0]            (0584)     mov   A,[Port_2_Data_SHADE]
093D: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
093F: 40       NOP                      (0586)     NOP
                                        (0587) 
0940: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0941: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0943: 2E 00 50 OR    [0x0],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
0946: 51 00    MOV   A,[0x0]            (0593)     mov   A,[Port_2_Data_SHADE]
0948: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
094A: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
094B: 40       NOP                      (0597)     nop
094C: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
094E: 08       PUSH  A                  (0610)     push  A
094F: 26 00 C0 AND   [0x0],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0952: 51 00    MOV   A,[0x0]            (0612)     mov   A,[Port_2_Data_SHADE]
0954: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
0956: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
0957: 40       NOP                      (0616)     nop                                    ; fastest PSoC
0958: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
0959: 2E 00 50 OR    [0x0],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
095C: 51 00    MOV   A,[0x0]            (0620)     mov   A,[Port_2_Data_SHADE]
095E: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
0960: 40       NOP                      (0623)     nop
0961: 40       NOP                      (0624)     nop
                                        (0625) 
0962: 26 00 C0 AND   [0x0],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0965: 51 00    MOV   A,[0x0]            (0627)     mov   A,[Port_2_Data_SHADE]
0967: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
0969: 18       POP   A                  (0630)     pop   A
096A: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
096C: A0 04    JZ    0x0971             (0633)     jz    .UNLOCK
096E: 79       DEC   X                  (0634)     dec   X
096F: BF D3    JNZ   0x0943             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0971: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0972: 2E 01 7F OR    [0x1],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
0975: 51 01    MOV   A,[0x1]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
0977: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
0979: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
097B: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
097D: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
097E: 7F       RET                      (0646)     ret
097F: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0982: 26 01 80 AND   [0x1],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
0985: 2E 01 7F OR    [0x1],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
0988: 26 02 80 AND   [0x2],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
098B: 51 01    MOV   A,[0x1]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
098D: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
098F: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
0991: 51 02    MOV   A,[0x2]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
0993: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
0995: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
0997: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0999: 90 67    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
099B: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
099D: 90 63    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
099F: 50 03    MOV   A,0x3              (0701)     mov   A,03h
09A1: 9F 40    CALL  0x08E3             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
09A3: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
09A5: 90 5B    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
09A7: 50 03    MOV   A,0x3              (0707)     mov   A,03h
09A9: 9F 38    CALL  0x08E3             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
09AB: 90 63    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
09AD: 90 61    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
09AF: 90 5F    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
09B1: 50 03    MOV   A,0x3              (0714)     mov   A,03h
09B3: 9F 2E    CALL  0x08E3             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
09B5: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
09B7: 90 49    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
09B9: 50 02    MOV   A,0x2              (0720)     mov   A,02h
09BB: 9F 26    CALL  0x08E3             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
09BD: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
09BF: 90 41    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
09C1: 50 08    MOV   A,0x8              (0726)     mov   A,08h
09C3: 9F 0A    CALL  _LCD_Control       (0727)     call  LCD_Control
09C5: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
09C7: 90 39    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
09C9: 50 01    MOV   A,0x1              (0731)     mov   A,01h
09CB: 9F 02    CALL  _LCD_Control       (0732)     call  LCD_Control
09CD: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
09CF: 90 31    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
09D1: 50 06    MOV   A,0x6              (0736)     mov   A,06h
09D3: 9E FA    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
09D5: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
09D7: 9E F6    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
09D9: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
09DB: 9E F2    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
09DD: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
09DF: 9E EE    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
09E1: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
09E3: 9E EA    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
09E5: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
09E7: 9E E6    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
09E9: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
09EB: 90 15    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
09ED: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
09F2: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
09F4: 10       PUSH  X                  (0791)     push  X                            ; Store COL
09F5: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
09F7: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
09F8: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
09FA: 20       POP   X                  (0795)     pop   X
                                        (0796) 
09FB: 9E D2    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
09FD: 70 3F    AND   F,0x3F             
09FF: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0A01: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0A02: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0A04: 78       DEC   A                  (0828)     dec   A
0A05: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0A07: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0A10: 08       PUSH  A                  (0871)     push  A
0A11: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0A13: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0A15: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0A17: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0A19: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
0A1B: D0 06    JNC   0x0A22             (0877)     jnc   .Delay50u_End
0A1D: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0A1F: 78       DEC   A                  (0880)     dec   A                              ; [4]
0A20: BF FE    JNZ   0x0A1F             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0A22: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0A23: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_Control                  ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_WriteData                ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_Control                  ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_WriteData                ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_Control                  ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_DISP_ON
                                        (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\dualadcint.asm                (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   DUALADCINT.asm
                                        (0004) ;;  Version: 2.30, Updated on 2014/7/14 at 8:13:37
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DualADC Interrupt Service Routines.
                                        (0008) ;;
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "DUALADC.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export _DUALADC_CNT1_ISR
                                        (0022) export _DUALADC_CNT2_ISR
                                        (0023) export _DUALADC_PWM16_ISR
                                        (0024) 
                                        (0025) export  DUALADC_cCounter1U
                                        (0026) export  DUALADC_cCounter2U
                                        (0027) export _DUALADC_iResult1
                                        (0028) export  DUALADC_iResult1
                                        (0029) export _DUALADC_iResult2
                                        (0030) export  DUALADC_iResult2
                                        (0031) export _DUALADC_bfStatus
                                        (0032) export  DUALADC_bfStatus
                                        (0033) export  DUALADC_bSampC
                                        (0034) 
                                        (0035) 
                                        (0036) ;-----------------------------------------------
                                        (0037) ; Variable Allocation
                                        (0038) ;-----------------------------------------------
                                        (0039) AREA InterruptRAM(RAM, REL, CON)
                                        (0040) 
                                        (0041)  DUALADC_cCounter1U:     BLK   1  ;The Upper byte of the Counter
                                        (0042)  DUALADC_cCounter2U:     BLK   1  ;The Upper byte of the Counter
                                        (0043) _DUALADC_iResult1:
                                        (0044)  DUALADC_iResult1:       BLK   2  ;A/D value
                                        (0045) _DUALADC_iResult2:
                                        (0046)  DUALADC_iResult2:       BLK   2  ;A/D value
                                        (0047) _DUALADC_bfStatus:
                                        (0048)  DUALADC_bfStatus:       BLK   1  ;Data Valid Flag
                                        (0049)  DUALADC_bSampC:         BLK   1  ;# of times to run A/D
                                        (0050) 
                                        (0051) 
                                        (0052) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0053) ;---------------------------------------------------
                                        (0054) ; Insert your custom declarations below this banner
                                        (0055) ;---------------------------------------------------
                                        (0056) 
                                        (0057) ;------------------------
                                        (0058) ; Includes
                                        (0059) ;------------------------
                                        (0060) 
                                        (0061) 	
                                        (0062) ;------------------------
                                        (0063) ;  Constant Definitions
                                        (0064) ;------------------------
                                        (0065) 
                                        (0066) 
                                        (0067) ;------------------------
                                        (0068) ; Variable Allocation
                                        (0069) ;------------------------
                                        (0070) 
                                        (0071) 
                                        (0072) ;---------------------------------------------------
                                        (0073) ; Insert your custom declarations above this banner
                                        (0074) ;---------------------------------------------------
                                        (0075) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0076) 
                                        (0077) 
                                        (0078) ;-----------------------------------------------
                                        (0079) ;  EQUATES and TABLES
                                        (0080) ;-----------------------------------------------
                                        (0081) ; Constant Definitions
                                        (0082) LowByte:   equ 1
                                        (0083) HighByte:  equ 0
                                        (0084) 
                                        (0085) 
                                        (0086) AREA UserModules (ROM, REL)
                                        (0087) 
                                        (0088) 
                                        (0089) .LITERAL
                                        (0090) DUALADCMaxNegX4Table:
                                        (0091) ; Bits  7    8    9   10   11   12   13
                                        (0092)    DB  FFh, FEh, FCh, F8h, F0h, E0h, C0h
                                        (0093) 
                                        (0094) DUALADCMaxPosX4Table:
                                        (0095) IF (DUALADC_DATA_FORMAT)
                                        (0096) ; Bits (signed)    7    8    9   10   11   12   13
                                        (0097)               DB  01h, 02h, 04h, 08h, 10h, 20h, 40h
                                        (0098) ELSE
                                        (0099) ; Bits (unsigned)  7    8    9   10   11   12   13
                                        (0100)               DB  02h, 04h, 08h, 10h, 20h, 40h, 80h
                                        (0101) 
                                        (0102) ENDIF
                                        (0103) .ENDLITERAL
                                        (0104) 
                                        (0105) 
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) ;  FUNCTION NAME: _DUALADC_CNT1_ISR (Counter8 Interrupt)
                                        (0108) ;
                                        (0109) ;
                                        (0110) ;  DESCRIPTION:
                                        (0111) ;    Increment the upper (software) half on the counter whenever the
                                        (0112) ;    lower (hardware) half of the counter underflows.  This counter
                                        (0113) ;    should start out at the most negative value (0xFF).
                                        (0114) ;
                                        (0115) ;-----------------------------------------------------------------------------
                                        (0116) ;
                                        (0117) _DUALADC_CNT1_ISR:
0A32: 76 03    INC   [0x3]              (0118)    inc [DUALADC_cCounter1U]
                                        (0119)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0120)    ;---------------------------------------------------
                                        (0121)    ; Insert your custom assembly code below this banner
                                        (0122)    ;---------------------------------------------------
                                        (0123)    ;   NOTE: interrupt service routines must preserve
                                        (0124)    ;   the values of the A and X CPU registers.
                                        (0125)    
                                        (0126)    ;---------------------------------------------------
                                        (0127)    ; Insert your custom assembly code above this banner
                                        (0128)    ;---------------------------------------------------
                                        (0129)    
                                        (0130)    ;---------------------------------------------------
                                        (0131)    ; Insert a lcall to a C function below this banner
                                        (0132)    ; and un-comment the lines between these banners
                                        (0133)    ;---------------------------------------------------
                                        (0134)    
                                        (0135)    ;PRESERVE_CPU_CONTEXT
                                        (0136)    ;lcall _My_C_Function
                                        (0137)    ;RESTORE_CPU_CONTEXT
                                        (0138)    
                                        (0139)    ;---------------------------------------------------
                                        (0140)    ; Insert a lcall to a C function above this banner
                                        (0141)    ; and un-comment the lines between these banners
                                        (0142)    ;---------------------------------------------------
                                        (0143)    ;@PSoC_UserCode_END@ (Do not change this line.)
0A34: 7E       RETI                     (0144)    reti
                                        (0145) 
                                        (0146) 
                                        (0147) ;-----------------------------------------------------------------------------
                                        (0148) ;  FUNCTION NAME: _DUALADC_CNT2_ISR (Counter8 Interrupt)
                                        (0149) ;
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;  Increment the upper (software) half on the counter whenever the
                                        (0153) ;  lower (hardware) half of the counter underflows.  This counter
                                        (0154) ;  should start out at the most negative value (0xFF).
                                        (0155) ;
                                        (0156) ;-----------------------------------------------------------------------------
                                        (0157) ;
                                        (0158) _DUALADC_CNT2_ISR:
0A35: 76 04    INC   [0x4]              (0159)    inc [DUALADC_cCounter2U]
                                        (0160)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0161)    ;---------------------------------------------------
                                        (0162)    ; Insert your custom assembly code below this banner
                                        (0163)    ;---------------------------------------------------
                                        (0164)    ;   NOTE: interrupt service routines must preserve
                                        (0165)    ;   the values of the A and X CPU registers.
                                        (0166)    
                                        (0167)    ;---------------------------------------------------
                                        (0168)    ; Insert your custom assembly code above this banner
                                        (0169)    ;---------------------------------------------------
                                        (0170)    
                                        (0171)    ;---------------------------------------------------
                                        (0172)    ; Insert a lcall to a C function below this banner
                                        (0173)    ; and un-comment the lines between these banners
                                        (0174)    ;---------------------------------------------------
                                        (0175)    
                                        (0176)    ;PRESERVE_CPU_CONTEXT
                                        (0177)    ;lcall _My_C_Function
                                        (0178)    ;RESTORE_CPU_CONTEXT
                                        (0179)    
                                        (0180)    ;---------------------------------------------------
                                        (0181)    ; Insert a lcall to a C function above this banner
                                        (0182)    ; and un-comment the lines between these banners
                                        (0183)    ;---------------------------------------------------
                                        (0184)    ;@PSoC_UserCode_END@ (Do not change this line.)
0A37: 7E       RETI                     (0185)    reti
                                        (0186) 
                                        (0187) 
                                        (0188) ;-----------------------------------------------------------------------------
                                        (0189) ;  FUNCTION NAME: _DUALADC_PWM16_ISR  (PWM16 Interrupt)
                                        (0190) ;
                                        (0191) ;  DESCRIPTION:
                                        (0192) ;  This ISR is called when the ADC has completed and integrate cycle.
                                        (0193) ;  The ADC value is calculated and stored in a global location before
                                        (0194) ;  the end of the ISR.
                                        (0195) ;
                                        (0196) ;-----------------------------------------------------------------------------
                                        (0197) ;
                                        (0198) _DUALADC_PWM16_ISR:
0A38: 41 33 FE AND   REG[0x33],0xFE     (0199)    and   reg[DUALADC_bCounter1_CR0], ~DUALADC_fDBLK_ENABLE ; Disable Counter
0A3B: 41 37 FE AND   REG[0x37],0xFE     (0200)    and   reg[DUALADC_bCounter2_CR0], ~DUALADC_fDBLK_ENABLE ; Disable Counter
                                        (0201) IF DUALADC_NoAZ
0A3E: 43 92 20 OR    REG[0x92],0x20     (0202)    or    reg[DUALADC_bfADC1cr2], DUALADC_fAutoZero         ; Put Integrator in AutoZero
0A41: 43 9A 20 OR    REG[0x9A],0x20     (0203)    or    reg[DUALADC_bfADC2cr2], DUALADC_fAutoZero         ; Put Integrator in AutoZero
                                        (0204) ENDIF
0A44: 43 93 10 OR    REG[0x93],0x10     (0205)    or   reg[DUALADC_bfADC1cr3],DUALADC_fFSW0               ; Put Integrator in reset
0A47: 43 9B 10 OR    REG[0x9B],0x10     (0206)    or   reg[DUALADC_bfADC2cr3],DUALADC_fFSW0               ; Put Integrator in reset
0A4A: 71 01    OR    F,0x1              
                                        (0207) 
                                        (0208)                                                            ; Enable interrupts for a short period of time just in case.
                                        (0209)                                                            ; Make sure we didn't have a counter interrupt ready to fire
                                        (0210)    M8C_EnableGInt
0A4C: 40       NOP                      (0211)    nop                                                     ; Wait a couple cycles
0A4D: 70 FE    AND   F,0xFE             
                                        (0212)    M8C_DisableGInt                                         ; Disable interrupt, read to complete processing
0A4F: 08       PUSH  A                  (0213)    push  A                                                 ; Save the Accumulator
                                        (0214) 
                                        (0215) 
                                        (0216)    ; Get ADC1 result
0A50: 5D 30    MOV   A,REG[0x30]        (0217)    mov   A,reg[DUALADC_bCount1]                            ; Read counter value  (Bogus read puts value in Period register)
0A52: 5D 32    MOV   A,REG[0x32]        (0218)    mov   A,reg[DUALADC_bCompare1]                          ; Read counter value
0A54: 78       DEC   A                  (0219)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
0A55: 73       CPL   A                  (0220)    cpl   A                                                 ; Invert the value
0A56: D0 03    JNC   0x0A5A             (0221)    jnc   DUALADC_INT_CALCV1                                ; if carry, then inc MSB as well
0A58: 76 03    INC   [0x3]              (0222)    inc   [DUALADC_cCounter1U]
                                        (0223) DUALADC_INT_CALCV1:
0A5A: 53 06    MOV   [0x6],A            (0224)    mov   [(DUALADC_iResult1 + LowByte)],A                  ; Store LSB value
0A5C: 51 03    MOV   A,[0x3]            (0225)    mov   A, [DUALADC_cCounter1U]                           ; Store MSB from temp counter
0A5E: 53 05    MOV   [0x5],A            (0226)    mov   [(DUALADC_iResult1 + HighByte)],A
                                        (0227) 
                                        (0228)    ; Get ADC2 result
0A60: 5D 34    MOV   A,REG[0x34]        (0229)    mov   A,reg[DUALADC_bCount2]                            ; Read counter value  (Bogus read puts value in Period register)
0A62: 5D 36    MOV   A,REG[0x36]        (0230)    mov   A,reg[DUALADC_bCompare2]                          ; Read counter value
0A64: 78       DEC   A                  (0231)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
0A65: 73       CPL   A                  (0232)    cpl   A                                                 ; Invert the value
0A66: D0 03    JNC   0x0A6A             (0233)    jnc   DUALADC_INT_CALCV2                                ; if carry, then inc MSB as well
0A68: 76 04    INC   [0x4]              (0234)    inc   [DUALADC_cCounter2U]
                                        (0235) DUALADC_INT_CALCV2:
0A6A: 53 08    MOV   [0x8],A            (0236)    mov   [(DUALADC_iResult2 + LowByte)],A                  ; Store LSB value
0A6C: 51 04    MOV   A,[0x4]            (0237)    mov   A, [DUALADC_cCounter2U]                           ; Store MSB from temp counter
0A6E: 53 07    MOV   [0x7],A            (0238)    mov   [(DUALADC_iResult2 + HighByte)],A
                                        (0239) 
                                        (0240)                                                            ; The new value has been stored,
                                        (0241)                                                            ; so get counters ready for next reading first.
0A70: 62 31 FF MOV   REG[0x31],0xFF     (0242)    mov   reg[DUALADC_bPeriod1], ffh                        ; Initialize counter1 to FF - Set to overflow after 256 counts
0A73: 62 35 FF MOV   REG[0x35],0xFF     (0243)    mov   reg[DUALADC_bPeriod2], ffh                        ; Initialize counter2 to FF - Set to overflow after 256 counts
0A76: 43 33 01 OR    REG[0x33],0x1      (0244)    or    reg[DUALADC_bCounter1_CR0],DUALADC_fDBLK_ENABLE   ; Enable Counter1
0A79: 43 37 01 OR    REG[0x37],0x1      (0245)    or    reg[DUALADC_bCounter2_CR0],DUALADC_fDBLK_ENABLE   ; Enable Counter2
                                        (0246) 
                                        (0247) 
                                        (0248) IF (DUALADC_DATA_FORMAT)                                   ; Only check for Negative numbers if SIGNED result
                                        (0249)    mov   A, [DUALADC_bfStatus]                             ; Get Status with Resolution
                                        (0250)    and   A, DUALADC_bRES_MASK                              ; Mask of resolution
                                        (0251)    index DUALADCMaxNegX4Table                              ; Get Maximum negative value from table
                                        (0252)    mov   [DUALADC_cCounter1U], A                           ; Place result back into MSB of counter
                                        (0253)    mov   [DUALADC_cCounter2U], A                           ; Place result back into MSB of counter
                                        (0254) ELSE
0A7C: 55 03 00 MOV   [0x3],0x0          (0255)    mov   [DUALADC_cCounter1U], 00h                         ; Place result back into MSB of counter
0A7F: 55 04 00 MOV   [0x4],0x0          (0256)    mov   [DUALADC_cCounter2U], 00h                         ; Place result back into MSB of counter
                                        (0257) ENDIF
                                        (0258) 
                                        (0259)    ;@PSoC_UserCode_BODY_3@ (Do not change this line.)
                                        (0260)    ;---------------------------------------------------
                                        (0261)    ; If the input is muxed with multiple inputs
                                        (0262)    ; this is a good place to change inputs.
                                        (0263)    ; Insert your custom code below this banner
                                        (0264)    ;---------------------------------------------------
                                        (0265)    ;   NOTE: interrupt service routines must preserve
                                        (0266)    ;   the values of the A and X CPU registers. At this
                                        (0267)    ;   point A has been preserved on the stack and will
                                        (0268)    ;   be restored before the return from interrupt.
                                        (0269)    ;   However, if you use the X register, you must
                                        (0270)    ;   preserve its value and restore it here.
                                        (0271) 
                                        (0272) 
                                        (0273)    ;---------------------------------------------------
                                        (0274)    ; Insert your custom code above this banner
                                        (0275)    ;---------------------------------------------------
                                        (0276)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0277) 
0A82: 41 93 EF AND   REG[0x93],0xEF     (0278)    and   reg[DUALADC_bfADC1cr3],~DUALADC_fFSW0             ; Take Integrator out of reset
0A85: 41 9B EF AND   REG[0x9B],0xEF     (0279)    and   reg[DUALADC_bfADC2cr3],~DUALADC_fFSW0             ; Take Integrator out of reset
                                        (0280) IF DUALADC_NoAZ
0A88: 41 92 DF AND   REG[0x92],0xDF     (0281)    and   reg[DUALADC_bfADC1cr2],~DUALADC_fAutoZero         ; Take Integrator out of AutoZero
0A8B: 41 9A DF AND   REG[0x9A],0xDF     (0282)    and   reg[DUALADC_bfADC2cr2],~DUALADC_fAutoZero         ; Take Integrator out of AutoZero
                                        (0283) ENDIF
                                        (0284) 
                                        (0285) 
                                        (0286)    ;****************************************************************************
                                        (0287)    ;M8C_EnableGInt            ; May want to re-enable interrupts at this point,
                                        (0288)    ;                          ; if stack space isn't at a premium.
                                        (0289)    ; NOTE:  this will make system more responsive but, will increase the
                                        (0290)    ;        overall processing time of the A/D calctime.  If an interrupt is
                                        (0291)    ;        taken, it must return within the specified CalcTime to guarantee
                                        (0292)    ;        successful acquisition of the next byte.
                                        (0293)    ;****************************************************************************
                                        (0294) 
                                        (0295) ; ADC1
                                        (0296) IF (DUALADC_DATA_FORMAT)                         ; Only check for Negative numbers if SIGNED result
                                        (0297)                                                  ; Negative Overflow Check
                                        (0298)    tst   [(DUALADC_iResult1 + HighByte)],80h
                                        (0299)    jnz   DUALADC_NOT_2POVFL1
                                        (0300) 
                                        (0301) ENDIF
                                        (0302)                                                  ; Postive Overflow Check
                                        (0303)                                                  ; Get MSB of Max Positive value x4 + 1
0A8E: 51 09    MOV   A,[0x9]            (0304)    mov   A,[DUALADC_bfStatus]                    ; Get Status with Resolution
0A90: 21 0F    AND   A,0xF              (0305)    and   A,DUALADC_bRES_MASK                     ; Mask of resolution normalized to 0
0A92: FF 97    INDEX 0x0A2B             (0306)    index DUALADCMaxPosX4Table                    ; Get Maximum positive value x4 + 1 from table
0A94: 08       PUSH  A                  (0307)    push  A
0A95: 22 05    AND   A,[0x5]            (0308)    and   A, [(DUALADC_iResult1 + HighByte)]
0A97: A0 0B    JZ    0x0AA3             (0309)    jz    DUALADC_NOT_POVFL1
                                        (0310)                                                  ; Positive overflow, fix it - set to Max Positive + 1
0A99: 18       POP   A                  (0311)    pop   A
0A9A: 11 01    SUB   A,0x1              (0312)    sub   A, 01h
                                        (0313)                                                  ; Force most positive * 4 into result
0A9C: 53 05    MOV   [0x5],A            (0314)    mov   [(DUALADC_iResult1 + HighByte)], A
0A9E: 55 06 FF MOV   [0x6],0xFF         (0315)    mov   [(DUALADC_iResult1 + LowByte)], ffh
0AA1: 80 02    JMP   0x0AA4             (0316)    jmp   DUALADC_NOT_2POVFL1
                                        (0317) DUALADC_NOT_POVFL1:
0AA3: 18       POP   A                  (0318)    pop   A
                                        (0319) 
                                        (0320) DUALADC_NOT_2POVFL1:
0AA4: 68 05    ASR   [0x5]              (0321)    asr   [(DUALADC_iResult1 + HighByte)]         ; Shift MSB and LSB right twice to divide by four
0AA6: 6E 06    RRC   [0x6]              (0322)    rrc   [(DUALADC_iResult1 + LowByte)]          ; Remember digital clock 4 times analog clock
0AA8: 68 05    ASR   [0x5]              (0323)    asr   [(DUALADC_iResult1 + HighByte)]
0AAA: 6E 06    RRC   [0x6]              (0324)    rrc   [(DUALADC_iResult1 + LowByte)]
                                        (0325) 
                                        (0326) ; ADC2
                                        (0327) IF (DUALADC_DATA_FORMAT)                         ; Only check for Negative numbers if SIGNED result
                                        (0328)                                                  ; Negative Overflow Check
                                        (0329)    tst   [(DUALADC_iResult2 + HighByte)],80h
                                        (0330)    jnz   DUALADC_NOT_2POVFL2
                                        (0331) 
                                        (0332) ENDIF
                                        (0333)                                                  ; Postive Overflow Check
                                        (0334)                                                  ; Get MSB of Max Positive value x4 + 1
0AAC: 51 09    MOV   A,[0x9]            (0335)    mov   A,[DUALADC_bfStatus]                    ; Get Status with Resolution
0AAE: 21 0F    AND   A,0xF              (0336)    and   A,DUALADC_bRES_MASK                     ; Mask of resolution normalized to 0
0AB0: FF 79    INDEX 0x0A2B             (0337)    index DUALADCMaxPosX4Table                    ; Get Maximum positive value x4 + 1 from table
0AB2: 08       PUSH  A                  (0338)    push  A
0AB3: 22 07    AND   A,[0x7]            (0339)    and   A, [(DUALADC_iResult2 + HighByte)]
0AB5: A0 0B    JZ    0x0AC1             (0340)    jz    DUALADC_NOT_POVFL2
                                        (0341)                                                  ; Positive overflow, fix it - set to Max Positive + 1
0AB7: 18       POP   A                  (0342)    pop   A
0AB8: 11 01    SUB   A,0x1              (0343)    sub   A, 01h
                                        (0344)                                                  ; Force most positive * 4 into result
0ABA: 53 07    MOV   [0x7],A            (0345)    mov   [(DUALADC_iResult2 + HighByte)], A
0ABC: 55 08 FF MOV   [0x8],0xFF         (0346)    mov   [(DUALADC_iResult2 + LowByte)], ffh
0ABF: 80 02    JMP   0x0AC2             (0347)    jmp   DUALADC_NOT_2POVFL2
                                        (0348) DUALADC_NOT_POVFL2:
0AC1: 18       POP   A                  (0349)    pop   A
                                        (0350) 
                                        (0351) DUALADC_NOT_2POVFL2:
0AC2: 68 07    ASR   [0x7]              (0352)    asr   [(DUALADC_iResult2 + HighByte)]         ; Shift MSB and LSB right twice to divide by four
0AC4: 6E 08    RRC   [0x8]              (0353)    rrc   [(DUALADC_iResult2 + LowByte)]          ; Remember digital clock 4 times analog clock
0AC6: 68 07    ASR   [0x7]              (0354)    asr   [(DUALADC_iResult2 + HighByte)]
0AC8: 6E 08    RRC   [0x8]              (0355)    rrc   [(DUALADC_iResult2 + LowByte)]
                                        (0356) 
                                        (0357)    ;**********************************************
                                        (0358)    ; Data is ready at this point.
                                        (0359)    ; If processing Data at Interrupt level - add
                                        (0360)    ;     User Code to handle the data
                                        (0361)    ;**********************************************
                                        (0362)    ;@PSoC_UserCode_BODY_4@ (Do not change this line.)
                                        (0363)    ;---------------------------------------------------
                                        (0364)    ; Insert your custom code below this banner
                                        (0365)    ;---------------------------------------------------
                                        (0366)    ;   NOTE: interrupt service routines must preserve
                                        (0367)    ;   the values of the A and X CPU registers. At this
                                        (0368)    ;   point A has been preserved on the stack and wil
                                        (0369)    ;   be restored later. However, if you use X, be
                                        (0370)    ;   sure to take care of it yourself!
                                        (0371) 
                                        (0372) 
                                        (0373)    ;---------------------------------------------------
                                        (0374)    ; Insert your custom code above this banner
                                        (0375)    ;---------------------------------------------------
                                        (0376)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0377) 
0ACA: 18       POP   A                  (0378)    pop   A                                       ; Restore A, not used any more
                                        (0379) 
0ACB: 2E 09 10 OR    [0x9],0x10         (0380)    or    [DUALADC_bfStatus],DUALADC_fDATA_READY  ; Set Data ready bit
                                        (0381) 
0ACE: 47 0A FF TST   [0xA],0xFF         (0382)    tst   [DUALADC_bSampC], ffh                   ; If sample_counter == 0 -->> continuous data collection
0AD1: A0 23    JZ    0x0AF5             (0383)    jz    DUALADC_END_PWM16_ISR
                                        (0384) 
0AD3: 7A 0A    DEC   [0xA]              (0385)    dec   [DUALADC_bSampC]                        ; Dec sample counter and check for zero
0AD5: B0 1F    JNZ   0x0AF5             (0386)    jnz   DUALADC_END_PWM16_ISR
                                        (0387) 
0AD7: 41 3B FE AND   REG[0x3B],0xFE     (0388)    and   reg[DUALADC_fPWM_LSB_CR0], ~DUALADC_fDBLK_ENABLE      ; Disable the PWM
                                        (0389) 
0ADA: 41 33 FE AND   REG[0x33],0xFE     (0390)    and   reg[DUALADC_bCounter1_CR0], ~DUALADC_fDBLK_ENABLE           ; Disable the Counter
0ADD: 41 37 FE AND   REG[0x37],0xFE     (0391)    and   reg[DUALADC_bCounter2_CR0], ~DUALADC_fDBLK_ENABLE           ; Disable the Counter
                                        (0392) 
                                        (0393) IF DUALADC_NoAZ
0AE0: 43 92 20 OR    REG[0x92],0x20     (0394)    or    reg[DUALADC_bfADC1cr2], DUALADC_fAutoZero             ; Put the Integrator into Autozero mode
0AE3: 43 9A 20 OR    REG[0x9A],0x20     (0395)    or    reg[DUALADC_bfADC2cr2], DUALADC_fAutoZero             ; Put the Integrator into Autozero mode
                                        (0396) ENDIF
                                        (0397) 
0AE6: 43 93 10 OR    REG[0x93],0x10     (0398)    or    reg[DUALADC_bfADC1cr3], DUALADC_fFSW0                 ; Put Integrator into reset
0AE9: 43 9B 10 OR    REG[0x9B],0x10     (0399)    or    reg[DUALADC_bfADC2cr3], DUALADC_fFSW0                 ; Put Integrator into reset
                                        (0400) 
0AEC: 41 E1 7F AND   REG[0xE1],0x7F     (0401)    and   reg[DUALADC_bfPWM16_INT_REG], ~DUALADC_bfPWM16_Mask      ; Disable interrupts
0AEF: 41 E1 EF AND   REG[0xE1],0xEF     (0402)    and   reg[DUALADC_bfCounter1_INT_REG], ~DUALADC_bfCounter1_Mask
0AF2: 41 E1 DF AND   REG[0xE1],0xDF     (0403)    and   reg[DUALADC_bfCounter2_INT_REG], ~DUALADC_bfCounter2_Mask
                                        (0404) 
                                        (0405) DUALADC_END_PWM16_ISR:
0AF5: 7E       RETI                     (0406)    reti
                                        (0407) 
                                        (0408) DUALADC_APIINT_END:
FILE: lib\dualadc.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
0AF6: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;  DUALADC.asm
                                        (0004) ;;  Version: 2.30, Updated on 2014/7/14 at 8:13:37
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DualADC User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) include "DUALADC.inc"
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) 
                                        (0025) ;-----------------------------------------------
                                        (0026) ;  Global Symbols
                                        (0027) ;-----------------------------------------------
                                        (0028) 
                                        (0029) export  DUALADC_Start
                                        (0030) export _DUALADC_Start
                                        (0031) export  DUALADC_SetPower
                                        (0032) export _DUALADC_SetPower
                                        (0033) export  DUALADC_Stop
                                        (0034) export _DUALADC_Stop
                                        (0035) export  DUALADC_GetSamples
                                        (0036) export _DUALADC_GetSamples
                                        (0037) export  DUALADC_StopAD
                                        (0038) export _DUALADC_StopAD
                                        (0039) export  DUALADC_fIsData
                                        (0040) export _DUALADC_fIsData
                                        (0041) export  DUALADC_fIsDataAvailable
                                        (0042) export _DUALADC_fIsDataAvailable
                                        (0043) export  DUALADC_iGetData1
                                        (0044) export _DUALADC_iGetData1
                                        (0045) export  DUALADC_iGetData2
                                        (0046) export _DUALADC_iGetData2
                                        (0047) export  DUALADC_ClearFlag
                                        (0048) export _DUALADC_ClearFlag
                                        (0049) export  DUALADC_iGetData1ClearFlag
                                        (0050) export _DUALADC_iGetData1ClearFlag
                                        (0051) export  DUALADC_iGetData2ClearFlag
                                        (0052) export _DUALADC_iGetData2ClearFlag
                                        (0053) export  DUALADC_SetResolution
                                        (0054) export _DUALADC_SetResolution
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  EQUATES
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) ; Calctime parameters
                                        (0061) wCalcTime:     equ   DUALADC_bCALCTIME
                                        (0062) 
                                        (0063) ; Constants
                                        (0064) LowByte:       equ 1
                                        (0065) HighByte:      equ 0
                                        (0066) 
                                        (0067) AREA UserModules (ROM, REL)
                                        (0068) .SECTION
                                        (0069) ;-----------------------------------------------------------------------------
                                        (0070) ;  FUNCTION NAME: DUALADC_Start
                                        (0071) ;  FUNCTION NAME: DUALADC_SetPower
                                        (0072) ;
                                        (0073) ;  DESCRIPTION:
                                        (0074) ;  Applies power setting to the module's analog PSoc block.
                                        (0075) ;
                                        (0076) ;-----------------------------------------------------------------------------
                                        (0077) ;
                                        (0078) ;  ARGUMENTS:
                                        (0079) ;   A  Contains power level setting 0 to 3
                                        (0080) ;
                                        (0081) ;  RETURNS:  none
                                        (0082) ;
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;          
                                        (0090) ;    Currently only the page pointer registers listed below are modified: 
                                        (0091) ;          CUR_PP
                                        (0092) ;
                                        (0093) ;  THEORY of OPERATION or PROCEDURE:
                                        (0094) ;
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096)  DUALADC_Start:
                                        (0097) _DUALADC_Start:
                                        (0098)  DUALADC_SetPower:
                                        (0099) _DUALADC_SetPower:
                                        (0100)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0101)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0102)    RAM_SETPAGE_CUR >DUALADC_bfStatus
                                        (0103) 
0AF9: 21 03    AND   A,0x3              (0104)    and   A,DUALADC_bfPOWERMASK                       ; Mask only the valid power setting bits
0AFB: 4F       MOV   X,SP               (0105)    mov   X, SP                                       ; Get location of next location on stack
0AFC: 08       PUSH  A                  (0106)    push  A                                           ; Save power value on temp location
                                        (0107) 
                                        (0108)                                                      ; Set power for ADC1
0AFD: 5D 93    MOV   A,REG[0x93]        (0109)    mov   A, reg[DUALADC_bfADC1cr3]                   ; Get current value of ADC1cr3
0AFF: 21 FC    AND   A,0xFC             (0110)    and   A, ~DUALADC_bfPOWERMASK                     ; Mask off old power value
0B01: 2B 00    OR    A,[X+0]            (0111)    or    A, [X]                                      ; OR in new power value
0B03: 29 F0    OR    A,0xF0             (0112)    or    A, f0h                                      ; Make sure other register is set correctly
0B05: 60 93    MOV   REG[0x93],A        (0113)    mov   reg[DUALADC_bfADC1cr3], A                   ; Reload CR with new power value
                                        (0114) 
                                        (0115)                                                      ; Set power for ADC2
0B07: 5D 9B    MOV   A,REG[0x9B]        (0116)    mov   A, reg[DUALADC_bfADC2cr3]                   ; Get current value of ADC2cr3
0B09: 21 FC    AND   A,0xFC             (0117)    and   A, ~DUALADC_bfPOWERMASK                     ; Mask off old power value
0B0B: 2B 00    OR    A,[X+0]            (0118)    or    A, [X]                                      ; OR in new power value
0B0D: 29 F0    OR    A,0xF0             (0119)    or    A, f0h                                      ; Make sure other register is set correctly
0B0F: 60 9B    MOV   REG[0x9B],A        (0120)    mov   reg[DUALADC_bfADC2cr3], A                   ; Reload CR with new power value
                                        (0121) 
0B11: 49 92 01 TST   REG[0x92],0x1      (0122)    tst   reg[DUALADC_bfADC1cr2], DUALADC_fRES_SET
0B14: A0 05    JZ    0x0B1A             (0123)    jz    .DoNotLoadRes
0B16: 50 00    MOV   A,0x0              (0124)    mov   A,DUALADC_bNUMBITS - DUALADC_bMINRES                   ; get and set the resolution
0B18: 53 09    MOV   [0x9],A            (0125)    mov   [DUALADC_bfStatus], A              ; place it in the status variable
                                        (0126) .DoNotLoadRes:
                                        (0127) 
0B1A: 18       POP   A                  (0128)    pop   A                                           ; Restore the stack and power value
0B1B: 70 3F    AND   F,0x3F             
0B1D: 71 C0    OR    F,0xC0             
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0130)    RAM_EPILOGUE RAM_USE_CLASS_4
0B1F: 7F       RET                      (0131)    ret
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) .SECTION
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;  FUNCTION NAME: DUALADC_Stop
                                        (0137) ;
                                        (0138) ;  DESCRIPTION:
                                        (0139) ;  Removes power from the module's analog PSoc blocks, but the digital
                                        (0140) ;  blocks keep on running.
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS: None
                                        (0145) ;
                                        (0146) ;  RETURNS:   NA
                                        (0147) ;
                                        (0148) ;  SIDE EFFECTS:
                                        (0149) ;    The A and X registers may be modified by this or future implementations
                                        (0150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0153) ;    functions.
                                        (0154) ;
                                        (0155)  DUALADC_Stop:
                                        (0156) _DUALADC_Stop:
                                        (0157)    RAM_PROLOGUE RAM_USE_CLASS_1
0B20: 41 93 FC AND   REG[0x93],0xFC     (0158)    and   reg[DUALADC_bfADC1cr3], ~DUALADC_bfPOWERMASK
0B23: 41 9B FC AND   REG[0x9B],0xFC     (0159)    and   reg[DUALADC_bfADC2cr3], ~DUALADC_bfPOWERMASK
                                        (0160)    RAM_EPILOGUE RAM_USE_CLASS_1
0B26: 7F       RET                      (0161)    ret
0B27: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0162) .ENDSECTION
                                        (0163) 
                                        (0164) .SECTION
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;  FUNCTION NAME: DUALADC_Get_Samples
                                        (0167) ;
                                        (0168) ;  DESCRIPTION:
                                        (0169) ;  Starts the A/D convertor and will place data is memory.  A flag
                                        (0170) ;  is set whenever a new data value is available.
                                        (0171) ;
                                        (0172) ;-----------------------------------------------------------------------------
                                        (0173) ;
                                        (0174) ;  ARGUMENTS:
                                        (0175) ;  A  Number of samples to be taken.  A zero will cause the ADC to run
                                        (0176) ;     continuously.  A flag is set whenever a new data values are available.
                                        (0177) ;
                                        (0178) ;  RETURNS:  NA
                                        (0179) ;
                                        (0180) ;  SIDE EFFECTS:
                                        (0181) ;    The A and X registers may be modified by this or future implementations
                                        (0182) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0183) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0184) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0185) ;    functions.
                                        (0186) ;          
                                        (0187) ;    Currently only the page pointer registers listed below are modified: 
                                        (0188) ;          CUR_PP
                                        (0189) ;
                                        (0190)  DUALADC_GetSamples:
                                        (0191) _DUALADC_GetSamples:
                                        (0192)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0193)    RAM_SETPAGE_CUR >DUALADC_bSampC
0B2A: 53 0A    MOV   [0xA],A            (0194)    mov   [DUALADC_bSampC], A                               ; Store sample count
                                        (0195)                                                            ; Interrupts, Put A/D in reset
0B2C: 51 09    MOV   A,[0x9]            (0196)    mov   A,[DUALADC_bfStatus]                              ; get and set the resolution
0B2E: 21 0F    AND   A,0xF              (0197)    and   A,DUALADC_bRES_MASK
0B30: 01 07    ADD   A,0x7              (0198)    add   A,DUALADC_bMINRES
0B32: 90 8C    CALL  _DUALADC_SetResolution(0199)    call  DUALADC_SetResolution
                                        (0200) 
                                        (0201) DUALADC_LoadMSBCounter:                                    ; The PWM has been setup by SetResolution, now set the upper
                                        (0202)                                                            ; counter which will be the same as the period.
                                        (0203)                                                            ; Reset MSB of counter to most negative value
                                        (0204) 
0B34: 5D 3E    MOV   A,REG[0x3E]        (0205)    mov   A,reg[DUALADC_bPWM_IntTime_MSB]                   ; Get MSB of PWM and move it into RAM
0B36: 53 03    MOV   [0x3],A            (0206)    mov   [DUALADC_cCounter1U], A                           ; Use counter as temp location
0B38: 50 00    MOV   A,0x0              (0207)    mov   A, 00h                                            ; Load A with zero for the calculation
0B3A: 12 03    SUB   A,[0x3]            (0208)    sub   A, [DUALADC_cCounter1U]                           ; 0 - MSB_PWM = MSB_of_most_neg_value
0B3C: 67       ASR   A                  (0209)    asr   A                                                 ; Half the range (+ and -)
                                        (0210) IF (DUALADC_DATA_FORMAT)
                                        (0211)    mov   [DUALADC_cCounter1U], A                           ; Place result back into MSB of counter1
                                        (0212)    mov   [DUALADC_cCounter2U], A                           ; Place result back into MSB of counter2
                                        (0213) ELSE
0B3D: 55 03 00 MOV   [0x3],0x0          (0214)    mov   [DUALADC_cCounter1U], 00h                         ; Always start at zero for unsigned values for ADC1
0B40: 55 04 00 MOV   [0x4],0x0          (0215)    mov   [DUALADC_cCounter2U], 00h                         ; Always start at zero for unsigned values for ADC2
                                        (0216) ENDIF
0B43: 5D 3A    MOV   A,REG[0x3A]        (0217)    mov   A, reg[DUALADC_bPWM_IntTime_LSB]                  ; Dummy Read  - required do not remove
0B45: 62 31 FF MOV   REG[0x31],0xFF     (0218)    mov   reg[DUALADC_bPeriod1], FFh                        ; Make sure counter1 starts at FF
0B48: 62 35 FF MOV   REG[0x35],0xFF     (0219)    mov   reg[DUALADC_bPeriod2], FFh                        ; Make sure counter2 starts at FF
                                        (0220) 
0B4B: 41 93 EF AND   REG[0x93],0xEF     (0221)    and   reg[DUALADC_bfADC1cr3],~DUALADC_fFSW0             ; Take Integrator out of reset
0B4E: 41 9B EF AND   REG[0x9B],0xEF     (0222)    and   reg[DUALADC_bfADC2cr3],~DUALADC_fFSW0             ; Take Integrator out of reset
                                        (0223) IF DUALADC_NoAZ
0B51: 41 92 DF AND   REG[0x92],0xDF     (0224)     and  reg[DUALADC_bfADC1cr2],~DUALADC_fAutoZero         ; Take Integrator out of AutoZero
0B54: 41 9A DF AND   REG[0x9A],0xDF     (0225)     and  reg[DUALADC_bfADC2cr2],~DUALADC_fAutoZero         ; Take Integrator out of AutoZero
                                        (0226) ENDIF
                                        (0227) 
0B57: 43 33 05 OR    REG[0x33],0x5      (0228)    or    reg[DUALADC_bCounter1_CR0], (DUALADC_fDBLK_ENABLE|DUALADC_fPULSE_WIDE)   ; Enable the Counter
0B5A: 43 37 05 OR    REG[0x37],0x5      (0229)    or    reg[DUALADC_bCounter2_CR0], (DUALADC_fDBLK_ENABLE|DUALADC_fPULSE_WIDE)   ; Enable the Counter
0B5D: 43 3B 01 OR    REG[0x3B],0x1      (0230)    or    reg[DUALADC_fPWM_LSB_CR0], DUALADC_fDBLK_ENABLE          ; Enable PWM
0B60: 43 E1 80 OR    REG[0xE1],0x80     (0231)    or    reg[DUALADC_bfPWM16_INT_REG], DUALADC_bfPWM16_Mask    ; Enable PWM and Counter interrupts
0B63: 43 E1 10 OR    REG[0xE1],0x10     (0232)    or    reg[DUALADC_bfCounter1_INT_REG], DUALADC_bfCounter1_Mask
0B66: 43 E1 20 OR    REG[0xE1],0x20     (0233)    or    reg[DUALADC_bfCounter2_INT_REG], DUALADC_bfCounter2_Mask
                                        (0234) 
0B69: 7F       RET                      (0235)    ret
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0237) .ENDSECTION
                                        (0238) 
                                        (0239) .SECTION
                                        (0240) ;-----------------------------------------------------------------------------
                                        (0241) ;  FUNCTION NAME: DUALADC_StopAD
                                        (0242) ;
                                        (0243) ;  DESCRIPTION:
                                        (0244) ;  Completely shuts down the A/D is an orderly manner.  Both the
                                        (0245) ;  Timer and Counter are disabled and their interrupts are deactivated.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS:  None
                                        (0250) ;
                                        (0251) ;  RETURNS: NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;     The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  DUALADC_StopAD:
                                        (0261) _DUALADC_StopAD:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
0B6A: 41 3B FE AND   REG[0x3B],0xFE     (0263)    and   reg[DUALADC_fPWM_LSB_CR0], ~DUALADC_fDBLK_ENABLE      ; Disable the PWM
                                        (0264) 
0B6D: 41 33 FE AND   REG[0x33],0xFE     (0265)    and   reg[DUALADC_bCounter1_CR0], ~DUALADC_fDBLK_ENABLE           ; Disable the Counter
0B70: 41 37 FE AND   REG[0x37],0xFE     (0266)    and   reg[DUALADC_bCounter2_CR0], ~DUALADC_fDBLK_ENABLE           ; Disable the Counter
                                        (0267) 
                                        (0268) IF DUALADC_NoAZ
0B73: 43 92 20 OR    REG[0x92],0x20     (0269)    or    reg[DUALADC_bfADC1cr2], DUALADC_fAutoZero             ; Put the Integrator into Autozero mode
0B76: 43 9A 20 OR    REG[0x9A],0x20     (0270)    or    reg[DUALADC_bfADC2cr2], DUALADC_fAutoZero             ; Put the Integrator into Autozero mode
                                        (0271) ENDIF
                                        (0272) 
0B79: 43 93 10 OR    REG[0x93],0x10     (0273)    or   reg[DUALADC_bfADC1cr3], DUALADC_fFSW0                  ; Put Integrator into reset
0B7C: 43 9B 10 OR    REG[0x9B],0x10     (0274)    or   reg[DUALADC_bfADC2cr3], DUALADC_fFSW0                  ; Put Integrator into reset
                                        (0275) 
0B7F: 08       PUSH  A                  (0276)    push A
0B80: 41 E1 7F AND   REG[0xE1],0x7F     
0B83: 41 E1 EF AND   REG[0xE1],0xEF     
0B86: 41 E1 EF AND   REG[0xE1],0xEF     
                                        (0277)    M8C_DisableIntMask DUALADC_bfPWM16_INT_REG, DUALADC_bfPWM16_Mask      ; Disable interrupts
                                        (0278)    M8C_DisableIntMask DUALADC_bfCounter1_INT_REG, DUALADC_bfCounter1_Mask
                                        (0279)    M8C_DisableIntMask DUALADC_bfCounter2_INT_REG, DUALADC_bfCounter1_Mask
0B89: 18       POP   A                  (0280)    pop  A
                                        (0281)    
                                        (0282)    RAM_EPILOGUE RAM_USE_CLASS_1
0B8A: 7F       RET                      (0283)    ret
0B8B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0284) .ENDSECTION
                                        (0285) 
                                        (0286) .SECTION
                                        (0287) ;-----------------------------------------------------------------------------
                                        (0288) ;  FUNCTION NAME: DUALADC_fIsData
                                        (0289) ;  FUNCTION NAME: DUALADC_fIsDataAvailable
                                        (0290) ;
                                        (0291) ;  DESCRIPTION:
                                        (0292) ;  Returns the status of the A/D Data is set whenever a new data
                                        (0293) ;  value is available.
                                        (0294) ;
                                        (0295) ;-----------------------------------------------------------------------------
                                        (0296) ;
                                        (0297) ;  ARGUMENTS: None
                                        (0298) ;
                                        (0299) ;  RETURNS:
                                        (0300) ;  A  Returns data status  A == 0 no data available
                                        (0301) ;                          A != 0 data available
                                        (0302) ;
                                        (0303) ;  SIDE EFFECTS:
                                        (0304) ;    The A and X registers may be modified by this or future implementations
                                        (0305) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0306) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0307) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0308) ;    functions.
                                        (0309) ;          
                                        (0310) ;    Currently only the page pointer registers listed below are modified:
                                        (0311) ;          CUR_PP
                                        (0312) ;
                                        (0313)  DUALADC_fIsData:
                                        (0314) _DUALADC_fIsData:
                                        (0315)  DUALADC_fIsDataAvailable:
                                        (0316) _DUALADC_fIsDataAvailable:
                                        (0317)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0318)    RAM_SETPAGE_CUR >DUALADC_bfStatus
0B8E: 51 09    MOV   A,[0x9]            (0319)    mov   A, [DUALADC_bfStatus]                        ; Get status byte
0B90: 21 10    AND   A,0x10             (0320)    and   A, DUALADC_fDATA_READY                       ; Mask off other bits
                                        (0321)    RAM_EPILOGUE RAM_USE_CLASS_4
0B92: 7F       RET                      (0322)    ret
0B93: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0323) .ENDSECTION
                                        (0324) 
                                        (0325) .SECTION
                                        (0326) ;-----------------------------------------------------------------------------
                                        (0327) ;  FUNCTION NAME: DUALADC_iGetData1ClearFlag
                                        (0328) ;  FUNCTION NAME: DUALADC_iGetData1
                                        (0329) ;
                                        (0330) ;  DESCRIPTION:
                                        (0331) ;  Returns the data from channel-1 of A/D.  Does not check if data is available.
                                        (0332) ;  iGetData1ClearFlag clears the result ready flag as well.
                                        (0333) ;
                                        (0334) ;-----------------------------------------------------------------------------
                                        (0335) ;
                                        (0336) ;  ARGUMENTS: None
                                        (0337) ;
                                        (0338) ;  RETURNS:
                                        (0339) ;    A  Contains the LSB of the 16 bit result
                                        (0340) ;    X  Contains the MSB of the 16 bit result
                                        (0341) ;
                                        (0342) ;  SIDE EFFECTS:
                                        (0343) ;    The A and X registers may be modified by this or future implementations
                                        (0344) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0345) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0346) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0347) ;    functions.
                                        (0348) ;          
                                        (0349) ;    Currently only the page pointer registers listed below are modified:
                                        (0350) ;          CUR_PP
                                        (0351) ;
                                        (0352)  DUALADC_iGetData1ClearFlag:
                                        (0353) _DUALADC_iGetData1ClearFlag:
                                        (0354)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0355)    RAM_SETPAGE_CUR >DUALADC_iResult1 
0B96: 26 09 EF AND   [0x9],0xEF         (0356)    and   [DUALADC_bfStatus], ~DUALADC_fDATA_READY  ; Clear Data ready bit
0B99: 58 05    MOV   X,[0x5]            (0357)    mov   X, [(DUALADC_iResult1 + HighByte)]
0B9B: 51 06    MOV   A,[0x6]            (0358)    mov   A, [(DUALADC_iResult1 + LowByte)]
                                        (0359)    RAM_EPILOGUE RAM_USE_CLASS_4
0B9D: 7F       RET                      (0360)    ret
0B9E: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0361) 
                                        (0362)  DUALADC_iGetData1:
                                        (0363) _DUALADC_iGetData1:
                                        (0364)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0365)    RAM_SETPAGE_CUR >DUALADC_iResult1  
0BA1: 58 05    MOV   X,[0x5]            (0366)    mov   X, [(DUALADC_iResult1 + HighByte)]
0BA3: 51 06    MOV   A,[0x6]            (0367)    mov   A, [(DUALADC_iResult1 + LowByte)]
                                        (0368)    RAM_EPILOGUE RAM_USE_CLASS_4
0BA5: 7F       RET                      (0369)    ret
0BA6: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0370) .ENDSECTION
                                        (0371) 
                                        (0372) .SECTION
                                        (0373) ;-----------------------------------------------------------------------------
                                        (0374) ;  FUNCTION NAME: DUALADC_iGetData2ClearFlag
                                        (0375) ;  FUNCTION NAME: DUALADC_iGetData2
                                        (0376) ;
                                        (0377) ;  DESCRIPTION:
                                        (0378) ;  Returns the data from channel-1 of A/D.  Does not check if data is available.
                                        (0379) ;  iGetData1ClearFlag clears the result ready flag as well.
                                        (0380) ;
                                        (0381) ;-----------------------------------------------------------------------------
                                        (0382) ;
                                        (0383) ;  ARGUMENTS: None
                                        (0384) ;
                                        (0385) ;  RETURNS:
                                        (0386) ;    A  Contains the LSB of the 16 bit result
                                        (0387) ;    X  Contains the MSB of the 16 bit result
                                        (0388) ;
                                        (0389) ;  SIDE EFFECTS:
                                        (0390) ;    The A and X registers may be modified by this or future implementations
                                        (0391) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0392) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0393) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0394) ;    functions.
                                        (0395) ;          
                                        (0396) ;    Currently only the page pointer registers listed below are modified:
                                        (0397) ;          CUR_PP
                                        (0398) ;
                                        (0399)  DUALADC_iGetData2ClearFlag:
                                        (0400) _DUALADC_iGetData2ClearFlag:
                                        (0401)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0402)    RAM_SETPAGE_CUR >DUALADC_iResult1  
0BA9: 26 09 EF AND   [0x9],0xEF         (0403)    and   [DUALADC_bfStatus], ~DUALADC_fDATA_READY  ; Clear Data ready bit
0BAC: 58 07    MOV   X,[0x7]            (0404)    mov   X, [(DUALADC_iResult2 + HighByte)]
0BAE: 51 08    MOV   A,[0x8]            (0405)    mov   A, [(DUALADC_iResult2 + LowByte)]
                                        (0406)    RAM_EPILOGUE RAM_USE_CLASS_4
0BB0: 7F       RET                      (0407)    ret
0BB1: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0408) 
                                        (0409)  DUALADC_iGetData2:
                                        (0410) _DUALADC_iGetData2:
                                        (0411)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0412)    RAM_SETPAGE_CUR >DUALADC_iResult1  
0BB4: 58 07    MOV   X,[0x7]            (0413)    mov   X, [(DUALADC_iResult2 + HighByte)]
0BB6: 51 08    MOV   A,[0x8]            (0414)    mov   A, [(DUALADC_iResult2 + LowByte)]
                                        (0415)    RAM_EPILOGUE RAM_USE_CLASS_4
0BB8: 7F       RET                      (0416)    ret
0BB9: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0417) .ENDSECTION
                                        (0418) 
                                        (0419) .SECTION
                                        (0420) ;-----------------------------------------------------------------------------
                                        (0421) ;  FUNCTION NAME: DUALADC_ClearFlag
                                        (0422) ;
                                        (0423) ;  DESCRIPTION:
                                        (0424) ;  Clears the data ready flag.
                                        (0425) ;
                                        (0426) ;-----------------------------------------------------------------------------
                                        (0427) ;
                                        (0428) ;  ARGUMENTS: None
                                        (0429) ;
                                        (0430) ;  RETURNS: NA
                                        (0431) ;
                                        (0432) ;  SIDE EFFECTS:
                                        (0433) ;    The A and X registers may be modified by this or future implementations
                                        (0434) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0435) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0436) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0437) ;    functions.
                                        (0438) ;          
                                        (0439) ;    Currently only the page pointer registers listed below are modified:
                                        (0440) ;          CUR_PP
                                        (0441) ;
                                        (0442)  DUALADC_ClearFlag:
                                        (0443) _DUALADC_ClearFlag:
                                        (0444)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0445)    RAM_SETPAGE_CUR >DUALADC_bfStatus  
0BBC: 26 09 EF AND   [0x9],0xEF         (0446)    and   [DUALADC_bfStatus], ~DUALADC_fDATA_READY  ; Clear Data ready bit
                                        (0447)    RAM_EPILOGUE RAM_USE_CLASS_4
0BBF: 7F       RET                      (0448)    ret
0BC0: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: DUALADC_SetResolution
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;  Sets A/D resolution between 7 and 13 bits.
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;  A  Passes the number of bits of resolution, between 7 and 13.
                                        (0462) ;
                                        (0463) ;  RETURNS:  NA
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475) ;    This function halts the PWM and the counter to sync the A/D , but
                                        (0476) ;    does not re-enable the counter or PWM. To restart the A/D, "Get_Samples"
                                        (0477) ;    should be called. It sets the resolution for both channels at the
                                        (0478) ;    same time.
                                        (0479) ;
                                        (0480)  DUALADC_SetResolution:
                                        (0481) _DUALADC_SetResolution:
                                        (0482)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0483)    RAM_SETPAGE_CUR >DUALADC_bfStatus  
                                        (0484) 
0BC3: 41 92 FE AND   REG[0x92],0xFE     (0485)    and   reg[DUALADC_bfADC1cr2], ~DUALADC_fRES_SET
                                        (0486)    
0BC6: 9F A2    CALL  _DUALADC_StopAD    (0487)    call  DUALADC_StopAD                            ; Stop the A/D if it is running
0BC8: 55 09 00 MOV   [0x9],0x0          (0488)    mov   [DUALADC_bfStatus], 00h                   ; and clear status and old resolution
                                        (0489) 
                                        (0490)                                                    ; Check for resolution to be within min and max values
0BCB: 39 07    CMP   A,0x7              (0491)    cmp   A,DUALADC_bMINRES                         ; Check low end of resolution
0BCD: D0 05    JNC   0x0BD3             (0492)    jnc   DUALADC_CHECKHI
0BCF: 50 07    MOV   A,0x7              (0493)    mov   A,DUALADC_bMINRES                         ; Too low - load legal low value
0BD1: 80 07    JMP   0x0BD9             (0494)    jmp   DUALADC_RES_OK
                                        (0495) 
                                        (0496) DUALADC_CHECKHI:                                   ; Check high end of resolution
0BD3: 39 0D    CMP   A,0xD              (0497)    cmp   A,DUALADC_bMAXRES
0BD5: C0 03    JC    0x0BD9             (0498)    jc    DUALADC_RES_OK
0BD7: 50 0D    MOV   A,0xD              (0499)    mov   A,DUALADC_bMAXRES                         ; Too high - load legal Max value
                                        (0500) 
                                        (0501) DUALADC_RES_OK:
                                        (0502)                                                    ; Calculate compare value for the PWM which
                                        (0503)                                                    ; computes the integrate time
0BD9: 11 07    SUB   A,0x7              (0504)    sub   A, DUALADC_bMINRES                        ; Normalize with min resolution
0BDB: 2C 09    OR    [0x9],A            (0505)    or    [DUALADC_bfStatus], A
                                        (0506)                                                    ; Since min resolution is 7, 2^^7 = 128, the clock
                                        (0507)                                                    ; is running 4x so 128*4=512 or 0x0200
0BDD: 01 01    ADD   A,0x1              (0508)    add   A,01h                                     ; The MSB is 02h.
0BDF: 5C       MOV   X,A                (0509)    mov   X,A
0BE0: 50 01    MOV   A,0x1              (0510)    mov   A,01h
                                        (0511) 
                                        (0512) DUALADC_CALC_INTTIME:                              ; Now shift the MSB left for every bit of resolution of min (7).
0BE2: 64       ASL   A                  (0513)    asl   A
0BE3: 79       DEC   X                  (0514)    dec   X
0BE4: BF FD    JNZ   0x0BE2             (0515)    jnz   DUALADC_CALC_INTTIME
                                        (0516) 
                                        (0517) DUALADC_LOAD_INTTIME:                              ; Load compare value and Calc time into registers
                                        (0518)                                                    ; Since minimum resolution is 7 bits, this value will always start at 0
0BE6: 62 3A 00 MOV   REG[0x3A],0x0      (0519)    mov   reg[DUALADC_bPWM_IntTime_LSB], 00h
0BE9: 60 3E    MOV   REG[0x3E],A        (0520)    mov   reg[DUALADC_bPWM_IntTime_MSB], A
                                        (0521) 
                                        (0522)                                                    ; Load the CalcTime into the PWM Period
0BEB: 62 39 58 MOV   REG[0x39],0x58     (0523)    mov   reg[DUALADC_bPWM_Period_LSB], <wCalcTime
0BEE: 01 00    ADD   A,0x0              (0524)    add   A, >wCalcTime
0BF0: 60 3D    MOV   REG[0x3D],A        (0525)    mov   reg[DUALADC_bPWM_Period_MSB],A
                                        (0526)    RAM_EPILOGUE RAM_USE_CLASS_4
0BF2: 7F       RET                      (0527)    ret
                                        (0528) .ENDSECTION
                                        (0529) 
                                        (0530) ; End of File DUALADC.asm
FILE: C:\Users\HARISH~1\Desktop\SEM1CO~1\566\Project3\Versions\VERSIO~1\Project1\Project1\fft.h
(0001) #include "math.h"				 //mathematical library
(0002) 
(0003) // FFT parameters
(0004) #define N_points 64             //number of points				
(0005) #define exponent log(64)/log(2)  //log2(N_points); for N_points=64 -> exponent=6
(0006) 
(0007) // FFT variables
(0008) double mod[N_points]={0};        //arrays
(0009) double data_re[N_points]={0};
(0010) double data_imm[N_points]={0};
(0011) //define these in FFT.h
(0012) //int mod1[N_points]={0};        //arrays
(0013) double data_re1[N_points]={0};
(0014) double data_imm1[N_points]={0};
(0015) int maxAmp, maxFreq;
(0016) 
(0017) // FFT function
(0018) void FFT(int dir,double m,double *x,double *y,double *modl)
(0019) {
__UserModules_end|_FFT|__text_start|_FFT:
  ty                   --> X+68
  tx                   --> X+64
  i2                   --> X+60
  l                    --> X+56
  z                    --> X+52
  c2                   --> X+48
  c1                   --> X+44
  k                    --> X+40
  j                    --> X+36
  l2                   --> X+32
  n                    --> X+28
  l1                   --> X+24
  u2                   --> X+20
  u1                   --> X+16
  t2                   --> X+12
  t1                   --> X+8
  i1                   --> X+4
  i                    --> X+0
  modl                 --> X-15
  y                    --> X-13
  x                    --> X-11
  m                    --> X-9
  dir                  --> X-5
    0BF3: 10       PUSH  X
    0BF4: 4F       MOV   X,SP
    0BF5: 38 4A    ADD   SP,0x4A
(0020)    // dir:  forward (=1) o inverse (!=1) transform; 
(0021)    // m exponent;
(0022)    
(0023)    long n,i,i1,j,k,i2,l,l1,l2;
(0024)    double c1,c2,tx,ty,t1,t2,u1,u2,z;
(0025) 
(0026)    /* Calculate the number of points */
(0027)    n = 1;
    0BF7: 56 1C 00 MOV   [X+28],0x0
    0BFA: 56 1D 00 MOV   [X+29],0x0
    0BFD: 56 1E 00 MOV   [X+30],0x0
    0C00: 56 1F 01 MOV   [X+31],0x1
(0028)    for (i=0;i<m;i++) 
    0C03: 56 00 00 MOV   [X+0],0x0
    0C06: 56 01 00 MOV   [X+1],0x0
    0C09: 56 02 00 MOV   [X+2],0x0
    0C0C: 56 03 00 MOV   [X+3],0x0
    0C0F: 80 15    JMP   0x0C25
(0029)       n *= 2;
    0C11: 66 1F    ASL   [X+31]
    0C13: 6C 1E    RLC   [X+30]
    0C15: 6C 1D    RLC   [X+29]
    0C17: 6C 1C    RLC   [X+28]
    0C19: 07 03 01 ADD   [X+3],0x1
    0C1C: 0F 02 00 ADC   [X+2],0x0
    0C1F: 0F 01 00 ADC   [X+1],0x0
    0C22: 0F 00 00 ADC   [X+0],0x0
    0C25: 62 D0 00 MOV   REG[0xD0],0x0
    0C28: 52 00    MOV   A,[X+0]
    0C2A: 08       PUSH  A
    0C2B: 52 01    MOV   A,[X+1]
    0C2D: 08       PUSH  A
    0C2E: 52 02    MOV   A,[X+2]
    0C30: 08       PUSH  A
    0C31: 52 03    MOV   A,[X+3]
    0C33: 08       PUSH  A
    0C34: 7C 3D 4F LCALL 0x3D4F
    0C37: 18       POP   A
    0C38: 53 96    MOV   [__r3],A
    0C3A: 18       POP   A
    0C3B: 53 97    MOV   [__r2],A
    0C3D: 18       POP   A
    0C3E: 53 98    MOV   [__r1],A
    0C40: 18       POP   A
    0C41: 53 99    MOV   [__r0],A
    0C43: 52 F7    MOV   A,[X-9]
    0C45: 08       PUSH  A
    0C46: 52 F8    MOV   A,[X-8]
    0C48: 08       PUSH  A
    0C49: 52 F9    MOV   A,[X-7]
    0C4B: 08       PUSH  A
    0C4C: 52 FA    MOV   A,[X-6]
    0C4E: 08       PUSH  A
    0C4F: 51 99    MOV   A,[__r0]
    0C51: 08       PUSH  A
    0C52: 51 98    MOV   A,[__r1]
    0C54: 08       PUSH  A
    0C55: 51 97    MOV   A,[__r2]
    0C57: 08       PUSH  A
    0C58: 51 96    MOV   A,[__r3]
    0C5A: 08       PUSH  A
    0C5B: 7C 3A 0B LCALL 0x3A0B
    0C5E: 38 F8    ADD   SP,0xF8
    0C60: 39 FF    CMP   A,0xFF
    0C62: AF AE    JZ    0x0C11
(0030) 
(0031)    /* Do the bit reversal */
(0032)    i2 = n >> 1;
    0C64: 52 1C    MOV   A,[X+28]
    0C66: 53 99    MOV   [__r0],A
    0C68: 52 1D    MOV   A,[X+29]
    0C6A: 53 98    MOV   [__r1],A
    0C6C: 52 1E    MOV   A,[X+30]
    0C6E: 53 97    MOV   [__r2],A
    0C70: 52 1F    MOV   A,[X+31]
    0C72: 53 96    MOV   [__r3],A
    0C74: 68 99    ASR   [__r0]
    0C76: 6E 98    RRC   [__r1]
    0C78: 6E 97    RRC   [__r2]
    0C7A: 6E 96    RRC   [__r3]
    0C7C: 51 99    MOV   A,[__r0]
    0C7E: 54 3C    MOV   [X+60],A
    0C80: 51 98    MOV   A,[__r1]
    0C82: 54 3D    MOV   [X+61],A
    0C84: 51 97    MOV   A,[__r2]
    0C86: 54 3E    MOV   [X+62],A
    0C88: 51 96    MOV   A,[__r3]
    0C8A: 54 3F    MOV   [X+63],A
(0033)    j = 0;
    0C8C: 56 24 00 MOV   [X+36],0x0
    0C8F: 56 25 00 MOV   [X+37],0x0
    0C92: 56 26 00 MOV   [X+38],0x0
    0C95: 56 27 00 MOV   [X+39],0x0
(0034)    for (i=0;i<n-1;i++) {
    0C98: 56 00 00 MOV   [X+0],0x0
    0C9B: 56 01 00 MOV   [X+1],0x0
    0C9E: 56 02 00 MOV   [X+2],0x0
    0CA1: 56 03 00 MOV   [X+3],0x0
    0CA4: 82 A4    JMP   0x0F49
(0035)       if (i < j) {
    0CA6: 52 03    MOV   A,[X+3]
    0CA8: 13 27    SUB   A,[X+39]
    0CAA: 52 02    MOV   A,[X+2]
    0CAC: 1B 26    SBB   A,[X+38]
    0CAE: 52 01    MOV   A,[X+1]
    0CB0: 1B 25    SBB   A,[X+37]
    0CB2: 52 24    MOV   A,[X+36]
    0CB4: 31 80    XOR   A,0x80
    0CB6: 62 D0 00 MOV   REG[0xD0],0x0
    0CB9: 53 8D    MOV   [__rX],A
    0CBB: 52 00    MOV   A,[X+0]
    0CBD: 31 80    XOR   A,0x80
    0CBF: 1A 8D    SBB   A,[__rX]
    0CC1: D2 24    JNC   0x0EE6
(0036)          tx = x[i];
    0CC3: 62 D0 00 MOV   REG[0xD0],0x0
    0CC6: 52 00    MOV   A,[X+0]
    0CC8: 53 99    MOV   [__r0],A
    0CCA: 52 01    MOV   A,[X+1]
    0CCC: 53 98    MOV   [__r1],A
    0CCE: 52 02    MOV   A,[X+2]
    0CD0: 53 97    MOV   [__r2],A
    0CD2: 52 03    MOV   A,[X+3]
    0CD4: 53 96    MOV   [__r3],A
    0CD6: 50 02    MOV   A,0x2
    0CD8: 62 D0 00 MOV   REG[0xD0],0x0
    0CDB: 65 96    ASL   [__r3]
    0CDD: 6B 97    RLC   [__r2]
    0CDF: 6B 98    RLC   [__r1]
    0CE1: 6B 99    RLC   [__r0]
    0CE3: 78       DEC   A
    0CE4: BF F3    JNZ   0x0CD8
    0CE6: 51 96    MOV   A,[__r3]
    0CE8: 53 98    MOV   [__r1],A
    0CEA: 51 97    MOV   A,[__r2]
    0CEC: 53 99    MOV   [__r0],A
    0CEE: 52 F6    MOV   A,[X-10]
    0CF0: 04 98    ADD   [__r1],A
    0CF2: 52 F5    MOV   A,[X-11]
    0CF4: 0C 99    ADC   [__r0],A
    0CF6: 51 99    MOV   A,[__r0]
    0CF8: 60 D4    MOV   REG[0xD4],A
    0CFA: 3E 98    MVI   A,[__r1]
    0CFC: 54 40    MOV   [X+64],A
    0CFE: 3E 98    MVI   A,[__r1]
    0D00: 54 41    MOV   [X+65],A
    0D02: 3E 98    MVI   A,[__r1]
    0D04: 54 42    MOV   [X+66],A
    0D06: 3E 98    MVI   A,[__r1]
    0D08: 54 43    MOV   [X+67],A
(0037)          ty = y[i];
    0D0A: 52 00    MOV   A,[X+0]
    0D0C: 53 99    MOV   [__r0],A
    0D0E: 52 01    MOV   A,[X+1]
    0D10: 53 98    MOV   [__r1],A
    0D12: 52 02    MOV   A,[X+2]
    0D14: 53 97    MOV   [__r2],A
    0D16: 52 03    MOV   A,[X+3]
    0D18: 53 96    MOV   [__r3],A
    0D1A: 50 02    MOV   A,0x2
    0D1C: 62 D0 00 MOV   REG[0xD0],0x0
    0D1F: 65 96    ASL   [__r3]
    0D21: 6B 97    RLC   [__r2]
    0D23: 6B 98    RLC   [__r1]
    0D25: 6B 99    RLC   [__r0]
    0D27: 78       DEC   A
    0D28: BF F3    JNZ   0x0D1C
    0D2A: 51 96    MOV   A,[__r3]
    0D2C: 53 98    MOV   [__r1],A
    0D2E: 51 97    MOV   A,[__r2]
    0D30: 53 99    MOV   [__r0],A
    0D32: 52 F4    MOV   A,[X-12]
    0D34: 04 98    ADD   [__r1],A
    0D36: 52 F3    MOV   A,[X-13]
    0D38: 0C 99    ADC   [__r0],A
    0D3A: 51 99    MOV   A,[__r0]
    0D3C: 60 D4    MOV   REG[0xD4],A
    0D3E: 3E 98    MVI   A,[__r1]
    0D40: 54 44    MOV   [X+68],A
    0D42: 3E 98    MVI   A,[__r1]
    0D44: 54 45    MOV   [X+69],A
    0D46: 3E 98    MVI   A,[__r1]
    0D48: 54 46    MOV   [X+70],A
    0D4A: 3E 98    MVI   A,[__r1]
    0D4C: 54 47    MOV   [X+71],A
(0038)          x[i] = x[j];
    0D4E: 52 24    MOV   A,[X+36]
    0D50: 53 99    MOV   [__r0],A
    0D52: 52 25    MOV   A,[X+37]
    0D54: 53 98    MOV   [__r1],A
    0D56: 52 26    MOV   A,[X+38]
    0D58: 53 97    MOV   [__r2],A
    0D5A: 52 27    MOV   A,[X+39]
    0D5C: 53 96    MOV   [__r3],A
    0D5E: 50 02    MOV   A,0x2
    0D60: 62 D0 00 MOV   REG[0xD0],0x0
    0D63: 65 96    ASL   [__r3]
    0D65: 6B 97    RLC   [__r2]
    0D67: 6B 98    RLC   [__r1]
    0D69: 6B 99    RLC   [__r0]
    0D6B: 78       DEC   A
    0D6C: BF F3    JNZ   0x0D60
    0D6E: 51 96    MOV   A,[__r3]
    0D70: 53 98    MOV   [__r1],A
    0D72: 51 97    MOV   A,[__r2]
    0D74: 53 99    MOV   [__r0],A
    0D76: 52 F6    MOV   A,[X-10]
    0D78: 04 98    ADD   [__r1],A
    0D7A: 52 F5    MOV   A,[X-11]
    0D7C: 0C 99    ADC   [__r0],A
    0D7E: 51 99    MOV   A,[__r0]
    0D80: 60 D4    MOV   REG[0xD4],A
    0D82: 3E 98    MVI   A,[__r1]
    0D84: 53 95    MOV   [__r4],A
    0D86: 3E 98    MVI   A,[__r1]
    0D88: 53 94    MOV   [__r5],A
    0D8A: 3E 98    MVI   A,[__r1]
    0D8C: 53 93    MOV   [__r6],A
    0D8E: 3E 98    MVI   A,[__r1]
    0D90: 53 92    MOV   [__r7],A
    0D92: 52 00    MOV   A,[X+0]
    0D94: 53 99    MOV   [__r0],A
    0D96: 52 01    MOV   A,[X+1]
    0D98: 53 98    MOV   [__r1],A
    0D9A: 52 02    MOV   A,[X+2]
    0D9C: 53 97    MOV   [__r2],A
    0D9E: 52 03    MOV   A,[X+3]
    0DA0: 53 96    MOV   [__r3],A
    0DA2: 50 02    MOV   A,0x2
    0DA4: 62 D0 00 MOV   REG[0xD0],0x0
    0DA7: 65 96    ASL   [__r3]
    0DA9: 6B 97    RLC   [__r2]
    0DAB: 6B 98    RLC   [__r1]
    0DAD: 6B 99    RLC   [__r0]
    0DAF: 78       DEC   A
    0DB0: BF F3    JNZ   0x0DA4
    0DB2: 51 96    MOV   A,[__r3]
    0DB4: 53 98    MOV   [__r1],A
    0DB6: 51 97    MOV   A,[__r2]
    0DB8: 53 99    MOV   [__r0],A
    0DBA: 52 F6    MOV   A,[X-10]
    0DBC: 04 98    ADD   [__r1],A
    0DBE: 52 F5    MOV   A,[X-11]
    0DC0: 0C 99    ADC   [__r0],A
    0DC2: 51 99    MOV   A,[__r0]
    0DC4: 60 D5    MOV   REG[0xD5],A
    0DC6: 51 95    MOV   A,[__r4]
    0DC8: 3F 98    MVI   [__r1],A
    0DCA: 51 94    MOV   A,[__r5]
    0DCC: 3F 98    MVI   [__r1],A
    0DCE: 51 93    MOV   A,[__r6]
    0DD0: 3F 98    MVI   [__r1],A
    0DD2: 51 92    MOV   A,[__r7]
    0DD4: 3F 98    MVI   [__r1],A
(0039)          y[i] = y[j];
    0DD6: 52 24    MOV   A,[X+36]
    0DD8: 53 99    MOV   [__r0],A
    0DDA: 52 25    MOV   A,[X+37]
    0DDC: 53 98    MOV   [__r1],A
    0DDE: 52 26    MOV   A,[X+38]
    0DE0: 53 97    MOV   [__r2],A
    0DE2: 52 27    MOV   A,[X+39]
    0DE4: 53 96    MOV   [__r3],A
    0DE6: 50 02    MOV   A,0x2
    0DE8: 62 D0 00 MOV   REG[0xD0],0x0
    0DEB: 65 96    ASL   [__r3]
    0DED: 6B 97    RLC   [__r2]
    0DEF: 6B 98    RLC   [__r1]
    0DF1: 6B 99    RLC   [__r0]
    0DF3: 78       DEC   A
    0DF4: BF F3    JNZ   0x0DE8
    0DF6: 51 96    MOV   A,[__r3]
    0DF8: 53 98    MOV   [__r1],A
    0DFA: 51 97    MOV   A,[__r2]
    0DFC: 53 99    MOV   [__r0],A
    0DFE: 52 F4    MOV   A,[X-12]
    0E00: 04 98    ADD   [__r1],A
    0E02: 52 F3    MOV   A,[X-13]
    0E04: 0C 99    ADC   [__r0],A
    0E06: 51 99    MOV   A,[__r0]
    0E08: 60 D4    MOV   REG[0xD4],A
    0E0A: 3E 98    MVI   A,[__r1]
    0E0C: 53 95    MOV   [__r4],A
    0E0E: 3E 98    MVI   A,[__r1]
    0E10: 53 94    MOV   [__r5],A
    0E12: 3E 98    MVI   A,[__r1]
    0E14: 53 93    MOV   [__r6],A
    0E16: 3E 98    MVI   A,[__r1]
    0E18: 53 92    MOV   [__r7],A
    0E1A: 52 00    MOV   A,[X+0]
    0E1C: 53 99    MOV   [__r0],A
    0E1E: 52 01    MOV   A,[X+1]
    0E20: 53 98    MOV   [__r1],A
    0E22: 52 02    MOV   A,[X+2]
    0E24: 53 97    MOV   [__r2],A
    0E26: 52 03    MOV   A,[X+3]
    0E28: 53 96    MOV   [__r3],A
    0E2A: 50 02    MOV   A,0x2
    0E2C: 62 D0 00 MOV   REG[0xD0],0x0
    0E2F: 65 96    ASL   [__r3]
    0E31: 6B 97    RLC   [__r2]
    0E33: 6B 98    RLC   [__r1]
    0E35: 6B 99    RLC   [__r0]
    0E37: 78       DEC   A
    0E38: BF F3    JNZ   0x0E2C
    0E3A: 51 96    MOV   A,[__r3]
    0E3C: 53 98    MOV   [__r1],A
    0E3E: 51 97    MOV   A,[__r2]
    0E40: 53 99    MOV   [__r0],A
    0E42: 52 F4    MOV   A,[X-12]
    0E44: 04 98    ADD   [__r1],A
    0E46: 52 F3    MOV   A,[X-13]
    0E48: 0C 99    ADC   [__r0],A
    0E4A: 51 99    MOV   A,[__r0]
    0E4C: 60 D5    MOV   REG[0xD5],A
    0E4E: 51 95    MOV   A,[__r4]
    0E50: 3F 98    MVI   [__r1],A
    0E52: 51 94    MOV   A,[__r5]
    0E54: 3F 98    MVI   [__r1],A
    0E56: 51 93    MOV   A,[__r6]
    0E58: 3F 98    MVI   [__r1],A
    0E5A: 51 92    MOV   A,[__r7]
    0E5C: 3F 98    MVI   [__r1],A
(0040)          x[j] = tx;
    0E5E: 52 24    MOV   A,[X+36]
    0E60: 53 99    MOV   [__r0],A
    0E62: 52 25    MOV   A,[X+37]
    0E64: 53 98    MOV   [__r1],A
    0E66: 52 26    MOV   A,[X+38]
    0E68: 53 97    MOV   [__r2],A
    0E6A: 52 27    MOV   A,[X+39]
    0E6C: 53 96    MOV   [__r3],A
    0E6E: 50 02    MOV   A,0x2
    0E70: 62 D0 00 MOV   REG[0xD0],0x0
    0E73: 65 96    ASL   [__r3]
    0E75: 6B 97    RLC   [__r2]
    0E77: 6B 98    RLC   [__r1]
    0E79: 6B 99    RLC   [__r0]
    0E7B: 78       DEC   A
    0E7C: BF F3    JNZ   0x0E70
    0E7E: 51 96    MOV   A,[__r3]
    0E80: 53 98    MOV   [__r1],A
    0E82: 51 97    MOV   A,[__r2]
    0E84: 53 99    MOV   [__r0],A
    0E86: 52 F6    MOV   A,[X-10]
    0E88: 04 98    ADD   [__r1],A
    0E8A: 52 F5    MOV   A,[X-11]
    0E8C: 0C 99    ADC   [__r0],A
    0E8E: 51 99    MOV   A,[__r0]
    0E90: 60 D5    MOV   REG[0xD5],A
    0E92: 52 40    MOV   A,[X+64]
    0E94: 3F 98    MVI   [__r1],A
    0E96: 52 41    MOV   A,[X+65]
    0E98: 3F 98    MVI   [__r1],A
    0E9A: 52 42    MOV   A,[X+66]
    0E9C: 3F 98    MVI   [__r1],A
    0E9E: 52 43    MOV   A,[X+67]
    0EA0: 3F 98    MVI   [__r1],A
(0041)          y[j] = ty;
    0EA2: 52 24    MOV   A,[X+36]
    0EA4: 53 99    MOV   [__r0],A
    0EA6: 52 25    MOV   A,[X+37]
    0EA8: 53 98    MOV   [__r1],A
    0EAA: 52 26    MOV   A,[X+38]
    0EAC: 53 97    MOV   [__r2],A
    0EAE: 52 27    MOV   A,[X+39]
    0EB0: 53 96    MOV   [__r3],A
    0EB2: 50 02    MOV   A,0x2
    0EB4: 62 D0 00 MOV   REG[0xD0],0x0
    0EB7: 65 96    ASL   [__r3]
    0EB9: 6B 97    RLC   [__r2]
    0EBB: 6B 98    RLC   [__r1]
    0EBD: 6B 99    RLC   [__r0]
    0EBF: 78       DEC   A
    0EC0: BF F3    JNZ   0x0EB4
    0EC2: 51 96    MOV   A,[__r3]
    0EC4: 53 98    MOV   [__r1],A
    0EC6: 51 97    MOV   A,[__r2]
    0EC8: 53 99    MOV   [__r0],A
    0ECA: 52 F4    MOV   A,[X-12]
    0ECC: 04 98    ADD   [__r1],A
    0ECE: 52 F3    MOV   A,[X-13]
    0ED0: 0C 99    ADC   [__r0],A
    0ED2: 51 99    MOV   A,[__r0]
    0ED4: 60 D5    MOV   REG[0xD5],A
    0ED6: 52 44    MOV   A,[X+68]
    0ED8: 3F 98    MVI   [__r1],A
    0EDA: 52 45    MOV   A,[X+69]
    0EDC: 3F 98    MVI   [__r1],A
    0EDE: 52 46    MOV   A,[X+70]
    0EE0: 3F 98    MVI   [__r1],A
    0EE2: 52 47    MOV   A,[X+71]
    0EE4: 3F 98    MVI   [__r1],A
(0042)       }
(0043)       k = i2;
    0EE6: 52 3C    MOV   A,[X+60]
    0EE8: 54 28    MOV   [X+40],A
    0EEA: 52 3D    MOV   A,[X+61]
    0EEC: 54 29    MOV   [X+41],A
    0EEE: 52 3E    MOV   A,[X+62]
    0EF0: 54 2A    MOV   [X+42],A
    0EF2: 52 3F    MOV   A,[X+63]
    0EF4: 54 2B    MOV   [X+43],A
    0EF6: 80 19    JMP   0x0F10
(0044)       while (k <= j) {
(0045)          j -= k;
    0EF8: 52 2B    MOV   A,[X+43]
    0EFA: 15 27    SUB   [X+39],A
    0EFC: 52 2A    MOV   A,[X+42]
    0EFE: 1D 26    SBB   [X+38],A
    0F00: 52 29    MOV   A,[X+41]
    0F02: 1D 25    SBB   [X+37],A
    0F04: 52 28    MOV   A,[X+40]
    0F06: 1D 24    SBB   [X+36],A
(0046)          k >>= 1;
    0F08: 69 28    ASR   [X+40]
    0F0A: 6F 29    RRC   [X+41]
    0F0C: 6F 2A    RRC   [X+42]
    0F0E: 6F 2B    RRC   [X+43]
(0047)       }
    0F10: 52 27    MOV   A,[X+39]
    0F12: 13 2B    SUB   A,[X+43]
    0F14: 52 26    MOV   A,[X+38]
    0F16: 1B 2A    SBB   A,[X+42]
    0F18: 52 25    MOV   A,[X+37]
    0F1A: 1B 29    SBB   A,[X+41]
    0F1C: 52 28    MOV   A,[X+40]
    0F1E: 31 80    XOR   A,0x80
    0F20: 62 D0 00 MOV   REG[0xD0],0x0
    0F23: 53 8D    MOV   [__rX],A
    0F25: 52 24    MOV   A,[X+36]
    0F27: 31 80    XOR   A,0x80
    0F29: 1A 8D    SBB   A,[__rX]
    0F2B: DF CC    JNC   0x0EF8
(0048)       j += k;
    0F2D: 52 2B    MOV   A,[X+43]
    0F2F: 05 27    ADD   [X+39],A
    0F31: 52 2A    MOV   A,[X+42]
    0F33: 0D 26    ADC   [X+38],A
    0F35: 52 29    MOV   A,[X+41]
    0F37: 0D 25    ADC   [X+37],A
    0F39: 52 28    MOV   A,[X+40]
    0F3B: 0D 24    ADC   [X+36],A
(0049)    }
    0F3D: 07 03 01 ADD   [X+3],0x1
    0F40: 0F 02 00 ADC   [X+2],0x0
    0F43: 0F 01 00 ADC   [X+1],0x0
    0F46: 0F 00 00 ADC   [X+0],0x0
    0F49: 62 D0 00 MOV   REG[0xD0],0x0
    0F4C: 52 1F    MOV   A,[X+31]
    0F4E: 11 01    SUB   A,0x1
    0F50: 53 96    MOV   [__r3],A
    0F52: 52 1E    MOV   A,[X+30]
    0F54: 19 00    SBB   A,0x0
    0F56: 53 97    MOV   [__r2],A
    0F58: 52 1D    MOV   A,[X+29]
    0F5A: 19 00    SBB   A,0x0
    0F5C: 53 98    MOV   [__r1],A
    0F5E: 52 1C    MOV   A,[X+28]
    0F60: 19 00    SBB   A,0x0
    0F62: 53 99    MOV   [__r0],A
    0F64: 52 03    MOV   A,[X+3]
    0F66: 12 96    SUB   A,[__r3]
    0F68: 52 02    MOV   A,[X+2]
    0F6A: 1A 97    SBB   A,[__r2]
    0F6C: 52 01    MOV   A,[X+1]
    0F6E: 1A 98    SBB   A,[__r1]
    0F70: 51 99    MOV   A,[__r0]
    0F72: 31 80    XOR   A,0x80
    0F74: 53 8D    MOV   [__rX],A
    0F76: 52 00    MOV   A,[X+0]
    0F78: 31 80    XOR   A,0x80
    0F7A: 1A 8D    SBB   A,[__rX]
    0F7C: CD 29    JC    0x0CA6
(0050) 
(0051)    /* Compute the FFT */
(0052)    c1 = -1.0; 
    0F7E: 56 2C BF MOV   [X+44],0xBF
    0F81: 56 2D 80 MOV   [X+45],0x80
    0F84: 56 2E 00 MOV   [X+46],0x0
    0F87: 56 2F 00 MOV   [X+47],0x0
(0053)    c2 = 0.0;
    0F8A: 56 30 00 MOV   [X+48],0x0
    0F8D: 56 31 00 MOV   [X+49],0x0
    0F90: 56 32 00 MOV   [X+50],0x0
    0F93: 56 33 00 MOV   [X+51],0x0
(0054)    l2 = 1;
    0F96: 56 20 00 MOV   [X+32],0x0
    0F99: 56 21 00 MOV   [X+33],0x0
    0F9C: 56 22 00 MOV   [X+34],0x0
    0F9F: 56 23 01 MOV   [X+35],0x1
(0055)    for (l=0;l<m;l++) {
    0FA2: 56 38 00 MOV   [X+56],0x0
    0FA5: 56 39 00 MOV   [X+57],0x0
    0FA8: 56 3A 00 MOV   [X+58],0x0
    0FAB: 56 3B 00 MOV   [X+59],0x0
    0FAE: 86 E2    JMP   0x1691
(0056)       l1 = l2;
    0FB0: 52 20    MOV   A,[X+32]
    0FB2: 54 18    MOV   [X+24],A
    0FB4: 52 21    MOV   A,[X+33]
    0FB6: 54 19    MOV   [X+25],A
    0FB8: 52 22    MOV   A,[X+34]
    0FBA: 54 1A    MOV   [X+26],A
    0FBC: 52 23    MOV   A,[X+35]
    0FBE: 54 1B    MOV   [X+27],A
(0057)       l2 <<= 1;
    0FC0: 66 23    ASL   [X+35]
    0FC2: 6C 22    RLC   [X+34]
    0FC4: 6C 21    RLC   [X+33]
    0FC6: 6C 20    RLC   [X+32]
(0058)       u1 = 1.0; 
    0FC8: 56 10 3F MOV   [X+16],0x3F
    0FCB: 56 11 80 MOV   [X+17],0x80
    0FCE: 56 12 00 MOV   [X+18],0x0
    0FD1: 56 13 00 MOV   [X+19],0x0
(0059)       u2 = 0.0;
    0FD4: 56 14 00 MOV   [X+20],0x0
    0FD7: 56 15 00 MOV   [X+21],0x0
    0FDA: 56 16 00 MOV   [X+22],0x0
    0FDD: 56 17 00 MOV   [X+23],0x0
(0060)       for (j=0;j<l1;j++) {
    0FE0: 56 24 00 MOV   [X+36],0x0
    0FE3: 56 25 00 MOV   [X+37],0x0
    0FE6: 56 26 00 MOV   [X+38],0x0
    0FE9: 56 27 00 MOV   [X+39],0x0
    0FEC: 85 90    JMP   0x157D
(0061)          for (i=j;i<n;i+=l2) {
    0FEE: 52 24    MOV   A,[X+36]
    0FF0: 54 00    MOV   [X+0],A
    0FF2: 52 25    MOV   A,[X+37]
    0FF4: 54 01    MOV   [X+1],A
    0FF6: 52 26    MOV   A,[X+38]
    0FF8: 54 02    MOV   [X+2],A
    0FFA: 52 27    MOV   A,[X+39]
    0FFC: 54 03    MOV   [X+3],A
    0FFE: 84 4C    JMP   0x144B
(0062)             i1 = i + l1;
    1000: 52 03    MOV   A,[X+3]
    1002: 03 1B    ADD   A,[X+27]
    1004: 54 07    MOV   [X+7],A
    1006: 52 02    MOV   A,[X+2]
    1008: 0B 1A    ADC   A,[X+26]
    100A: 54 06    MOV   [X+6],A
    100C: 52 01    MOV   A,[X+1]
    100E: 0B 19    ADC   A,[X+25]
    1010: 54 05    MOV   [X+5],A
    1012: 52 00    MOV   A,[X+0]
    1014: 0B 18    ADC   A,[X+24]
    1016: 54 04    MOV   [X+4],A
(0063)             t1 = u1 * x[i1] - u2 * y[i1];
    1018: 62 D0 00 MOV   REG[0xD0],0x0
    101B: 52 04    MOV   A,[X+4]
    101D: 53 99    MOV   [__r0],A
    101F: 52 05    MOV   A,[X+5]
    1021: 53 98    MOV   [__r1],A
    1023: 52 06    MOV   A,[X+6]
    1025: 53 97    MOV   [__r2],A
    1027: 52 07    MOV   A,[X+7]
    1029: 53 96    MOV   [__r3],A
    102B: 50 02    MOV   A,0x2
    102D: 62 D0 00 MOV   REG[0xD0],0x0
    1030: 65 96    ASL   [__r3]
    1032: 6B 97    RLC   [__r2]
    1034: 6B 98    RLC   [__r1]
    1036: 6B 99    RLC   [__r0]
    1038: 78       DEC   A
    1039: BF F3    JNZ   0x102D
    103B: 51 96    MOV   A,[__r3]
    103D: 53 98    MOV   [__r1],A
    103F: 51 97    MOV   A,[__r2]
    1041: 53 99    MOV   [__r0],A
    1043: 51 98    MOV   A,[__r1]
    1045: 03 F4    ADD   A,[X-12]
    1047: 53 96    MOV   [__r3],A
    1049: 51 99    MOV   A,[__r0]
    104B: 0B F3    ADC   A,[X-13]
    104D: 60 D4    MOV   REG[0xD4],A
    104F: 3E 96    MVI   A,[__r3]
    1051: 53 95    MOV   [__r4],A
    1053: 3E 96    MVI   A,[__r3]
    1055: 53 94    MOV   [__r5],A
    1057: 3E 96    MVI   A,[__r3]
    1059: 53 93    MOV   [__r6],A
    105B: 3E 96    MVI   A,[__r3]
    105D: 53 92    MOV   [__r7],A
    105F: 51 95    MOV   A,[__r4]
    1061: 08       PUSH  A
    1062: 51 94    MOV   A,[__r5]
    1064: 08       PUSH  A
    1065: 51 93    MOV   A,[__r6]
    1067: 08       PUSH  A
    1068: 51 92    MOV   A,[__r7]
    106A: 08       PUSH  A
    106B: 52 14    MOV   A,[X+20]
    106D: 08       PUSH  A
    106E: 52 15    MOV   A,[X+21]
    1070: 08       PUSH  A
    1071: 52 16    MOV   A,[X+22]
    1073: 08       PUSH  A
    1074: 52 17    MOV   A,[X+23]
    1076: 08       PUSH  A
    1077: 7C 3B 4B LCALL 0x3B4B
    107A: 18       POP   A
    107B: 53 92    MOV   [__r7],A
    107D: 18       POP   A
    107E: 53 93    MOV   [__r6],A
    1080: 18       POP   A
    1081: 53 94    MOV   [__r5],A
    1083: 18       POP   A
    1084: 53 95    MOV   [__r4],A
    1086: 38 FC    ADD   SP,0xFC
    1088: 52 F6    MOV   A,[X-10]
    108A: 04 98    ADD   [__r1],A
    108C: 52 F5    MOV   A,[X-11]
    108E: 0C 99    ADC   [__r0],A
    1090: 51 99    MOV   A,[__r0]
    1092: 60 D4    MOV   REG[0xD4],A
    1094: 3E 98    MVI   A,[__r1]
    1096: 53 91    MOV   [__r8],A
    1098: 3E 98    MVI   A,[__r1]
    109A: 53 90    MOV   [__r9],A
    109C: 3E 98    MVI   A,[__r1]
    109E: 53 8F    MOV   [__r10],A
    10A0: 3E 98    MVI   A,[__r1]
    10A2: 53 8E    MOV   [__r11],A
    10A4: 51 91    MOV   A,[__r8]
    10A6: 08       PUSH  A
    10A7: 51 90    MOV   A,[__r9]
    10A9: 08       PUSH  A
    10AA: 51 8F    MOV   A,[__r10]
    10AC: 08       PUSH  A
    10AD: 51 8E    MOV   A,[__r11]
    10AF: 08       PUSH  A
    10B0: 52 10    MOV   A,[X+16]
    10B2: 08       PUSH  A
    10B3: 52 11    MOV   A,[X+17]
    10B5: 08       PUSH  A
    10B6: 52 12    MOV   A,[X+18]
    10B8: 08       PUSH  A
    10B9: 52 13    MOV   A,[X+19]
    10BB: 08       PUSH  A
    10BC: 7C 3B 4B LCALL 0x3B4B
    10BF: 18       POP   A
    10C0: 53 96    MOV   [__r3],A
    10C2: 18       POP   A
    10C3: 53 97    MOV   [__r2],A
    10C5: 18       POP   A
    10C6: 53 98    MOV   [__r1],A
    10C8: 18       POP   A
    10C9: 53 99    MOV   [__r0],A
    10CB: 38 FC    ADD   SP,0xFC
    10CD: 51 95    MOV   A,[__r4]
    10CF: 08       PUSH  A
    10D0: 51 94    MOV   A,[__r5]
    10D2: 08       PUSH  A
    10D3: 51 93    MOV   A,[__r6]
    10D5: 08       PUSH  A
    10D6: 51 92    MOV   A,[__r7]
    10D8: 08       PUSH  A
    10D9: 51 99    MOV   A,[__r0]
    10DB: 08       PUSH  A
    10DC: 51 98    MOV   A,[__r1]
    10DE: 08       PUSH  A
    10DF: 51 97    MOV   A,[__r2]
    10E1: 08       PUSH  A
    10E2: 51 96    MOV   A,[__r3]
    10E4: 08       PUSH  A
    10E5: 7C 3C 75 LCALL 0x3C75
    10E8: 18       POP   A
    10E9: 54 0B    MOV   [X+11],A
    10EB: 18       POP   A
    10EC: 54 0A    MOV   [X+10],A
    10EE: 18       POP   A
    10EF: 54 09    MOV   [X+9],A
    10F1: 18       POP   A
    10F2: 54 08    MOV   [X+8],A
    10F4: 38 FC    ADD   SP,0xFC
(0064)             t2 = u1 * y[i1] + u2 * x[i1];
    10F6: 52 04    MOV   A,[X+4]
    10F8: 53 99    MOV   [__r0],A
    10FA: 52 05    MOV   A,[X+5]
    10FC: 53 98    MOV   [__r1],A
    10FE: 52 06    MOV   A,[X+6]
    1100: 53 97    MOV   [__r2],A
    1102: 52 07    MOV   A,[X+7]
    1104: 53 96    MOV   [__r3],A
    1106: 50 02    MOV   A,0x2
    1108: 62 D0 00 MOV   REG[0xD0],0x0
    110B: 65 96    ASL   [__r3]
    110D: 6B 97    RLC   [__r2]
    110F: 6B 98    RLC   [__r1]
    1111: 6B 99    RLC   [__r0]
    1113: 78       DEC   A
    1114: BF F3    JNZ   0x1108
    1116: 51 96    MOV   A,[__r3]
    1118: 53 98    MOV   [__r1],A
    111A: 51 97    MOV   A,[__r2]
    111C: 53 99    MOV   [__r0],A
    111E: 51 98    MOV   A,[__r1]
    1120: 03 F6    ADD   A,[X-10]
    1122: 53 96    MOV   [__r3],A
    1124: 51 99    MOV   A,[__r0]
    1126: 0B F5    ADC   A,[X-11]
    1128: 60 D4    MOV   REG[0xD4],A
    112A: 3E 96    MVI   A,[__r3]
    112C: 53 95    MOV   [__r4],A
    112E: 3E 96    MVI   A,[__r3]
    1130: 53 94    MOV   [__r5],A
    1132: 3E 96    MVI   A,[__r3]
    1134: 53 93    MOV   [__r6],A
    1136: 3E 96    MVI   A,[__r3]
    1138: 53 92    MOV   [__r7],A
    113A: 51 95    MOV   A,[__r4]
    113C: 08       PUSH  A
    113D: 51 94    MOV   A,[__r5]
    113F: 08       PUSH  A
    1140: 51 93    MOV   A,[__r6]
    1142: 08       PUSH  A
    1143: 51 92    MOV   A,[__r7]
    1145: 08       PUSH  A
    1146: 52 14    MOV   A,[X+20]
    1148: 08       PUSH  A
    1149: 52 15    MOV   A,[X+21]
    114B: 08       PUSH  A
    114C: 52 16    MOV   A,[X+22]
    114E: 08       PUSH  A
    114F: 52 17    MOV   A,[X+23]
    1151: 08       PUSH  A
    1152: 7C 3B 4B LCALL 0x3B4B
    1155: 18       POP   A
    1156: 53 92    MOV   [__r7],A
    1158: 18       POP   A
    1159: 53 93    MOV   [__r6],A
    115B: 18       POP   A
    115C: 53 94    MOV   [__r5],A
    115E: 18       POP   A
    115F: 53 95    MOV   [__r4],A
    1161: 38 FC    ADD   SP,0xFC
    1163: 52 F4    MOV   A,[X-12]
    1165: 04 98    ADD   [__r1],A
    1167: 52 F3    MOV   A,[X-13]
    1169: 0C 99    ADC   [__r0],A
    116B: 51 99    MOV   A,[__r0]
    116D: 60 D4    MOV   REG[0xD4],A
    116F: 3E 98    MVI   A,[__r1]
    1171: 53 91    MOV   [__r8],A
    1173: 3E 98    MVI   A,[__r1]
    1175: 53 90    MOV   [__r9],A
    1177: 3E 98    MVI   A,[__r1]
    1179: 53 8F    MOV   [__r10],A
    117B: 3E 98    MVI   A,[__r1]
    117D: 53 8E    MOV   [__r11],A
    117F: 51 91    MOV   A,[__r8]
    1181: 08       PUSH  A
    1182: 51 90    MOV   A,[__r9]
    1184: 08       PUSH  A
    1185: 51 8F    MOV   A,[__r10]
    1187: 08       PUSH  A
    1188: 51 8E    MOV   A,[__r11]
    118A: 08       PUSH  A
    118B: 52 10    MOV   A,[X+16]
    118D: 08       PUSH  A
    118E: 52 11    MOV   A,[X+17]
    1190: 08       PUSH  A
    1191: 52 12    MOV   A,[X+18]
    1193: 08       PUSH  A
    1194: 52 13    MOV   A,[X+19]
    1196: 08       PUSH  A
    1197: 7C 3B 4B LCALL 0x3B4B
    119A: 18       POP   A
    119B: 53 96    MOV   [__r3],A
    119D: 18       POP   A
    119E: 53 97    MOV   [__r2],A
    11A0: 18       POP   A
    11A1: 53 98    MOV   [__r1],A
    11A3: 18       POP   A
    11A4: 53 99    MOV   [__r0],A
    11A6: 38 FC    ADD   SP,0xFC
    11A8: 51 95    MOV   A,[__r4]
    11AA: 08       PUSH  A
    11AB: 51 94    MOV   A,[__r5]
    11AD: 08       PUSH  A
    11AE: 51 93    MOV   A,[__r6]
    11B0: 08       PUSH  A
    11B1: 51 92    MOV   A,[__r7]
    11B3: 08       PUSH  A
    11B4: 51 99    MOV   A,[__r0]
    11B6: 08       PUSH  A
    11B7: 51 98    MOV   A,[__r1]
    11B9: 08       PUSH  A
    11BA: 51 97    MOV   A,[__r2]
    11BC: 08       PUSH  A
    11BD: 51 96    MOV   A,[__r3]
    11BF: 08       PUSH  A
    11C0: 7C 39 0B LCALL 0x390B
    11C3: 18       POP   A
    11C4: 54 0F    MOV   [X+15],A
    11C6: 18       POP   A
    11C7: 54 0E    MOV   [X+14],A
    11C9: 18       POP   A
    11CA: 54 0D    MOV   [X+13],A
    11CC: 18       POP   A
    11CD: 54 0C    MOV   [X+12],A
    11CF: 38 FC    ADD   SP,0xFC
(0065)             x[i1] = x[i] - t1; 
    11D1: 52 00    MOV   A,[X+0]
    11D3: 53 99    MOV   [__r0],A
    11D5: 52 01    MOV   A,[X+1]
    11D7: 53 98    MOV   [__r1],A
    11D9: 52 02    MOV   A,[X+2]
    11DB: 53 97    MOV   [__r2],A
    11DD: 52 03    MOV   A,[X+3]
    11DF: 53 96    MOV   [__r3],A
    11E1: 50 02    MOV   A,0x2
    11E3: 62 D0 00 MOV   REG[0xD0],0x0
    11E6: 65 96    ASL   [__r3]
    11E8: 6B 97    RLC   [__r2]
    11EA: 6B 98    RLC   [__r1]
    11EC: 6B 99    RLC   [__r0]
    11EE: 78       DEC   A
    11EF: BF F3    JNZ   0x11E3
    11F1: 51 96    MOV   A,[__r3]
    11F3: 53 98    MOV   [__r1],A
    11F5: 51 97    MOV   A,[__r2]
    11F7: 53 99    MOV   [__r0],A
    11F9: 52 F6    MOV   A,[X-10]
    11FB: 04 98    ADD   [__r1],A
    11FD: 52 F5    MOV   A,[X-11]
    11FF: 0C 99    ADC   [__r0],A
    1201: 51 99    MOV   A,[__r0]
    1203: 60 D4    MOV   REG[0xD4],A
    1205: 3E 98    MVI   A,[__r1]
    1207: 53 95    MOV   [__r4],A
    1209: 3E 98    MVI   A,[__r1]
    120B: 53 94    MOV   [__r5],A
    120D: 3E 98    MVI   A,[__r1]
    120F: 53 93    MOV   [__r6],A
    1211: 3E 98    MVI   A,[__r1]
    1213: 53 92    MOV   [__r7],A
    1215: 52 08    MOV   A,[X+8]
    1217: 08       PUSH  A
    1218: 52 09    MOV   A,[X+9]
    121A: 08       PUSH  A
    121B: 52 0A    MOV   A,[X+10]
    121D: 08       PUSH  A
    121E: 52 0B    MOV   A,[X+11]
    1220: 08       PUSH  A
    1221: 51 95    MOV   A,[__r4]
    1223: 08       PUSH  A
    1224: 51 94    MOV   A,[__r5]
    1226: 08       PUSH  A
    1227: 51 93    MOV   A,[__r6]
    1229: 08       PUSH  A
    122A: 51 92    MOV   A,[__r7]
    122C: 08       PUSH  A
    122D: 7C 3C 75 LCALL 0x3C75
    1230: 18       POP   A
    1231: 53 96    MOV   [__r3],A
    1233: 18       POP   A
    1234: 53 97    MOV   [__r2],A
    1236: 18       POP   A
    1237: 53 98    MOV   [__r1],A
    1239: 18       POP   A
    123A: 53 99    MOV   [__r0],A
    123C: 38 FC    ADD   SP,0xFC
    123E: 52 04    MOV   A,[X+4]
    1240: 53 95    MOV   [__r4],A
    1242: 52 05    MOV   A,[X+5]
    1244: 53 94    MOV   [__r5],A
    1246: 52 06    MOV   A,[X+6]
    1248: 53 93    MOV   [__r6],A
    124A: 52 07    MOV   A,[X+7]
    124C: 53 92    MOV   [__r7],A
    124E: 50 02    MOV   A,0x2
    1250: 62 D0 00 MOV   REG[0xD0],0x0
    1253: 65 92    ASL   [__r7]
    1255: 6B 93    RLC   [__r6]
    1257: 6B 94    RLC   [__r5]
    1259: 6B 95    RLC   [__r4]
    125B: 78       DEC   A
    125C: BF F3    JNZ   0x1250
    125E: 51 92    MOV   A,[__r7]
    1260: 53 94    MOV   [__r5],A
    1262: 51 93    MOV   A,[__r6]
    1264: 53 95    MOV   [__r4],A
    1266: 52 F6    MOV   A,[X-10]
    1268: 04 94    ADD   [__r5],A
    126A: 52 F5    MOV   A,[X-11]
    126C: 0C 95    ADC   [__r4],A
    126E: 51 95    MOV   A,[__r4]
    1270: 60 D5    MOV   REG[0xD5],A
    1272: 51 99    MOV   A,[__r0]
    1274: 3F 94    MVI   [__r5],A
    1276: 51 98    MOV   A,[__r1]
    1278: 3F 94    MVI   [__r5],A
    127A: 51 97    MOV   A,[__r2]
    127C: 3F 94    MVI   [__r5],A
    127E: 51 96    MOV   A,[__r3]
    1280: 3F 94    MVI   [__r5],A
(0066)             y[i1] = y[i] - t2;
    1282: 52 00    MOV   A,[X+0]
    1284: 53 99    MOV   [__r0],A
    1286: 52 01    MOV   A,[X+1]
    1288: 53 98    MOV   [__r1],A
    128A: 52 02    MOV   A,[X+2]
    128C: 53 97    MOV   [__r2],A
    128E: 52 03    MOV   A,[X+3]
    1290: 53 96    MOV   [__r3],A
    1292: 50 02    MOV   A,0x2
    1294: 62 D0 00 MOV   REG[0xD0],0x0
    1297: 65 96    ASL   [__r3]
    1299: 6B 97    RLC   [__r2]
    129B: 6B 98    RLC   [__r1]
    129D: 6B 99    RLC   [__r0]
    129F: 78       DEC   A
    12A0: BF F3    JNZ   0x1294
    12A2: 51 96    MOV   A,[__r3]
    12A4: 53 98    MOV   [__r1],A
    12A6: 51 97    MOV   A,[__r2]
    12A8: 53 99    MOV   [__r0],A
    12AA: 52 F4    MOV   A,[X-12]
    12AC: 04 98    ADD   [__r1],A
    12AE: 52 F3    MOV   A,[X-13]
    12B0: 0C 99    ADC   [__r0],A
    12B2: 51 99    MOV   A,[__r0]
    12B4: 60 D4    MOV   REG[0xD4],A
    12B6: 3E 98    MVI   A,[__r1]
    12B8: 53 95    MOV   [__r4],A
    12BA: 3E 98    MVI   A,[__r1]
    12BC: 53 94    MOV   [__r5],A
    12BE: 3E 98    MVI   A,[__r1]
    12C0: 53 93    MOV   [__r6],A
    12C2: 3E 98    MVI   A,[__r1]
    12C4: 53 92    MOV   [__r7],A
    12C6: 52 0C    MOV   A,[X+12]
    12C8: 08       PUSH  A
    12C9: 52 0D    MOV   A,[X+13]
    12CB: 08       PUSH  A
    12CC: 52 0E    MOV   A,[X+14]
    12CE: 08       PUSH  A
    12CF: 52 0F    MOV   A,[X+15]
    12D1: 08       PUSH  A
    12D2: 51 95    MOV   A,[__r4]
    12D4: 08       PUSH  A
    12D5: 51 94    MOV   A,[__r5]
    12D7: 08       PUSH  A
    12D8: 51 93    MOV   A,[__r6]
    12DA: 08       PUSH  A
    12DB: 51 92    MOV   A,[__r7]
    12DD: 08       PUSH  A
    12DE: 7C 3C 75 LCALL 0x3C75
    12E1: 18       POP   A
    12E2: 53 96    MOV   [__r3],A
    12E4: 18       POP   A
    12E5: 53 97    MOV   [__r2],A
    12E7: 18       POP   A
    12E8: 53 98    MOV   [__r1],A
    12EA: 18       POP   A
    12EB: 53 99    MOV   [__r0],A
    12ED: 38 FC    ADD   SP,0xFC
    12EF: 52 04    MOV   A,[X+4]
    12F1: 53 95    MOV   [__r4],A
    12F3: 52 05    MOV   A,[X+5]
    12F5: 53 94    MOV   [__r5],A
    12F7: 52 06    MOV   A,[X+6]
    12F9: 53 93    MOV   [__r6],A
    12FB: 52 07    MOV   A,[X+7]
    12FD: 53 92    MOV   [__r7],A
    12FF: 50 02    MOV   A,0x2
    1301: 62 D0 00 MOV   REG[0xD0],0x0
    1304: 65 92    ASL   [__r7]
    1306: 6B 93    RLC   [__r6]
    1308: 6B 94    RLC   [__r5]
    130A: 6B 95    RLC   [__r4]
    130C: 78       DEC   A
    130D: BF F3    JNZ   0x1301
    130F: 51 92    MOV   A,[__r7]
    1311: 53 94    MOV   [__r5],A
    1313: 51 93    MOV   A,[__r6]
    1315: 53 95    MOV   [__r4],A
    1317: 52 F4    MOV   A,[X-12]
    1319: 04 94    ADD   [__r5],A
    131B: 52 F3    MOV   A,[X-13]
    131D: 0C 95    ADC   [__r4],A
    131F: 51 95    MOV   A,[__r4]
    1321: 60 D5    MOV   REG[0xD5],A
    1323: 51 99    MOV   A,[__r0]
    1325: 3F 94    MVI   [__r5],A
    1327: 51 98    MOV   A,[__r1]
    1329: 3F 94    MVI   [__r5],A
    132B: 51 97    MOV   A,[__r2]
    132D: 3F 94    MVI   [__r5],A
    132F: 51 96    MOV   A,[__r3]
    1331: 3F 94    MVI   [__r5],A
(0067)             x[i] += t1;
    1333: 52 00    MOV   A,[X+0]
    1335: 53 99    MOV   [__r0],A
    1337: 52 01    MOV   A,[X+1]
    1339: 53 98    MOV   [__r1],A
    133B: 52 02    MOV   A,[X+2]
    133D: 53 97    MOV   [__r2],A
    133F: 52 03    MOV   A,[X+3]
    1341: 53 96    MOV   [__r3],A
    1343: 50 02    MOV   A,0x2
    1345: 62 D0 00 MOV   REG[0xD0],0x0
    1348: 65 96    ASL   [__r3]
    134A: 6B 97    RLC   [__r2]
    134C: 6B 98    RLC   [__r1]
    134E: 6B 99    RLC   [__r0]
    1350: 78       DEC   A
    1351: BF F3    JNZ   0x1345
    1353: 51 96    MOV   A,[__r3]
    1355: 53 98    MOV   [__r1],A
    1357: 51 97    MOV   A,[__r2]
    1359: 53 99    MOV   [__r0],A
    135B: 52 F6    MOV   A,[X-10]
    135D: 04 98    ADD   [__r1],A
    135F: 52 F5    MOV   A,[X-11]
    1361: 0C 99    ADC   [__r0],A
    1363: 51 99    MOV   A,[__r0]
    1365: 60 D4    MOV   REG[0xD4],A
    1367: 3E 98    MVI   A,[__r1]
    1369: 53 95    MOV   [__r4],A
    136B: 3E 98    MVI   A,[__r1]
    136D: 53 94    MOV   [__r5],A
    136F: 3E 98    MVI   A,[__r1]
    1371: 53 93    MOV   [__r6],A
    1373: 3E 98    MVI   A,[__r1]
    1375: 16 98 04 SUB   [__r1],0x4
    1378: 53 92    MOV   [__r7],A
    137A: 52 08    MOV   A,[X+8]
    137C: 08       PUSH  A
    137D: 52 09    MOV   A,[X+9]
    137F: 08       PUSH  A
    1380: 52 0A    MOV   A,[X+10]
    1382: 08       PUSH  A
    1383: 52 0B    MOV   A,[X+11]
    1385: 08       PUSH  A
    1386: 51 95    MOV   A,[__r4]
    1388: 08       PUSH  A
    1389: 51 94    MOV   A,[__r5]
    138B: 08       PUSH  A
    138C: 51 93    MOV   A,[__r6]
    138E: 08       PUSH  A
    138F: 51 92    MOV   A,[__r7]
    1391: 08       PUSH  A
    1392: 7C 39 0B LCALL 0x390B
    1395: 18       POP   A
    1396: 53 92    MOV   [__r7],A
    1398: 18       POP   A
    1399: 53 93    MOV   [__r6],A
    139B: 18       POP   A
    139C: 53 94    MOV   [__r5],A
    139E: 18       POP   A
    139F: 53 95    MOV   [__r4],A
    13A1: 38 FC    ADD   SP,0xFC
    13A3: 51 99    MOV   A,[__r0]
    13A5: 60 D5    MOV   REG[0xD5],A
    13A7: 51 95    MOV   A,[__r4]
    13A9: 3F 98    MVI   [__r1],A
    13AB: 51 94    MOV   A,[__r5]
    13AD: 3F 98    MVI   [__r1],A
    13AF: 51 93    MOV   A,[__r6]
    13B1: 3F 98    MVI   [__r1],A
    13B3: 51 92    MOV   A,[__r7]
    13B5: 3F 98    MVI   [__r1],A
(0068)             y[i] += t2;
    13B7: 52 00    MOV   A,[X+0]
    13B9: 53 99    MOV   [__r0],A
    13BB: 52 01    MOV   A,[X+1]
    13BD: 53 98    MOV   [__r1],A
    13BF: 52 02    MOV   A,[X+2]
    13C1: 53 97    MOV   [__r2],A
    13C3: 52 03    MOV   A,[X+3]
    13C5: 53 96    MOV   [__r3],A
    13C7: 50 02    MOV   A,0x2
    13C9: 62 D0 00 MOV   REG[0xD0],0x0
    13CC: 65 96    ASL   [__r3]
    13CE: 6B 97    RLC   [__r2]
    13D0: 6B 98    RLC   [__r1]
    13D2: 6B 99    RLC   [__r0]
    13D4: 78       DEC   A
    13D5: BF F3    JNZ   0x13C9
    13D7: 51 96    MOV   A,[__r3]
    13D9: 53 98    MOV   [__r1],A
    13DB: 51 97    MOV   A,[__r2]
    13DD: 53 99    MOV   [__r0],A
    13DF: 52 F4    MOV   A,[X-12]
    13E1: 04 98    ADD   [__r1],A
    13E3: 52 F3    MOV   A,[X-13]
    13E5: 0C 99    ADC   [__r0],A
    13E7: 51 99    MOV   A,[__r0]
    13E9: 60 D4    MOV   REG[0xD4],A
    13EB: 3E 98    MVI   A,[__r1]
    13ED: 53 95    MOV   [__r4],A
    13EF: 3E 98    MVI   A,[__r1]
    13F1: 53 94    MOV   [__r5],A
    13F3: 3E 98    MVI   A,[__r1]
    13F5: 53 93    MOV   [__r6],A
    13F7: 3E 98    MVI   A,[__r1]
    13F9: 16 98 04 SUB   [__r1],0x4
    13FC: 53 92    MOV   [__r7],A
    13FE: 52 0C    MOV   A,[X+12]
    1400: 08       PUSH  A
    1401: 52 0D    MOV   A,[X+13]
    1403: 08       PUSH  A
    1404: 52 0E    MOV   A,[X+14]
    1406: 08       PUSH  A
    1407: 52 0F    MOV   A,[X+15]
    1409: 08       PUSH  A
    140A: 51 95    MOV   A,[__r4]
    140C: 08       PUSH  A
    140D: 51 94    MOV   A,[__r5]
    140F: 08       PUSH  A
    1410: 51 93    MOV   A,[__r6]
    1412: 08       PUSH  A
    1413: 51 92    MOV   A,[__r7]
    1415: 08       PUSH  A
    1416: 7C 39 0B LCALL 0x390B
    1419: 18       POP   A
    141A: 53 92    MOV   [__r7],A
    141C: 18       POP   A
    141D: 53 93    MOV   [__r6],A
    141F: 18       POP   A
    1420: 53 94    MOV   [__r5],A
    1422: 18       POP   A
    1423: 53 95    MOV   [__r4],A
    1425: 38 FC    ADD   SP,0xFC
    1427: 51 99    MOV   A,[__r0]
    1429: 60 D5    MOV   REG[0xD5],A
    142B: 51 95    MOV   A,[__r4]
    142D: 3F 98    MVI   [__r1],A
    142F: 51 94    MOV   A,[__r5]
    1431: 3F 98    MVI   [__r1],A
    1433: 51 93    MOV   A,[__r6]
    1435: 3F 98    MVI   [__r1],A
    1437: 51 92    MOV   A,[__r7]
    1439: 3F 98    MVI   [__r1],A
(0069)          }
    143B: 52 23    MOV   A,[X+35]
    143D: 05 03    ADD   [X+3],A
    143F: 52 22    MOV   A,[X+34]
    1441: 0D 02    ADC   [X+2],A
    1443: 52 21    MOV   A,[X+33]
    1445: 0D 01    ADC   [X+1],A
    1447: 52 20    MOV   A,[X+32]
    1449: 0D 00    ADC   [X+0],A
    144B: 52 03    MOV   A,[X+3]
    144D: 13 1F    SUB   A,[X+31]
    144F: 52 02    MOV   A,[X+2]
    1451: 1B 1E    SBB   A,[X+30]
    1453: 52 01    MOV   A,[X+1]
    1455: 1B 1D    SBB   A,[X+29]
    1457: 52 1C    MOV   A,[X+28]
    1459: 31 80    XOR   A,0x80
    145B: 62 D0 00 MOV   REG[0xD0],0x0
    145E: 53 8D    MOV   [__rX],A
    1460: 52 00    MOV   A,[X+0]
    1462: 31 80    XOR   A,0x80
    1464: 1A 8D    SBB   A,[__rX]
    1466: CB 99    JC    0x1000
(0070)          z =  u1 * c1 - u2 * c2;
    1468: 62 D0 00 MOV   REG[0xD0],0x0
    146B: 52 30    MOV   A,[X+48]
    146D: 08       PUSH  A
    146E: 52 31    MOV   A,[X+49]
    1470: 08       PUSH  A
    1471: 52 32    MOV   A,[X+50]
    1473: 08       PUSH  A
    1474: 52 33    MOV   A,[X+51]
    1476: 08       PUSH  A
    1477: 52 14    MOV   A,[X+20]
    1479: 08       PUSH  A
    147A: 52 15    MOV   A,[X+21]
    147C: 08       PUSH  A
    147D: 52 16    MOV   A,[X+22]
    147F: 08       PUSH  A
    1480: 52 17    MOV   A,[X+23]
    1482: 08       PUSH  A
    1483: 7C 3B 4B LCALL 0x3B4B
    1486: 18       POP   A
    1487: 53 96    MOV   [__r3],A
    1489: 18       POP   A
    148A: 53 97    MOV   [__r2],A
    148C: 18       POP   A
    148D: 53 98    MOV   [__r1],A
    148F: 18       POP   A
    1490: 53 99    MOV   [__r0],A
    1492: 38 FC    ADD   SP,0xFC
    1494: 52 2C    MOV   A,[X+44]
    1496: 08       PUSH  A
    1497: 52 2D    MOV   A,[X+45]
    1499: 08       PUSH  A
    149A: 52 2E    MOV   A,[X+46]
    149C: 08       PUSH  A
    149D: 52 2F    MOV   A,[X+47]
    149F: 08       PUSH  A
    14A0: 52 10    MOV   A,[X+16]
    14A2: 08       PUSH  A
    14A3: 52 11    MOV   A,[X+17]
    14A5: 08       PUSH  A
    14A6: 52 12    MOV   A,[X+18]
    14A8: 08       PUSH  A
    14A9: 52 13    MOV   A,[X+19]
    14AB: 08       PUSH  A
    14AC: 7C 3B 4B LCALL 0x3B4B
    14AF: 18       POP   A
    14B0: 53 92    MOV   [__r7],A
    14B2: 18       POP   A
    14B3: 53 93    MOV   [__r6],A
    14B5: 18       POP   A
    14B6: 53 94    MOV   [__r5],A
    14B8: 18       POP   A
    14B9: 53 95    MOV   [__r4],A
    14BB: 38 FC    ADD   SP,0xFC
    14BD: 51 99    MOV   A,[__r0]
    14BF: 08       PUSH  A
    14C0: 51 98    MOV   A,[__r1]
    14C2: 08       PUSH  A
    14C3: 51 97    MOV   A,[__r2]
    14C5: 08       PUSH  A
    14C6: 51 96    MOV   A,[__r3]
    14C8: 08       PUSH  A
    14C9: 51 95    MOV   A,[__r4]
    14CB: 08       PUSH  A
    14CC: 51 94    MOV   A,[__r5]
    14CE: 08       PUSH  A
    14CF: 51 93    MOV   A,[__r6]
    14D1: 08       PUSH  A
    14D2: 51 92    MOV   A,[__r7]
    14D4: 08       PUSH  A
    14D5: 7C 3C 75 LCALL 0x3C75
    14D8: 18       POP   A
    14D9: 54 37    MOV   [X+55],A
    14DB: 18       POP   A
    14DC: 54 36    MOV   [X+54],A
    14DE: 18       POP   A
    14DF: 54 35    MOV   [X+53],A
    14E1: 18       POP   A
    14E2: 54 34    MOV   [X+52],A
    14E4: 38 FC    ADD   SP,0xFC
(0071)          u2 = u1 * c2 + u2 * c1;
    14E6: 52 2C    MOV   A,[X+44]
    14E8: 08       PUSH  A
    14E9: 52 2D    MOV   A,[X+45]
    14EB: 08       PUSH  A
    14EC: 52 2E    MOV   A,[X+46]
    14EE: 08       PUSH  A
    14EF: 52 2F    MOV   A,[X+47]
    14F1: 08       PUSH  A
    14F2: 52 14    MOV   A,[X+20]
    14F4: 08       PUSH  A
    14F5: 52 15    MOV   A,[X+21]
    14F7: 08       PUSH  A
    14F8: 52 16    MOV   A,[X+22]
    14FA: 08       PUSH  A
    14FB: 52 17    MOV   A,[X+23]
    14FD: 08       PUSH  A
    14FE: 7C 3B 4B LCALL 0x3B4B
    1501: 18       POP   A
    1502: 53 96    MOV   [__r3],A
    1504: 18       POP   A
    1505: 53 97    MOV   [__r2],A
    1507: 18       POP   A
    1508: 53 98    MOV   [__r1],A
    150A: 18       POP   A
    150B: 53 99    MOV   [__r0],A
    150D: 38 FC    ADD   SP,0xFC
    150F: 52 30    MOV   A,[X+48]
    1511: 08       PUSH  A
    1512: 52 31    MOV   A,[X+49]
    1514: 08       PUSH  A
    1515: 52 32    MOV   A,[X+50]
    1517: 08       PUSH  A
    1518: 52 33    MOV   A,[X+51]
    151A: 08       PUSH  A
    151B: 52 10    MOV   A,[X+16]
    151D: 08       PUSH  A
    151E: 52 11    MOV   A,[X+17]
    1520: 08       PUSH  A
    1521: 52 12    MOV   A,[X+18]
    1523: 08       PUSH  A
    1524: 52 13    MOV   A,[X+19]
    1526: 08       PUSH  A
    1527: 7C 3B 4B LCALL 0x3B4B
    152A: 18       POP   A
    152B: 53 92    MOV   [__r7],A
    152D: 18       POP   A
    152E: 53 93    MOV   [__r6],A
    1530: 18       POP   A
    1531: 53 94    MOV   [__r5],A
    1533: 18       POP   A
    1534: 53 95    MOV   [__r4],A
    1536: 38 FC    ADD   SP,0xFC
    1538: 51 99    MOV   A,[__r0]
    153A: 08       PUSH  A
    153B: 51 98    MOV   A,[__r1]
    153D: 08       PUSH  A
    153E: 51 97    MOV   A,[__r2]
    1540: 08       PUSH  A
    1541: 51 96    MOV   A,[__r3]
    1543: 08       PUSH  A
    1544: 51 95    MOV   A,[__r4]
    1546: 08       PUSH  A
    1547: 51 94    MOV   A,[__r5]
    1549: 08       PUSH  A
    154A: 51 93    MOV   A,[__r6]
    154C: 08       PUSH  A
    154D: 51 92    MOV   A,[__r7]
    154F: 08       PUSH  A
    1550: 7C 39 0B LCALL 0x390B
    1553: 18       POP   A
    1554: 54 17    MOV   [X+23],A
    1556: 18       POP   A
    1557: 54 16    MOV   [X+22],A
    1559: 18       POP   A
    155A: 54 15    MOV   [X+21],A
    155C: 18       POP   A
    155D: 54 14    MOV   [X+20],A
    155F: 38 FC    ADD   SP,0xFC
(0072)          u1 = z;
    1561: 52 34    MOV   A,[X+52]
    1563: 54 10    MOV   [X+16],A
    1565: 52 35    MOV   A,[X+53]
    1567: 54 11    MOV   [X+17],A
    1569: 52 36    MOV   A,[X+54]
    156B: 54 12    MOV   [X+18],A
    156D: 52 37    MOV   A,[X+55]
    156F: 54 13    MOV   [X+19],A
(0073)       }
    1571: 07 27 01 ADD   [X+39],0x1
    1574: 0F 26 00 ADC   [X+38],0x0
    1577: 0F 25 00 ADC   [X+37],0x0
    157A: 0F 24 00 ADC   [X+36],0x0
    157D: 52 27    MOV   A,[X+39]
    157F: 13 1B    SUB   A,[X+27]
    1581: 52 26    MOV   A,[X+38]
    1583: 1B 1A    SBB   A,[X+26]
    1585: 52 25    MOV   A,[X+37]
    1587: 1B 19    SBB   A,[X+25]
    1589: 52 18    MOV   A,[X+24]
    158B: 31 80    XOR   A,0x80
    158D: 62 D0 00 MOV   REG[0xD0],0x0
    1590: 53 8D    MOV   [__rX],A
    1592: 52 24    MOV   A,[X+36]
    1594: 31 80    XOR   A,0x80
    1596: 1A 8D    SBB   A,[__rX]
    1598: CA 55    JC    0x0FEE
(0074)       c2 = sqrt((1.0 - c1) / 2.0);
    159A: 62 D0 00 MOV   REG[0xD0],0x0
    159D: 52 2C    MOV   A,[X+44]
    159F: 08       PUSH  A
    15A0: 52 2D    MOV   A,[X+45]
    15A2: 08       PUSH  A
    15A3: 52 2E    MOV   A,[X+46]
    15A5: 08       PUSH  A
    15A6: 52 2F    MOV   A,[X+47]
    15A8: 08       PUSH  A
    15A9: 50 3F    MOV   A,0x3F
    15AB: 08       PUSH  A
    15AC: 50 80    MOV   A,0x80
    15AE: 08       PUSH  A
    15AF: 50 00    MOV   A,0x0
    15B1: 08       PUSH  A
    15B2: 08       PUSH  A
    15B3: 7C 3C 75 LCALL 0x3C75
    15B6: 18       POP   A
    15B7: 53 96    MOV   [__r3],A
    15B9: 18       POP   A
    15BA: 53 97    MOV   [__r2],A
    15BC: 18       POP   A
    15BD: 53 98    MOV   [__r1],A
    15BF: 18       POP   A
    15C0: 53 99    MOV   [__r0],A
    15C2: 38 FC    ADD   SP,0xFC
    15C4: 50 40    MOV   A,0x40
    15C6: 08       PUSH  A
    15C7: 50 00    MOV   A,0x0
    15C9: 08       PUSH  A
    15CA: 08       PUSH  A
    15CB: 08       PUSH  A
    15CC: 51 99    MOV   A,[__r0]
    15CE: 08       PUSH  A
    15CF: 51 98    MOV   A,[__r1]
    15D1: 08       PUSH  A
    15D2: 51 97    MOV   A,[__r2]
    15D4: 08       PUSH  A
    15D5: 51 96    MOV   A,[__r3]
    15D7: 08       PUSH  A
    15D8: 7C 3A 68 LCALL 0x3A68
    15DB: 18       POP   A
    15DC: 53 96    MOV   [__r3],A
    15DE: 18       POP   A
    15DF: 53 97    MOV   [__r2],A
    15E1: 18       POP   A
    15E2: 53 98    MOV   [__r1],A
    15E4: 18       POP   A
    15E5: 38 FC    ADD   SP,0xFC
    15E7: 08       PUSH  A
    15E8: 51 98    MOV   A,[__r1]
    15EA: 08       PUSH  A
    15EB: 51 97    MOV   A,[__r2]
    15ED: 08       PUSH  A
    15EE: 51 96    MOV   A,[__r3]
    15F0: 08       PUSH  A
    15F1: 7C 52 8F LCALL _sqrtf
    15F4: 38 FC    ADD   SP,0xFC
    15F6: 62 D0 00 MOV   REG[0xD0],0x0
    15F9: 51 99    MOV   A,[__r0]
    15FB: 54 30    MOV   [X+48],A
    15FD: 51 98    MOV   A,[__r1]
    15FF: 54 31    MOV   [X+49],A
    1601: 51 97    MOV   A,[__r2]
    1603: 54 32    MOV   [X+50],A
    1605: 51 96    MOV   A,[__r3]
    1607: 54 33    MOV   [X+51],A
(0075)       if (dir == 1) 
    1609: 3D FB 00 CMP   [X-5],0x0
    160C: B0 09    JNZ   0x1616
    160E: 3D FC 01 CMP   [X-4],0x1
    1611: B0 04    JNZ   0x1616
(0076)          c2 = -c2;
    1613: 37 30 80 XOR   [X+48],0x80
(0077)       c1 = sqrt((1.0 + c1) / 2.0);
    1616: 62 D0 00 MOV   REG[0xD0],0x0
    1619: 50 3F    MOV   A,0x3F
    161B: 08       PUSH  A
    161C: 50 80    MOV   A,0x80
    161E: 08       PUSH  A
    161F: 50 00    MOV   A,0x0
    1621: 08       PUSH  A
    1622: 08       PUSH  A
    1623: 52 2C    MOV   A,[X+44]
    1625: 08       PUSH  A
    1626: 52 2D    MOV   A,[X+45]
    1628: 08       PUSH  A
    1629: 52 2E    MOV   A,[X+46]
    162B: 08       PUSH  A
    162C: 52 2F    MOV   A,[X+47]
    162E: 08       PUSH  A
    162F: 7C 39 0B LCALL 0x390B
    1632: 18       POP   A
    1633: 53 96    MOV   [__r3],A
    1635: 18       POP   A
    1636: 53 97    MOV   [__r2],A
    1638: 18       POP   A
    1639: 53 98    MOV   [__r1],A
    163B: 18       POP   A
    163C: 53 99    MOV   [__r0],A
    163E: 38 FC    ADD   SP,0xFC
    1640: 50 40    MOV   A,0x40
    1642: 08       PUSH  A
    1643: 50 00    MOV   A,0x0
    1645: 08       PUSH  A
    1646: 08       PUSH  A
    1647: 08       PUSH  A
    1648: 51 99    MOV   A,[__r0]
    164A: 08       PUSH  A
    164B: 51 98    MOV   A,[__r1]
    164D: 08       PUSH  A
    164E: 51 97    MOV   A,[__r2]
    1650: 08       PUSH  A
    1651: 51 96    MOV   A,[__r3]
    1653: 08       PUSH  A
    1654: 7C 3A 68 LCALL 0x3A68
    1657: 18       POP   A
    1658: 53 96    MOV   [__r3],A
    165A: 18       POP   A
    165B: 53 97    MOV   [__r2],A
    165D: 18       POP   A
    165E: 53 98    MOV   [__r1],A
    1660: 18       POP   A
    1661: 38 FC    ADD   SP,0xFC
    1663: 08       PUSH  A
    1664: 51 98    MOV   A,[__r1]
    1666: 08       PUSH  A
    1667: 51 97    MOV   A,[__r2]
    1669: 08       PUSH  A
    166A: 51 96    MOV   A,[__r3]
    166C: 08       PUSH  A
    166D: 7C 52 8F LCALL _sqrtf
    1670: 38 FC    ADD   SP,0xFC
    1672: 62 D0 00 MOV   REG[0xD0],0x0
    1675: 51 99    MOV   A,[__r0]
    1677: 54 2C    MOV   [X+44],A
    1679: 51 98    MOV   A,[__r1]
    167B: 54 2D    MOV   [X+45],A
    167D: 51 97    MOV   A,[__r2]
    167F: 54 2E    MOV   [X+46],A
    1681: 51 96    MOV   A,[__r3]
    1683: 54 2F    MOV   [X+47],A
(0078)    }
    1685: 07 3B 01 ADD   [X+59],0x1
    1688: 0F 3A 00 ADC   [X+58],0x0
    168B: 0F 39 00 ADC   [X+57],0x0
    168E: 0F 38 00 ADC   [X+56],0x0
    1691: 62 D0 00 MOV   REG[0xD0],0x0
    1694: 52 38    MOV   A,[X+56]
    1696: 08       PUSH  A
    1697: 52 39    MOV   A,[X+57]
    1699: 08       PUSH  A
    169A: 52 3A    MOV   A,[X+58]
    169C: 08       PUSH  A
    169D: 52 3B    MOV   A,[X+59]
    169F: 08       PUSH  A
    16A0: 7C 3D 4F LCALL 0x3D4F
    16A3: 18       POP   A
    16A4: 53 96    MOV   [__r3],A
    16A6: 18       POP   A
    16A7: 53 97    MOV   [__r2],A
    16A9: 18       POP   A
    16AA: 53 98    MOV   [__r1],A
    16AC: 18       POP   A
    16AD: 53 99    MOV   [__r0],A
    16AF: 52 F7    MOV   A,[X-9]
    16B1: 08       PUSH  A
    16B2: 52 F8    MOV   A,[X-8]
    16B4: 08       PUSH  A
    16B5: 52 F9    MOV   A,[X-7]
    16B7: 08       PUSH  A
    16B8: 52 FA    MOV   A,[X-6]
    16BA: 08       PUSH  A
    16BB: 51 99    MOV   A,[__r0]
    16BD: 08       PUSH  A
    16BE: 51 98    MOV   A,[__r1]
    16C0: 08       PUSH  A
    16C1: 51 97    MOV   A,[__r2]
    16C3: 08       PUSH  A
    16C4: 51 96    MOV   A,[__r3]
    16C6: 08       PUSH  A
    16C7: 7C 3A 0B LCALL 0x3A0B
    16CA: 38 F8    ADD   SP,0xF8
    16CC: 39 FF    CMP   A,0xFF
    16CE: A8 E1    JZ    0x0FB0
(0079) 
(0080)    /* Scaling factor for forward transform */
(0081) /*    if (dir == 1) {
(0082)       for (i=0;i<n;i++) {
(0083)          x[i] /= n;
(0084)          y[i] /= n;
(0085)       }
(0086)    } */
(0087)    maxAmp = 0; //Maximum Amplitude
    16D0: 62 D0 06 MOV   REG[0xD0],0x6
    16D3: 55 87 00 MOV   [maxAmp+1],0x0
    16D6: 55 86 00 MOV   [maxAmp],0x0
(0088)    maxFreq = 0;//Maximum Frequency
    16D9: 62 D0 06 MOV   REG[0xD0],0x6
    16DC: 55 85 00 MOV   [maxFreq+1],0x0
    16DF: 55 84 00 MOV   [maxFreq],0x0
(0089)    for(i=0;i<N_points;i++)
    16E2: 56 00 00 MOV   [X+0],0x0
    16E5: 56 01 00 MOV   [X+1],0x0
    16E8: 56 02 00 MOV   [X+2],0x0
    16EB: 56 03 00 MOV   [X+3],0x0
(0090)    {
(0091)    /* Absolute value */
(0092) 		modl[i]=sqrt((x[i]*x[i])+(y[i]*y[i]));
    16EE: 62 D0 00 MOV   REG[0xD0],0x0
FILE: C:\Users\HARISH~1\Desktop\SEM1CO~1\566\Project3\Versions\VERSIO~1\Project1\Project1\fft.h
(0093) 		if(modl[i]>maxAmp && i<64) //Compare the max value
    1800: 62 D0 06 MOV   REG[0xD0],0x6
    1803: 51 87    MOV   A,[maxAmp+1]
    1805: 62 D0 00 MOV   REG[0xD0],0x0
    1808: 53 96    MOV   [__r3],A
    180A: 62 D0 06 MOV   REG[0xD0],0x6
    180D: 51 86    MOV   A,[maxAmp]
    180F: 62 D0 00 MOV   REG[0xD0],0x0
    1812: 53 97    MOV   [__r2],A
    1814: 47 97 80 TST   [__r2],0x80
    1817: A0 09    JZ    0x1821
    1819: 55 98 FF MOV   [__r1],0xFF
    181C: 55 99 FF MOV   [__r0],0xFF
    181F: 80 0A    JMP   0x182A
    1821: 62 D0 00 MOV   REG[0xD0],0x0
    1824: 55 98 00 MOV   [__r1],0x0
    1827: 55 99 00 MOV   [__r0],0x0
    182A: 62 D0 00 MOV   REG[0xD0],0x0
    182D: 51 99    MOV   A,[__r0]
    182F: 08       PUSH  A
    1830: 51 98    MOV   A,[__r1]
    1832: 08       PUSH  A
    1833: 51 97    MOV   A,[__r2]
    1835: 08       PUSH  A
    1836: 51 96    MOV   A,[__r3]
    1838: 08       PUSH  A
    1839: 7C 3D 4F LCALL 0x3D4F
    183C: 18       POP   A
    183D: 53 96    MOV   [__r3],A
    183F: 18       POP   A
    1840: 53 97    MOV   [__r2],A
    1842: 18       POP   A
    1843: 53 98    MOV   [__r1],A
    1845: 18       POP   A
    1846: 53 99    MOV   [__r0],A
    1848: 52 00    MOV   A,[X+0]
    184A: 53 95    MOV   [__r4],A
    184C: 52 01    MOV   A,[X+1]
    184E: 53 94    MOV   [__r5],A
    1850: 52 02    MOV   A,[X+2]
    1852: 53 93    MOV   [__r6],A
    1854: 52 03    MOV   A,[X+3]
    1856: 53 92    MOV   [__r7],A
    1858: 50 02    MOV   A,0x2
    185A: 62 D0 00 MOV   REG[0xD0],0x0
    185D: 65 92    ASL   [__r7]
    185F: 6B 93    RLC   [__r6]
    1861: 6B 94    RLC   [__r5]
    1863: 6B 95    RLC   [__r4]
    1865: 78       DEC   A
    1866: BF F3    JNZ   0x185A
    1868: 51 92    MOV   A,[__r7]
    186A: 53 94    MOV   [__r5],A
    186C: 51 93    MOV   A,[__r6]
    186E: 53 95    MOV   [__r4],A
    1870: 52 F2    MOV   A,[X-14]
    1872: 04 94    ADD   [__r5],A
    1874: 52 F1    MOV   A,[X-15]
    1876: 0C 95    ADC   [__r4],A
    1878: 51 95    MOV   A,[__r4]
    187A: 60 D4    MOV   REG[0xD4],A
    187C: 3E 94    MVI   A,[__r5]
    187E: 53 91    MOV   [__r8],A
    1880: 3E 94    MVI   A,[__r5]
    1882: 53 90    MOV   [__r9],A
    1884: 3E 94    MVI   A,[__r5]
    1886: 53 8F    MOV   [__r10],A
    1888: 3E 94    MVI   A,[__r5]
    188A: 53 8E    MOV   [__r11],A
    188C: 51 99    MOV   A,[__r0]
    188E: 08       PUSH  A
    188F: 51 98    MOV   A,[__r1]
    1891: 08       PUSH  A
    1892: 51 97    MOV   A,[__r2]
    1894: 08       PUSH  A
    1895: 51 96    MOV   A,[__r3]
    1897: 08       PUSH  A
    1898: 51 91    MOV   A,[__r8]
    189A: 08       PUSH  A
    189B: 51 90    MOV   A,[__r9]
    189D: 08       PUSH  A
    189E: 51 8F    MOV   A,[__r10]
    18A0: 08       PUSH  A
    18A1: 51 8E    MOV   A,[__r11]
    18A3: 08       PUSH  A
    18A4: 7C 3A 0B LCALL 0x3A0B
    18A7: 38 F8    ADD   SP,0xF8
    18A9: 39 00    CMP   A,0x0
    18AB: A0 9E    JZ    0x194A
    18AD: 39 01    CMP   A,0x1
    18AF: B0 9A    JNZ   0x194A
    18B1: 52 03    MOV   A,[X+3]
    18B3: 11 40    SUB   A,0x40
    18B5: 52 02    MOV   A,[X+2]
    18B7: 19 00    SBB   A,0x0
    18B9: 52 01    MOV   A,[X+1]
    18BB: 19 00    SBB   A,0x0
    18BD: 52 00    MOV   A,[X+0]
    18BF: 31 80    XOR   A,0x80
    18C1: 19 80    SBB   A,0x80
    18C3: D0 86    JNC   0x194A
(0094) 		{
(0095) 			maxAmp = modl[i];
    18C5: 62 D0 00 MOV   REG[0xD0],0x0
    18C8: 52 00    MOV   A,[X+0]
    18CA: 53 99    MOV   [__r0],A
    18CC: 52 01    MOV   A,[X+1]
    18CE: 53 98    MOV   [__r1],A
    18D0: 52 02    MOV   A,[X+2]
    18D2: 53 97    MOV   [__r2],A
    18D4: 52 03    MOV   A,[X+3]
    18D6: 53 96    MOV   [__r3],A
    18D8: 50 02    MOV   A,0x2
    18DA: 62 D0 00 MOV   REG[0xD0],0x0
    18DD: 65 96    ASL   [__r3]
    18DF: 6B 97    RLC   [__r2]
    18E1: 6B 98    RLC   [__r1]
    18E3: 6B 99    RLC   [__r0]
    18E5: 78       DEC   A
    18E6: BF F3    JNZ   0x18DA
    18E8: 51 96    MOV   A,[__r3]
    18EA: 53 98    MOV   [__r1],A
    18EC: 51 97    MOV   A,[__r2]
    18EE: 53 99    MOV   [__r0],A
    18F0: 52 F2    MOV   A,[X-14]
    18F2: 04 98    ADD   [__r1],A
    18F4: 52 F1    MOV   A,[X-15]
    18F6: 0C 99    ADC   [__r0],A
    18F8: 51 99    MOV   A,[__r0]
    18FA: 60 D4    MOV   REG[0xD4],A
    18FC: 3E 98    MVI   A,[__r1]
    18FE: 53 95    MOV   [__r4],A
    1900: 3E 98    MVI   A,[__r1]
    1902: 53 94    MOV   [__r5],A
    1904: 3E 98    MVI   A,[__r1]
    1906: 53 93    MOV   [__r6],A
    1908: 3E 98    MVI   A,[__r1]
    190A: 53 92    MOV   [__r7],A
    190C: 51 95    MOV   A,[__r4]
    190E: 08       PUSH  A
    190F: 51 94    MOV   A,[__r5]
    1911: 08       PUSH  A
    1912: 51 93    MOV   A,[__r6]
    1914: 08       PUSH  A
    1915: 51 92    MOV   A,[__r7]
    1917: 08       PUSH  A
    1918: 7C 37 FA LCALL 0x37FA
    191B: 18       POP   A
    191C: 62 D0 06 MOV   REG[0xD0],0x6
    191F: 53 87    MOV   [maxAmp+1],A
    1921: 18       POP   A
    1922: 53 86    MOV   [maxAmp],A
    1924: 38 FE    ADD   SP,0xFE
(0096) 			maxFreq = i+1;
    1926: 62 D0 00 MOV   REG[0xD0],0x0
    1929: 52 03    MOV   A,[X+3]
    192B: 01 01    ADD   A,0x1
    192D: 53 96    MOV   [__r3],A
    192F: 52 02    MOV   A,[X+2]
    1931: 09 00    ADC   A,0x0
    1933: 53 97    MOV   [__r2],A
    1935: 51 96    MOV   A,[__r3]
    1937: 53 98    MOV   [__r1],A
    1939: 51 97    MOV   A,[__r2]
    193B: 53 99    MOV   [__r0],A
    193D: 51 98    MOV   A,[__r1]
    193F: 08       PUSH  A
    1940: 51 99    MOV   A,[__r0]
    1942: 62 D0 06 MOV   REG[0xD0],0x6
    1945: 53 84    MOV   [maxFreq],A
    1947: 18       POP   A
    1948: 53 85    MOV   [maxFreq+1],A
(0097) 		}
(0098) 		
(0099) 	}
    194A: 07 03 01 ADD   [X+3],0x1
    194D: 0F 02 00 ADC   [X+2],0x0
    1950: 0F 01 00 ADC   [X+1],0x0
    1953: 0F 00 00 ADC   [X+0],0x0
    1956: 52 03    MOV   A,[X+3]
    1958: 11 40    SUB   A,0x40
    195A: 52 02    MOV   A,[X+2]
    195C: 19 00    SBB   A,0x0
    195E: 52 01    MOV   A,[X+1]
    1960: 19 00    SBB   A,0x0
    1962: 52 00    MOV   A,[X+0]
    1964: 31 80    XOR   A,0x80
    1966: 19 80    SBB   A,0x80
    1968: CD 85    JC    0x16EE
(0100) 	maxFreq = maxFreq * 104;
    196A: 62 D0 06 MOV   REG[0xD0],0x6
    196D: 51 84    MOV   A,[maxFreq]
    196F: 08       PUSH  A
    1970: 51 85    MOV   A,[maxFreq+1]
    1972: 08       PUSH  A
    1973: 50 00    MOV   A,0x0
    1975: 08       PUSH  A
    1976: 50 68    MOV   A,0x68
    1978: 08       PUSH  A
    1979: 62 D0 00 MOV   REG[0xD0],0x0
    197C: 7C 3D BA LCALL 0x3DBA
    197F: 38 FC    ADD   SP,0xFC
    1981: 51 8D    MOV   A,[__rX]
    1983: 62 D0 06 MOV   REG[0xD0],0x6
    1986: 53 85    MOV   [maxFreq+1],A
    1988: 62 D0 00 MOV   REG[0xD0],0x0
    198B: 51 8C    MOV   A,[__rY]
    198D: 62 D0 06 MOV   REG[0xD0],0x6
    1990: 53 84    MOV   [maxFreq],A
(0101) 	return;
    1992: 38 B6    ADD   SP,0xB6
    1994: 20       POP   X
    1995: 7F       RET   
FILE: C:\Users\HARISH~1\Desktop\SEM1CO~1\566\Project3\Versions\VERSIO~1\Project1\Project1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) //Project 3 Final Code
(0005) #include <m8c.h>        // part specific constants and macros.
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules.
(0007) #include "stdio.h"
(0008) #include "fft.h"
(0009) #include "math.h"
(0010) #include "stdlib.h"
(0011) #include "string.h"
(0012) 
(0013) extern unsigned int i_msec;
(0014) extern unsigned int i_sec;
(0015) extern unsigned int i_min;
(0016) extern unsigned int i_hour;
(0017) extern unsigned int cnt_sec;
(0018) extern unsigned int cnt_min;
(0019) extern unsigned int cnt_hour,dispCount;
(0020) extern unsigned int downCount,dumCount;
(0021) 
(0022) 
(0023) 
(0024) int test_int= 0;
(0025) 
(0026) unsigned int mat_flag=0;
(0027) unsigned int downcountFlag = 0;
(0028) unsigned int dispflag;
(0029) void LCD_Clear(void); 
(0030) void getFFTOutput(void);
(0031) void matlabOut(void);
(0032) void cordic1(void);
(0033) void max_likelihood(void);
(0034) void soundLocalize(void );
(0035) void serialDataOut(void );
(0036) void matlabOut(void );
(0037) 
(0038) 
(0039) unsigned int gblSec =0;gblMin=0;gblHour=0,calibFlag=0;
(0040) unsigned int mode = 0,noConv=0; // 0 - Free Run (Default) ; 1 - Caliberation ; 2 - Matching.
(0041) unsigned int avgFirstCal,avgFirstMat;
(0042) unsigned int mode_check_count = 0;
(0043) unsigned int temp_value = 0;
(0044) unsigned int temp_mode = 0,dumflag=0;
(0045) int  max;
(0046) int compMax, compFreq, lclMax, lclFreq;
(0047) double hannMul, hannValue,hannValue1;
(0048) unsigned int h=0,j=0,m=0;         //index
(0049) unsigned int ind; 
(0050) unsigned int sampFreq=13330;
(0051) double ar1[32],ar2[32];
(0052) double  freq,avg_Freq=0,avg_Mat=0;    // time record
(0053) double maxf;
(0054) unsigned int avgCalNoise;
(0055) 
(0056) 
(0057) 
(0058) void main(void)
(0059) {
_main:
  isMatch              --> X+21
  str                  --> X+6
  mode_flag            --> X+4
  a                    --> X+2
  i                    --> X+0
    1996: 10       PUSH  X
    1997: 4F       MOV   X,SP
    1998: 38 17    ADD   SP,0x17
(0060) 	char str[15];
(0061) 	int a=0,i =0,mode_flag =0,isMatch;
    199A: 56 03 00 MOV   [X+3],0x0
    199D: 56 02 00 MOV   [X+2],0x0
    19A0: 56 01 00 MOV   [X+1],0x0
    19A3: 56 00 00 MOV   [X+0],0x0
    19A6: 56 05 00 MOV   [X+5],0x0
    19A9: 56 04 00 MOV   [X+4],0x0
(0062) 	LCD_Start();
    19AC: 10       PUSH  X
    19AD: 7C 09 7F LCALL _LCD_Init|_LCD_Start|LCD_Init|LCD_Start
(0063) 	UART_Start(UART_PARITY_NONE);
    19B0: 50 00    MOV   A,0x0
    19B2: 7C 04 C3 LCALL _UART_Start
(0064) 	PGA_1_Start(PGA_1_HIGHPOWER);
    19B5: 50 03    MOV   A,0x3
    19B7: 7C 07 13 LCALL _PGA_1_SetPower|_PGA_1_Start|PGA_1_Start|PGA_1_SetPower
(0065) 	PGA_2_Start(PGA_2_HIGHPOWER);
    19BA: 50 03    MOV   A,0x3
    19BC: 7C 06 D3 LCALL _PGA_2_Start|_PGA_2_SetPower|PGA_2_SetPower
(0066) 	LPF2_3_Start(LPF2_3_HIGHPOWER);
    19BF: 50 03    MOV   A,0x3
    19C1: 7C 07 53 LCALL _LPF2_3_Start|LPF2_3_SetPower|_LPF2_3_SetPower
(0067) 	PGA_3_Start(PGA_3_HIGHPOWER);
    19C4: 50 03    MOV   A,0x3
    19C6: 7C 06 93 LCALL _PGA_3_Start|PGA_3_SetPower|_PGA_3_SetPower
(0068) 	PGA_4_Start(PGA_4_HIGHPOWER);
    19C9: 50 03    MOV   A,0x3
    19CB: 7C 06 53 LCALL _PGA_4_SetPower|PGA_4_Start|_PGA_4_Start
(0069) 	LPF2_1_Start(LPF2_1_HIGHPOWER);
    19CE: 50 03    MOV   A,0x3
    19D0: 7C 07 E0 LCALL _LPF2_1_Start|_LPF2_1_SetPower|LPF2_1_Start|LPF2_1_SetPower
    19D3: 20       POP   X
(0070)     M8C_EnableGInt;                     // Enable global interrupts	
    19D4: 71 01    OR    F,0x1
(0071) 	Timer_Start();
    19D6: 10       PUSH  X
    19D7: 7C 05 FB LCALL _Timer_Start
    19DA: 20       POP   X
(0072) 	LCD_Clear();
    19DB: 96 D4    CALL  _LCD_Clear
(0073) 	Timer_EnableInt();
    19DD: 10       PUSH  X
    19DE: 7C 05 F3 LCALL _Timer_EnableInt
(0074) 	DUALADC_Start(DUALADC_HIGHPOWER);     // Turn on Analog section
    19E1: 50 03    MOV   A,0x3
    19E3: 7C 0A F6 LCALL DUALADC_Start|DUALADC_SetPower|_DUALADC_Start|_DUALADC_SetPower
(0075)     DUALADC_GetSamples(0);
    19E6: 50 00    MOV   A,0x0
    19E8: 7C 0B 27 LCALL _DUALADC_GetSamples
    19EB: 20       POP   X
(0076) 	freq=104;
    19EC: 62 D0 00 MOV   REG[0xD0],0x0
    19EF: 55 B5 42 MOV   [freq],0x42
    19F2: 55 B6 D0 MOV   [freq+1],0xD0
    19F5: 55 B7 00 MOV   [freq+2],0x0
    19F8: 55 B8 00 MOV   [freq+3],0x0
(0077)     i=0;
    19FB: 56 01 00 MOV   [X+1],0x0
    19FE: 56 00 00 MOV   [X+0],0x0
(0078) 	LCD_Clear();
    1A01: 96 AE    CALL  _LCD_Clear
(0079) 	LCD_Position(1,0);
    1A03: 10       PUSH  X
    1A04: 57 00    MOV   X,0x0
    1A06: 50 01    MOV   A,0x1
    1A08: 7C 09 F2 LCALL _LCD_Position
(0080) 	LCD_PrCString("hELLO");
    1A0B: 50 02    MOV   A,0x2
    1A0D: 08       PUSH  A
    1A0E: 50 05    MOV   A,0x5
    1A10: 5C       MOV   X,A
    1A11: 18       POP   A
    1A12: 7C 08 6D LCALL _LCD_PrCString
(0081) 	
(0082) 	UART_CPutString("\n\rFFT OUTPUT:\n\r");
    1A15: 50 01    MOV   A,0x1
    1A17: 08       PUSH  A
    1A18: 50 F5    MOV   A,0xF5
    1A1A: 5C       MOV   X,A
    1A1B: 18       POP   A
    1A1C: 7C 05 D8 LCALL _UART_CPutString
    1A1F: 20       POP   X
(0083) 	soundLocalize();
    1A20: 96 B4    CALL  _soundLocalize
(0084) 	matlabOut();
    1A22: 94 C1    CALL  _matlabOut
    1A24: 38 E9    ADD   SP,0xE9
    1A26: 20       POP   X
    1A27: 8F FF    JMP   0x1A27
(0085) }
(0086) 
(0087) void getFFTOutput(void)
(0088) {
_getFFTOutput:
  temp1                --> X+10
  temp                 --> X+6
  Status               --> X+4
  flag                 --> X+2
  i                    --> X+0
    1A29: 10       PUSH  X
    1A2A: 4F       MOV   X,SP
    1A2B: 38 10    ADD   SP,0x10
(0089) 	int i,Status,flag=0;
    1A2D: 56 03 00 MOV   [X+3],0x0
    1A30: 56 02 00 MOV   [X+2],0x0
(0090) 	char temp[4],*temp1;
(0091) 	for(i=0;i<N_points;i++)
    1A33: 56 01 00 MOV   [X+1],0x0
    1A36: 56 00 00 MOV   [X+0],0x0
(0092)     {  	
(0093)        	mod[i]=0;       //init 0
    1A39: 62 D0 00 MOV   REG[0xD0],0x0
    1A3C: 52 01    MOV   A,[X+1]
    1A3E: 53 98    MOV   [__r1],A
    1A40: 52 00    MOV   A,[X+0]
    1A42: 53 99    MOV   [__r0],A
    1A44: 65 98    ASL   [__r1]
    1A46: 6B 99    RLC   [__r0]
    1A48: 65 98    ASL   [__r1]
    1A4A: 6B 99    RLC   [__r0]
    1A4C: 06 98 00 ADD   [__r1],0x0
    1A4F: 0E 99 02 ADC   [__r0],0x2
    1A52: 51 99    MOV   A,[__r0]
    1A54: 60 D5    MOV   REG[0xD5],A
    1A56: 50 00    MOV   A,0x0
    1A58: 3F 98    MVI   [__r1],A
    1A5A: 3F 98    MVI   [__r1],A
    1A5C: 3F 98    MVI   [__r1],A
    1A5E: 3F 98    MVI   [__r1],A
(0094) 		//mod1[i]=0;
(0095)        	data_re[i]=0;
    1A60: 52 01    MOV   A,[X+1]
    1A62: 53 98    MOV   [__r1],A
    1A64: 52 00    MOV   A,[X+0]
    1A66: 53 99    MOV   [__r0],A
    1A68: 65 98    ASL   [__r1]
    1A6A: 6B 99    RLC   [__r0]
    1A6C: 65 98    ASL   [__r1]
    1A6E: 6B 99    RLC   [__r0]
    1A70: 06 98 00 ADD   [__r1],0x0
    1A73: 0E 99 03 ADC   [__r0],0x3
    1A76: 51 99    MOV   A,[__r0]
    1A78: 60 D5    MOV   REG[0xD5],A
    1A7A: 50 00    MOV   A,0x0
    1A7C: 3F 98    MVI   [__r1],A
    1A7E: 3F 98    MVI   [__r1],A
    1A80: 3F 98    MVI   [__r1],A
    1A82: 3F 98    MVI   [__r1],A
(0096) 		data_re1[i]=0;
    1A84: 52 01    MOV   A,[X+1]
    1A86: 53 98    MOV   [__r1],A
    1A88: 52 00    MOV   A,[X+0]
    1A8A: 53 99    MOV   [__r0],A
    1A8C: 65 98    ASL   [__r1]
    1A8E: 6B 99    RLC   [__r0]
    1A90: 65 98    ASL   [__r1]
    1A92: 6B 99    RLC   [__r0]
    1A94: 06 98 00 ADD   [__r1],0x0
    1A97: 0E 99 01 ADC   [__r0],0x1
    1A9A: 51 99    MOV   A,[__r0]
    1A9C: 60 D5    MOV   REG[0xD5],A
    1A9E: 50 00    MOV   A,0x0
    1AA0: 3F 98    MVI   [__r1],A
    1AA2: 3F 98    MVI   [__r1],A
    1AA4: 3F 98    MVI   [__r1],A
    1AA6: 3F 98    MVI   [__r1],A
(0097)        	data_imm[i]=0;
    1AA8: 52 01    MOV   A,[X+1]
    1AAA: 53 98    MOV   [__r1],A
    1AAC: 52 00    MOV   A,[X+0]
    1AAE: 53 99    MOV   [__r0],A
    1AB0: 65 98    ASL   [__r1]
    1AB2: 6B 99    RLC   [__r0]
    1AB4: 65 98    ASL   [__r1]
    1AB6: 6B 99    RLC   [__r0]
    1AB8: 06 98 00 ADD   [__r1],0x0
    1ABB: 0E 99 04 ADC   [__r0],0x4
    1ABE: 51 99    MOV   A,[__r0]
    1AC0: 60 D5    MOV   REG[0xD5],A
    1AC2: 50 00    MOV   A,0x0
    1AC4: 3F 98    MVI   [__r1],A
    1AC6: 3F 98    MVI   [__r1],A
    1AC8: 3F 98    MVI   [__r1],A
    1ACA: 3F 98    MVI   [__r1],A
(0098) 		data_imm1[i]=0;
    1ACC: 52 01    MOV   A,[X+1]
    1ACE: 53 98    MOV   [__r1],A
    1AD0: 52 00    MOV   A,[X+0]
    1AD2: 53 99    MOV   [__r0],A
    1AD4: 65 98    ASL   [__r1]
    1AD6: 6B 99    RLC   [__r0]
    1AD8: 65 98    ASL   [__r1]
    1ADA: 6B 99    RLC   [__r0]
    1ADC: 06 98 00 ADD   [__r1],0x0
    1ADF: 0E 99 05 ADC   [__r0],0x5
    1AE2: 51 99    MOV   A,[__r0]
    1AE4: 60 D5    MOV   REG[0xD5],A
    1AE6: 50 00    MOV   A,0x0
    1AE8: 3F 98    MVI   [__r1],A
    1AEA: 3F 98    MVI   [__r1],A
    1AEC: 3F 98    MVI   [__r1],A
    1AEE: 3F 98    MVI   [__r1],A
(0099)     }
    1AF0: 77 01    INC   [X+1]
    1AF2: 0F 00 00 ADC   [X+0],0x0
    1AF5: 52 01    MOV   A,[X+1]
    1AF7: 11 40    SUB   A,0x40
    1AF9: 52 00    MOV   A,[X+0]
    1AFB: 31 80    XOR   A,0x80
    1AFD: 19 80    SBB   A,0x80
    1AFF: CF 39    JC    0x1A39
(0100) 	i=0;
    1B01: 56 01 00 MOV   [X+1],0x0
    1B04: 56 00 00 MOV   [X+0],0x0
    1B07: 82 A2    JMP   0x1DAA
(0101) 		while(i!= N_points) // Wait for data to be ready. 
(0102) 		{                                       
(0103) 	    	while(DUALADC_fIsDataAvailable() == 0); 
    1B09: 10       PUSH  X
    1B0A: 7C 0B 8B LCALL _DUALADC_fIsData|_DUALADC_fIsDataAvailable|DUALADC_fIsData|DUALADC_fIsDataAvailable
    1B0D: 20       POP   X
    1B0E: 62 D0 00 MOV   REG[0xD0],0x0
    1B11: 39 00    CMP   A,0x0
    1B13: AF F5    JZ    0x1B09
(0104) 			hannValue = DUALADC_iGetData1();
    1B15: 10       PUSH  X
    1B16: 7C 0B 9E LCALL _DUALADC_iGetData1
    1B19: 62 D0 00 MOV   REG[0xD0],0x0
    1B1C: 5A 99    MOV   [__r0],X
    1B1E: 20       POP   X
    1B1F: 62 D0 00 MOV   REG[0xD0],0x0
    1B22: 53 B0    MOV   [hannValue+3],A
    1B24: 62 D0 00 MOV   REG[0xD0],0x0
    1B27: 51 99    MOV   A,[__r0]
    1B29: 62 D0 00 MOV   REG[0xD0],0x0
    1B2C: 53 AF    MOV   [hannValue+2],A
    1B2E: 47 AF 80 TST   [hannValue+2],0x80
    1B31: A0 09    JZ    0x1B3B
    1B33: 55 AE FF MOV   [hannValue+1],0xFF
    1B36: 55 AD FF MOV   [hannValue],0xFF
    1B39: 80 0A    JMP   0x1B44
    1B3B: 62 D0 00 MOV   REG[0xD0],0x0
    1B3E: 55 AE 00 MOV   [hannValue+1],0x0
    1B41: 55 AD 00 MOV   [hannValue],0x0
    1B44: 62 D0 00 MOV   REG[0xD0],0x0
    1B47: 51 AD    MOV   A,[hannValue]
    1B49: 08       PUSH  A
    1B4A: 51 AE    MOV   A,[hannValue+1]
    1B4C: 08       PUSH  A
    1B4D: 51 AF    MOV   A,[hannValue+2]
    1B4F: 08       PUSH  A
    1B50: 51 B0    MOV   A,[hannValue+3]
    1B52: 08       PUSH  A
    1B53: 62 D0 00 MOV   REG[0xD0],0x0
    1B56: 7C 3D 4F LCALL 0x3D4F
    1B59: 18       POP   A
    1B5A: 62 D0 00 MOV   REG[0xD0],0x0
    1B5D: 53 B0    MOV   [hannValue+3],A
    1B5F: 18       POP   A
    1B60: 53 AF    MOV   [hannValue+2],A
    1B62: 18       POP   A
    1B63: 53 AE    MOV   [hannValue+1],A
    1B65: 18       POP   A
    1B66: 53 AD    MOV   [hannValue],A
(0105) 			hannValue1 = DUALADC_iGetData2ClearFlag();
    1B68: 10       PUSH  X
    1B69: 7C 0B A6 LCALL _DUALADC_iGetData2ClearFlag
    1B6C: 62 D0 00 MOV   REG[0xD0],0x0
    1B6F: 5A 99    MOV   [__r0],X
    1B71: 20       POP   X
    1B72: 62 D0 00 MOV   REG[0xD0],0x0
    1B75: 53 AC    MOV   [hannValue1+3],A
    1B77: 62 D0 00 MOV   REG[0xD0],0x0
    1B7A: 51 99    MOV   A,[__r0]
    1B7C: 62 D0 00 MOV   REG[0xD0],0x0
    1B7F: 53 AB    MOV   [hannValue1+2],A
    1B81: 47 AB 80 TST   [hannValue1+2],0x80
    1B84: A0 09    JZ    0x1B8E
    1B86: 55 AA FF MOV   [hannValue1+1],0xFF
    1B89: 55 A9 FF MOV   [hannValue1],0xFF
    1B8C: 80 0A    JMP   0x1B97
    1B8E: 62 D0 00 MOV   REG[0xD0],0x0
    1B91: 55 AA 00 MOV   [hannValue1+1],0x0
    1B94: 55 A9 00 MOV   [hannValue1],0x0
    1B97: 62 D0 00 MOV   REG[0xD0],0x0
    1B9A: 51 A9    MOV   A,[hannValue1]
    1B9C: 08       PUSH  A
    1B9D: 51 AA    MOV   A,[hannValue1+1]
    1B9F: 08       PUSH  A
    1BA0: 51 AB    MOV   A,[hannValue1+2]
    1BA2: 08       PUSH  A
    1BA3: 51 AC    MOV   A,[hannValue1+3]
    1BA5: 08       PUSH  A
    1BA6: 62 D0 00 MOV   REG[0xD0],0x0
    1BA9: 7C 3D 4F LCALL 0x3D4F
    1BAC: 18       POP   A
    1BAD: 62 D0 00 MOV   REG[0xD0],0x0
    1BB0: 53 AC    MOV   [hannValue1+3],A
    1BB2: 18       POP   A
    1BB3: 53 AB    MOV   [hannValue1+2],A
    1BB5: 18       POP   A
    1BB6: 53 AA    MOV   [hannValue1+1],A
    1BB8: 18       POP   A
    1BB9: 53 A9    MOV   [hannValue1],A
(0106) 			if (hannValue > 0x0040 || flag == 1)
    1BBB: 62 D0 00 MOV   REG[0xD0],0x0
    1BBE: 50 42    MOV   A,0x42
    1BC0: 08       PUSH  A
    1BC1: 50 80    MOV   A,0x80
    1BC3: 08       PUSH  A
    1BC4: 50 00    MOV   A,0x0
    1BC6: 08       PUSH  A
    1BC7: 08       PUSH  A
    1BC8: 51 AD    MOV   A,[hannValue]
    1BCA: 08       PUSH  A
    1BCB: 51 AE    MOV   A,[hannValue+1]
    1BCD: 08       PUSH  A
    1BCE: 51 AF    MOV   A,[hannValue+2]
    1BD0: 08       PUSH  A
    1BD1: 51 B0    MOV   A,[hannValue+3]
    1BD3: 08       PUSH  A
    1BD4: 62 D0 00 MOV   REG[0xD0],0x0
    1BD7: 7C 3A 0B LCALL 0x3A0B
    1BDA: 38 F8    ADD   SP,0xF8
    1BDC: 39 01    CMP   A,0x1
    1BDE: A0 0B    JZ    0x1BEA
    1BE0: 3D 02 00 CMP   [X+2],0x0
    1BE3: B1 C6    JNZ   0x1DAA
    1BE5: 3D 03 01 CMP   [X+3],0x1
    1BE8: B1 C1    JNZ   0x1DAA
(0107) 			{
(0108) 				
(0109) 				flag =1;
    1BEA: 56 03 01 MOV   [X+3],0x1
    1BED: 56 02 00 MOV   [X+2],0x0
(0110) 				hannMul = 0.5*(1-cos(0.0494*i));
    1BF0: 62 D0 00 MOV   REG[0xD0],0x0
    1BF3: 52 01    MOV   A,[X+1]
    1BF5: 53 96    MOV   [__r3],A
    1BF7: 52 00    MOV   A,[X+0]
    1BF9: 53 97    MOV   [__r2],A
    1BFB: 47 97 80 TST   [__r2],0x80
    1BFE: A0 09    JZ    0x1C08
    1C00: 55 98 FF MOV   [__r1],0xFF
    1C03: 55 99 FF MOV   [__r0],0xFF
    1C06: 80 0A    JMP   0x1C11
    1C08: 62 D0 00 MOV   REG[0xD0],0x0
    1C0B: 55 98 00 MOV   [__r1],0x0
    1C0E: 55 99 00 MOV   [__r0],0x0
    1C11: 62 D0 00 MOV   REG[0xD0],0x0
    1C14: 51 99    MOV   A,[__r0]
    1C16: 08       PUSH  A
    1C17: 51 98    MOV   A,[__r1]
    1C19: 08       PUSH  A
    1C1A: 51 97    MOV   A,[__r2]
    1C1C: 08       PUSH  A
    1C1D: 51 96    MOV   A,[__r3]
    1C1F: 08       PUSH  A
    1C20: 7C 3D 4F LCALL 0x3D4F
    1C23: 18       POP   A
    1C24: 53 96    MOV   [__r3],A
    1C26: 18       POP   A
    1C27: 53 97    MOV   [__r2],A
    1C29: 18       POP   A
    1C2A: 53 98    MOV   [__r1],A
    1C2C: 18       POP   A
    1C2D: 08       PUSH  A
    1C2E: 51 98    MOV   A,[__r1]
    1C30: 08       PUSH  A
    1C31: 51 97    MOV   A,[__r2]
    1C33: 08       PUSH  A
    1C34: 51 96    MOV   A,[__r3]
    1C36: 08       PUSH  A
    1C37: 50 3D    MOV   A,0x3D
    1C39: 08       PUSH  A
    1C3A: 50 4A    MOV   A,0x4A
    1C3C: 08       PUSH  A
    1C3D: 50 57    MOV   A,0x57
    1C3F: 08       PUSH  A
    1C40: 50 A8    MOV   A,0xA8
    1C42: 08       PUSH  A
    1C43: 7C 3B 4B LCALL 0x3B4B
    1C46: 18       POP   A
    1C47: 53 96    MOV   [__r3],A
    1C49: 18       POP   A
    1C4A: 53 97    MOV   [__r2],A
    1C4C: 18       POP   A
    1C4D: 53 98    MOV   [__r1],A
    1C4F: 18       POP   A
    1C50: 38 FC    ADD   SP,0xFC
    1C52: 08       PUSH  A
    1C53: 51 98    MOV   A,[__r1]
    1C55: 08       PUSH  A
    1C56: 51 97    MOV   A,[__r2]
    1C58: 08       PUSH  A
    1C59: 51 96    MOV   A,[__r3]
    1C5B: 08       PUSH  A
    1C5C: 7C 49 E7 LCALL _cosf
    1C5F: 38 FC    ADD   SP,0xFC
    1C61: 62 D0 00 MOV   REG[0xD0],0x0
    1C64: 51 99    MOV   A,[__r0]
    1C66: 08       PUSH  A
    1C67: 51 98    MOV   A,[__r1]
    1C69: 08       PUSH  A
    1C6A: 51 97    MOV   A,[__r2]
    1C6C: 08       PUSH  A
    1C6D: 51 96    MOV   A,[__r3]
    1C6F: 08       PUSH  A
    1C70: 50 3F    MOV   A,0x3F
    1C72: 08       PUSH  A
    1C73: 50 80    MOV   A,0x80
    1C75: 08       PUSH  A
    1C76: 50 00    MOV   A,0x0
    1C78: 08       PUSH  A
    1C79: 08       PUSH  A
    1C7A: 7C 3C 75 LCALL 0x3C75
    1C7D: 18       POP   A
    1C7E: 53 96    MOV   [__r3],A
    1C80: 18       POP   A
    1C81: 53 97    MOV   [__r2],A
    1C83: 18       POP   A
    1C84: 53 98    MOV   [__r1],A
    1C86: 18       POP   A
    1C87: 38 FC    ADD   SP,0xFC
    1C89: 08       PUSH  A
    1C8A: 51 98    MOV   A,[__r1]
    1C8C: 08       PUSH  A
    1C8D: 51 97    MOV   A,[__r2]
    1C8F: 08       PUSH  A
    1C90: 51 96    MOV   A,[__r3]
    1C92: 08       PUSH  A
    1C93: 50 3F    MOV   A,0x3F
    1C95: 08       PUSH  A
    1C96: 50 00    MOV   A,0x0
    1C98: 08       PUSH  A
    1C99: 08       PUSH  A
    1C9A: 08       PUSH  A
    1C9B: 7C 3B 4B LCALL 0x3B4B
    1C9E: 18       POP   A
    1C9F: 62 D0 00 MOV   REG[0xD0],0x0
    1CA2: 53 B4    MOV   [hannMul+3],A
    1CA4: 18       POP   A
    1CA5: 53 B3    MOV   [hannMul+2],A
    1CA7: 18       POP   A
    1CA8: 53 B2    MOV   [hannMul+1],A
    1CAA: 18       POP   A
    1CAB: 53 B1    MOV   [hannMul],A
    1CAD: 38 FC    ADD   SP,0xFC
(0111) 				hannValue = hannMul * hannValue;
    1CAF: 62 D0 00 MOV   REG[0xD0],0x0
    1CB2: 51 AD    MOV   A,[hannValue]
    1CB4: 08       PUSH  A
    1CB5: 51 AE    MOV   A,[hannValue+1]
    1CB7: 08       PUSH  A
    1CB8: 51 AF    MOV   A,[hannValue+2]
    1CBA: 08       PUSH  A
    1CBB: 51 B0    MOV   A,[hannValue+3]
    1CBD: 08       PUSH  A
    1CBE: 62 D0 00 MOV   REG[0xD0],0x0
    1CC1: 51 B1    MOV   A,[hannMul]
    1CC3: 08       PUSH  A
    1CC4: 51 B2    MOV   A,[hannMul+1]
    1CC6: 08       PUSH  A
    1CC7: 51 B3    MOV   A,[hannMul+2]
    1CC9: 08       PUSH  A
    1CCA: 51 B4    MOV   A,[hannMul+3]
    1CCC: 08       PUSH  A
    1CCD: 62 D0 00 MOV   REG[0xD0],0x0
    1CD0: 7C 3B 4B LCALL 0x3B4B
    1CD3: 18       POP   A
    1CD4: 62 D0 00 MOV   REG[0xD0],0x0
    1CD7: 53 B0    MOV   [hannValue+3],A
    1CD9: 18       POP   A
    1CDA: 53 AF    MOV   [hannValue+2],A
    1CDC: 18       POP   A
    1CDD: 53 AE    MOV   [hannValue+1],A
    1CDF: 18       POP   A
    1CE0: 53 AD    MOV   [hannValue],A
    1CE2: 38 FC    ADD   SP,0xFC
(0112) 				hannValue1 = hannMul*hannValue1;
    1CE4: 62 D0 00 MOV   REG[0xD0],0x0
    1CE7: 51 A9    MOV   A,[hannValue1]
    1CE9: 08       PUSH  A
    1CEA: 51 AA    MOV   A,[hannValue1+1]
    1CEC: 08       PUSH  A
    1CED: 51 AB    MOV   A,[hannValue1+2]
    1CEF: 08       PUSH  A
    1CF0: 51 AC    MOV   A,[hannValue1+3]
    1CF2: 08       PUSH  A
    1CF3: 62 D0 00 MOV   REG[0xD0],0x0
    1CF6: 51 B1    MOV   A,[hannMul]
    1CF8: 08       PUSH  A
    1CF9: 51 B2    MOV   A,[hannMul+1]
    1CFB: 08       PUSH  A
    1CFC: 51 B3    MOV   A,[hannMul+2]
    1CFE: 08       PUSH  A
    1CFF: 51 B4    MOV   A,[hannMul+3]
    1D01: 08       PUSH  A
    1D02: 62 D0 00 MOV   REG[0xD0],0x0
    1D05: 7C 3B 4B LCALL 0x3B4B
    1D08: 18       POP   A
    1D09: 62 D0 00 MOV   REG[0xD0],0x0
    1D0C: 53 AC    MOV   [hannValue1+3],A
    1D0E: 18       POP   A
    1D0F: 53 AB    MOV   [hannValue1+2],A
    1D11: 18       POP   A
    1D12: 53 AA    MOV   [hannValue1+1],A
    1D14: 18       POP   A
    1D15: 53 A9    MOV   [hannValue1],A
    1D17: 38 FC    ADD   SP,0xFC
(0113) 				data_re[i] = hannValue;
    1D19: 62 D0 00 MOV   REG[0xD0],0x0
    1D1C: 52 01    MOV   A,[X+1]
    1D1E: 53 98    MOV   [__r1],A
    1D20: 52 00    MOV   A,[X+0]
    1D22: 53 99    MOV   [__r0],A
    1D24: 65 98    ASL   [__r1]
    1D26: 6B 99    RLC   [__r0]
    1D28: 65 98    ASL   [__r1]
    1D2A: 6B 99    RLC   [__r0]
    1D2C: 06 98 00 ADD   [__r1],0x0
    1D2F: 0E 99 03 ADC   [__r0],0x3
    1D32: 51 99    MOV   A,[__r0]
    1D34: 60 D5    MOV   REG[0xD5],A
    1D36: 62 D0 00 MOV   REG[0xD0],0x0
    1D39: 51 AD    MOV   A,[hannValue]
    1D3B: 62 D0 00 MOV   REG[0xD0],0x0
    1D3E: 3F 98    MVI   [__r1],A
    1D40: 62 D0 00 MOV   REG[0xD0],0x0
    1D43: 51 AE    MOV   A,[hannValue+1]
    1D45: 62 D0 00 MOV   REG[0xD0],0x0
    1D48: 3F 98    MVI   [__r1],A
    1D4A: 62 D0 00 MOV   REG[0xD0],0x0
    1D4D: 51 AF    MOV   A,[hannValue+2]
    1D4F: 62 D0 00 MOV   REG[0xD0],0x0
    1D52: 3F 98    MVI   [__r1],A
    1D54: 62 D0 00 MOV   REG[0xD0],0x0
    1D57: 51 B0    MOV   A,[hannValue+3]
    1D59: 62 D0 00 MOV   REG[0xD0],0x0
    1D5C: 3F 98    MVI   [__r1],A
(0114) 				data_re1[i] = hannValue1;
    1D5E: 52 01    MOV   A,[X+1]
    1D60: 53 98    MOV   [__r1],A
    1D62: 52 00    MOV   A,[X+0]
    1D64: 53 99    MOV   [__r0],A
    1D66: 65 98    ASL   [__r1]
    1D68: 6B 99    RLC   [__r0]
    1D6A: 65 98    ASL   [__r1]
    1D6C: 6B 99    RLC   [__r0]
    1D6E: 06 98 00 ADD   [__r1],0x0
    1D71: 0E 99 01 ADC   [__r0],0x1
    1D74: 51 99    MOV   A,[__r0]
    1D76: 60 D5    MOV   REG[0xD5],A
    1D78: 62 D0 00 MOV   REG[0xD0],0x0
    1D7B: 51 A9    MOV   A,[hannValue1]
    1D7D: 62 D0 00 MOV   REG[0xD0],0x0
    1D80: 3F 98    MVI   [__r1],A
    1D82: 62 D0 00 MOV   REG[0xD0],0x0
    1D85: 51 AA    MOV   A,[hannValue1+1]
    1D87: 62 D0 00 MOV   REG[0xD0],0x0
    1D8A: 3F 98    MVI   [__r1],A
    1D8C: 62 D0 00 MOV   REG[0xD0],0x0
    1D8F: 51 AB    MOV   A,[hannValue1+2]
    1D91: 62 D0 00 MOV   REG[0xD0],0x0
    1D94: 3F 98    MVI   [__r1],A
    1D96: 62 D0 00 MOV   REG[0xD0],0x0
    1D99: 51 AC    MOV   A,[hannValue1+3]
    1D9B: 62 D0 00 MOV   REG[0xD0],0x0
    1D9E: 3F 98    MVI   [__r1],A
(0115) 				DUALADC_ClearFlag();
    1DA0: 10       PUSH  X
    1DA1: 7C 0B B9 LCALL _DUALADC_ClearFlag
    1DA4: 20       POP   X
(0116) 				i++;
    1DA5: 77 01    INC   [X+1]
    1DA7: 0F 00 00 ADC   [X+0],0x0
(0117) 			}
(0118) 		}
    1DAA: 3D 00 00 CMP   [X+0],0x0
    1DAD: BD 5B    JNZ   0x1B09
    1DAF: 3D 01 40 CMP   [X+1],0x40
    1DB2: BD 56    JNZ   0x1B09
(0119) 		FFT(1,exponent,data_re,data_imm,mod);
    1DB4: 50 42    MOV   A,0x42
    1DB6: 08       PUSH  A
    1DB7: 50 80    MOV   A,0x80
    1DB9: 08       PUSH  A
    1DBA: 50 00    MOV   A,0x0
    1DBC: 08       PUSH  A
    1DBD: 08       PUSH  A
    1DBE: 7C 4C 3F LCALL _logf
    1DC1: 62 D0 00 MOV   REG[0xD0],0x0
    1DC4: 51 99    MOV   A,[__r0]
    1DC6: 54 0C    MOV   [X+12],A
    1DC8: 51 98    MOV   A,[__r1]
    1DCA: 54 0D    MOV   [X+13],A
    1DCC: 51 97    MOV   A,[__r2]
    1DCE: 54 0E    MOV   [X+14],A
    1DD0: 51 96    MOV   A,[__r3]
    1DD2: 54 0F    MOV   [X+15],A
    1DD4: 50 40    MOV   A,0x40
    1DD6: 08       PUSH  A
    1DD7: 50 00    MOV   A,0x0
    1DD9: 08       PUSH  A
    1DDA: 08       PUSH  A
    1DDB: 08       PUSH  A
    1DDC: 7C 4C 3F LCALL _logf
    1DDF: 38 F8    ADD   SP,0xF8
    1DE1: 50 02    MOV   A,0x2
    1DE3: 08       PUSH  A
    1DE4: 50 00    MOV   A,0x0
    1DE6: 08       PUSH  A
    1DE7: 50 04    MOV   A,0x4
    1DE9: 08       PUSH  A
    1DEA: 50 00    MOV   A,0x0
    1DEC: 08       PUSH  A
    1DED: 50 03    MOV   A,0x3
    1DEF: 08       PUSH  A
    1DF0: 50 00    MOV   A,0x0
    1DF2: 08       PUSH  A
    1DF3: 62 D0 00 MOV   REG[0xD0],0x0
    1DF6: 51 99    MOV   A,[__r0]
    1DF8: 08       PUSH  A
    1DF9: 51 98    MOV   A,[__r1]
    1DFB: 08       PUSH  A
    1DFC: 51 97    MOV   A,[__r2]
    1DFE: 08       PUSH  A
    1DFF: 51 96    MOV   A,[__r3]
    1E01: 08       PUSH  A
    1E02: 52 0C    MOV   A,[X+12]
    1E04: 08       PUSH  A
    1E05: 52 0D    MOV   A,[X+13]
    1E07: 08       PUSH  A
    1E08: 52 0E    MOV   A,[X+14]
    1E0A: 08       PUSH  A
    1E0B: 52 0F    MOV   A,[X+15]
    1E0D: 08       PUSH  A
    1E0E: 7C 3A 68 LCALL 0x3A68
    1E11: 18       POP   A
    1E12: 53 96    MOV   [__r3],A
    1E14: 18       POP   A
    1E15: 53 97    MOV   [__r2],A
    1E17: 18       POP   A
    1E18: 53 98    MOV   [__r1],A
    1E1A: 18       POP   A
    1E1B: 38 FC    ADD   SP,0xFC
    1E1D: 08       PUSH  A
    1E1E: 51 98    MOV   A,[__r1]
    1E20: 08       PUSH  A
    1E21: 51 97    MOV   A,[__r2]
    1E23: 08       PUSH  A
    1E24: 51 96    MOV   A,[__r3]
    1E26: 08       PUSH  A
    1E27: 50 00    MOV   A,0x0
    1E29: 08       PUSH  A
    1E2A: 50 01    MOV   A,0x1
    1E2C: 08       PUSH  A
    1E2D: 7C 0B F3 LCALL __UserModules_end|_FFT|__text_start|_FFT
    1E30: 38 F4    ADD   SP,0xF4
(0120) 		serialDataOut();
    1E32: 90 04    CALL  _serialDataOut
(0121) 
(0122) 	return ;
    1E34: 38 F0    ADD   SP,0xF0
    1E36: 20       POP   X
    1E37: 7F       RET   
(0123) }
(0124) 
(0125) 
(0126) void serialDataOut(void )
(0127) {
_serialDataOut:
  temp                 --> X+6
  Status               --> X+4
  temp1                --> X+2
  i                    --> X+0
    1E38: 10       PUSH  X
    1E39: 4F       MOV   X,SP
    1E3A: 38 0A    ADD   SP,0xA
(0128) 	char temp[4],*temp1;
(0129) 	int i,Status;
(0130) 	UART_CPutString("\n\rFFT OUTPUT:\n\r");
    1E3C: 10       PUSH  X
    1E3D: 50 01    MOV   A,0x1
    1E3F: 08       PUSH  A
    1E40: 50 F5    MOV   A,0xF5
    1E42: 5C       MOV   X,A
    1E43: 18       POP   A
    1E44: 7C 05 D8 LCALL _UART_CPutString
    1E47: 20       POP   X
(0131) 	for (i=0;i<N_points;i++)
    1E48: 56 01 00 MOV   [X+1],0x0
    1E4B: 56 00 00 MOV   [X+0],0x0
(0132) 	{
(0133) 		
(0134) 		UART_CPutString("{");
    1E4E: 10       PUSH  X
    1E4F: 50 01    MOV   A,0x1
    1E51: 08       PUSH  A
    1E52: 50 F3    MOV   A,0xF3
    1E54: 5C       MOV   X,A
    1E55: 18       POP   A
    1E56: 7C 05 D8 LCALL _UART_CPutString
    1E59: 20       POP   X
(0135) 		//itoa(temp,mod[i],10);
(0136) 		temp1 = ftoa(mod[i], &Status);
    1E5A: 62 D0 00 MOV   REG[0xD0],0x0
    1E5D: 5A 98    MOV   [__r1],X
    1E5F: 06 98 04 ADD   [__r1],0x4
    1E62: 50 07    MOV   A,0x7
    1E64: 08       PUSH  A
    1E65: 51 98    MOV   A,[__r1]
    1E67: 08       PUSH  A
    1E68: 52 01    MOV   A,[X+1]
    1E6A: 53 98    MOV   [__r1],A
    1E6C: 52 00    MOV   A,[X+0]
    1E6E: 53 99    MOV   [__r0],A
    1E70: 65 98    ASL   [__r1]
    1E72: 6B 99    RLC   [__r0]
    1E74: 65 98    ASL   [__r1]
    1E76: 6B 99    RLC   [__r0]
    1E78: 06 98 00 ADD   [__r1],0x0
    1E7B: 0E 99 02 ADC   [__r0],0x2
    1E7E: 51 99    MOV   A,[__r0]
    1E80: 60 D4    MOV   REG[0xD4],A
    1E82: 3E 98    MVI   A,[__r1]
    1E84: 53 95    MOV   [__r4],A
    1E86: 3E 98    MVI   A,[__r1]
    1E88: 53 94    MOV   [__r5],A
    1E8A: 3E 98    MVI   A,[__r1]
    1E8C: 53 93    MOV   [__r6],A
    1E8E: 3E 98    MVI   A,[__r1]
    1E90: 53 92    MOV   [__r7],A
    1E92: 51 95    MOV   A,[__r4]
    1E94: 08       PUSH  A
    1E95: 51 94    MOV   A,[__r5]
    1E97: 08       PUSH  A
    1E98: 51 93    MOV   A,[__r6]
    1E9A: 08       PUSH  A
    1E9B: 51 92    MOV   A,[__r7]
    1E9D: 08       PUSH  A
    1E9E: 7C 40 71 LCALL _ftoa
    1EA1: 38 FA    ADD   SP,0xFA
    1EA3: 62 D0 00 MOV   REG[0xD0],0x0
    1EA6: 51 98    MOV   A,[__r1]
    1EA8: 54 03    MOV   [X+3],A
    1EAA: 51 99    MOV   A,[__r0]
    1EAC: 54 02    MOV   [X+2],A
(0137) 		UART_PutString(temp1);
    1EAE: 10       PUSH  X
    1EAF: 52 02    MOV   A,[X+2]
    1EB1: 08       PUSH  A
    1EB2: 52 03    MOV   A,[X+3]
    1EB4: 5C       MOV   X,A
    1EB5: 18       POP   A
    1EB6: 7C 05 72 LCALL _UART_PutString
(0138) 		//UART_PutString(temp);
(0139) 		UART_CPutString("},");
    1EB9: 50 01    MOV   A,0x1
    1EBB: 08       PUSH  A
    1EBC: 50 F0    MOV   A,0xF0
    1EBE: 5C       MOV   X,A
    1EBF: 18       POP   A
    1EC0: 7C 05 D8 LCALL _UART_CPutString
    1EC3: 20       POP   X
(0140) 		
(0141) 	}
    1EC4: 77 01    INC   [X+1]
    1EC6: 0F 00 00 ADC   [X+0],0x0
    1EC9: 52 01    MOV   A,[X+1]
    1ECB: 11 40    SUB   A,0x40
    1ECD: 52 00    MOV   A,[X+0]
    1ECF: 31 80    XOR   A,0x80
    1ED1: 19 80    SBB   A,0x80
    1ED3: CF 7A    JC    0x1E4E
(0142) 	UART_CPutString("\n\r");
    1ED5: 10       PUSH  X
    1ED6: 50 01    MOV   A,0x1
    1ED8: 08       PUSH  A
    1ED9: 50 ED    MOV   A,0xED
    1EDB: 5C       MOV   X,A
    1EDC: 18       POP   A
    1EDD: 7C 05 D8 LCALL _UART_CPutString
    1EE0: 20       POP   X
    1EE1: 38 F6    ADD   SP,0xF6
    1EE3: 20       POP   X
    1EE4: 7F       RET   
(0143) 	
(0144) }
(0145) 
(0146) void matlabOut(void )
(0147) {
_matlabOut:
  i                    --> X+6
  Status               --> X+4
  temp1                --> X+2
  j                    --> X+0
    1EE5: 10       PUSH  X
    1EE6: 4F       MOV   X,SP
    1EE7: 38 08    ADD   SP,0x8
(0148) 	int i,j,Status;
(0149) 	char *temp1;
(0150) 	for(i=0;i<4;i++)
    1EE9: 56 07 00 MOV   [X+7],0x0
    1EEC: 56 06 00 MOV   [X+6],0x0
(0151) 	{
(0152) 		for(j=0;j<512;j++)
    1EEF: 56 01 00 MOV   [X+1],0x0
    1EF2: 56 00 00 MOV   [X+0],0x0
(0153) 		{
(0154) 			while(DUALADC_fIsDataAvailable() == 0); 
    1EF5: 10       PUSH  X
    1EF6: 7C 0B 8B LCALL _DUALADC_fIsData|_DUALADC_fIsDataAvailable|DUALADC_fIsData|DUALADC_fIsDataAvailable
    1EF9: 20       POP   X
    1EFA: 62 D0 00 MOV   REG[0xD0],0x0
    1EFD: 39 00    CMP   A,0x0
    1EFF: AF F5    JZ    0x1EF5
(0155) 			hannValue = DUALADC_iGetData1ClearFlag();
    1F01: 10       PUSH  X
    1F02: 7C 0B 93 LCALL _DUALADC_iGetData1ClearFlag
    1F05: 62 D0 00 MOV   REG[0xD0],0x0
    1F08: 5A 99    MOV   [__r0],X
    1F0A: 20       POP   X
    1F0B: 62 D0 00 MOV   REG[0xD0],0x0
    1F0E: 53 B0    MOV   [hannValue+3],A
    1F10: 62 D0 00 MOV   REG[0xD0],0x0
    1F13: 51 99    MOV   A,[__r0]
    1F15: 62 D0 00 MOV   REG[0xD0],0x0
    1F18: 53 AF    MOV   [hannValue+2],A
    1F1A: 47 AF 80 TST   [hannValue+2],0x80
    1F1D: A0 09    JZ    0x1F27
    1F1F: 55 AE FF MOV   [hannValue+1],0xFF
    1F22: 55 AD FF MOV   [hannValue],0xFF
    1F25: 80 0A    JMP   0x1F30
    1F27: 62 D0 00 MOV   REG[0xD0],0x0
    1F2A: 55 AE 00 MOV   [hannValue+1],0x0
    1F2D: 55 AD 00 MOV   [hannValue],0x0
    1F30: 62 D0 00 MOV   REG[0xD0],0x0
    1F33: 51 AD    MOV   A,[hannValue]
    1F35: 08       PUSH  A
    1F36: 51 AE    MOV   A,[hannValue+1]
    1F38: 08       PUSH  A
    1F39: 51 AF    MOV   A,[hannValue+2]
    1F3B: 08       PUSH  A
    1F3C: 51 B0    MOV   A,[hannValue+3]
    1F3E: 08       PUSH  A
    1F3F: 62 D0 00 MOV   REG[0xD0],0x0
    1F42: 7C 3D 4F LCALL 0x3D4F
    1F45: 18       POP   A
    1F46: 62 D0 00 MOV   REG[0xD0],0x0
    1F49: 53 B0    MOV   [hannValue+3],A
    1F4B: 18       POP   A
    1F4C: 53 AF    MOV   [hannValue+2],A
    1F4E: 18       POP   A
    1F4F: 53 AE    MOV   [hannValue+1],A
    1F51: 18       POP   A
    1F52: 53 AD    MOV   [hannValue],A
(0156) 			hannMul = 0.5*(1-cos(0.0494*j));
    1F54: 62 D0 00 MOV   REG[0xD0],0x0
    1F57: 52 01    MOV   A,[X+1]
    1F59: 53 96    MOV   [__r3],A
    1F5B: 52 00    MOV   A,[X+0]
    1F5D: 53 97    MOV   [__r2],A
    1F5F: 47 97 80 TST   [__r2],0x80
    1F62: A0 09    JZ    0x1F6C
    1F64: 55 98 FF MOV   [__r1],0xFF
    1F67: 55 99 FF MOV   [__r0],0xFF
    1F6A: 80 0A    JMP   0x1F75
    1F6C: 62 D0 00 MOV   REG[0xD0],0x0
    1F6F: 55 98 00 MOV   [__r1],0x0
    1F72: 55 99 00 MOV   [__r0],0x0
    1F75: 62 D0 00 MOV   REG[0xD0],0x0
    1F78: 51 99    MOV   A,[__r0]
    1F7A: 08       PUSH  A
    1F7B: 51 98    MOV   A,[__r1]
    1F7D: 08       PUSH  A
    1F7E: 51 97    MOV   A,[__r2]
    1F80: 08       PUSH  A
    1F81: 51 96    MOV   A,[__r3]
    1F83: 08       PUSH  A
    1F84: 7C 3D 4F LCALL 0x3D4F
    1F87: 18       POP   A
    1F88: 53 96    MOV   [__r3],A
    1F8A: 18       POP   A
    1F8B: 53 97    MOV   [__r2],A
    1F8D: 18       POP   A
    1F8E: 53 98    MOV   [__r1],A
    1F90: 18       POP   A
    1F91: 08       PUSH  A
    1F92: 51 98    MOV   A,[__r1]
    1F94: 08       PUSH  A
    1F95: 51 97    MOV   A,[__r2]
    1F97: 08       PUSH  A
    1F98: 51 96    MOV   A,[__r3]
    1F9A: 08       PUSH  A
    1F9B: 50 3D    MOV   A,0x3D
    1F9D: 08       PUSH  A
    1F9E: 50 4A    MOV   A,0x4A
    1FA0: 08       PUSH  A
    1FA1: 50 57    MOV   A,0x57
    1FA3: 08       PUSH  A
    1FA4: 50 A8    MOV   A,0xA8
    1FA6: 08       PUSH  A
    1FA7: 7C 3B 4B LCALL 0x3B4B
    1FAA: 18       POP   A
    1FAB: 53 96    MOV   [__r3],A
    1FAD: 18       POP   A
    1FAE: 53 97    MOV   [__r2],A
    1FB0: 18       POP   A
    1FB1: 53 98    MOV   [__r1],A
    1FB3: 18       POP   A
    1FB4: 38 FC    ADD   SP,0xFC
    1FB6: 08       PUSH  A
    1FB7: 51 98    MOV   A,[__r1]
    1FB9: 08       PUSH  A
    1FBA: 51 97    MOV   A,[__r2]
    1FBC: 08       PUSH  A
    1FBD: 51 96    MOV   A,[__r3]
    1FBF: 08       PUSH  A
    1FC0: 7C 49 E7 LCALL _cosf
    1FC3: 38 FC    ADD   SP,0xFC
    1FC5: 62 D0 00 MOV   REG[0xD0],0x0
    1FC8: 51 99    MOV   A,[__r0]
    1FCA: 08       PUSH  A
    1FCB: 51 98    MOV   A,[__r1]
    1FCD: 08       PUSH  A
    1FCE: 51 97    MOV   A,[__r2]
    1FD0: 08       PUSH  A
    1FD1: 51 96    MOV   A,[__r3]
    1FD3: 08       PUSH  A
    1FD4: 50 3F    MOV   A,0x3F
    1FD6: 08       PUSH  A
    1FD7: 50 80    MOV   A,0x80
    1FD9: 08       PUSH  A
    1FDA: 50 00    MOV   A,0x0
    1FDC: 08       PUSH  A
    1FDD: 08       PUSH  A
    1FDE: 7C 3C 75 LCALL 0x3C75
    1FE1: 18       POP   A
    1FE2: 53 96    MOV   [__r3],A
    1FE4: 18       POP   A
    1FE5: 53 97    MOV   [__r2],A
    1FE7: 18       POP   A
    1FE8: 53 98    MOV   [__r1],A
    1FEA: 18       POP   A
    1FEB: 38 FC    ADD   SP,0xFC
    1FED: 08       PUSH  A
    1FEE: 51 98    MOV   A,[__r1]
    1FF0: 08       PUSH  A
    1FF1: 51 97    MOV   A,[__r2]
    1FF3: 08       PUSH  A
    1FF4: 51 96    MOV   A,[__r3]
    1FF6: 08       PUSH  A
    1FF7: 50 3F    MOV   A,0x3F
    1FF9: 08       PUSH  A
    1FFA: 50 00    MOV   A,0x0
    1FFC: 08       PUSH  A
    1FFD: 08       PUSH  A
    1FFE: 08       PUSH  A
    1FFF: 7C 3B 4B LCALL 0x3B4B
    2002: 18       POP   A
    2003: 62 D0 00 MOV   REG[0xD0],0x0
    2006: 53 B4    MOV   [hannMul+3],A
    2008: 18       POP   A
    2009: 53 B3    MOV   [hannMul+2],A
    200B: 18       POP   A
    200C: 53 B2    MOV   [hannMul+1],A
    200E: 18       POP   A
    200F: 53 B1    MOV   [hannMul],A
    2011: 38 FC    ADD   SP,0xFC
(0157) 			hannValue = hannMul * hannValue;
    2013: 62 D0 00 MOV   REG[0xD0],0x0
    2016: 51 AD    MOV   A,[hannValue]
    2018: 08       PUSH  A
    2019: 51 AE    MOV   A,[hannValue+1]
    201B: 08       PUSH  A
    201C: 51 AF    MOV   A,[hannValue+2]
    201E: 08       PUSH  A
    201F: 51 B0    MOV   A,[hannValue+3]
    2021: 08       PUSH  A
    2022: 62 D0 00 MOV   REG[0xD0],0x0
    2025: 51 B1    MOV   A,[hannMul]
    2027: 08       PUSH  A
    2028: 51 B2    MOV   A,[hannMul+1]
    202A: 08       PUSH  A
    202B: 51 B3    MOV   A,[hannMul+2]
    202D: 08       PUSH  A
    202E: 51 B4    MOV   A,[hannMul+3]
    2030: 08       PUSH  A
    2031: 62 D0 00 MOV   REG[0xD0],0x0
    2034: 7C 3B 4B LCALL 0x3B4B
    2037: 18       POP   A
    2038: 62 D0 00 MOV   REG[0xD0],0x0
    203B: 53 B0    MOV   [hannValue+3],A
    203D: 18       POP   A
    203E: 53 AF    MOV   [hannValue+2],A
    2040: 18       POP   A
    2041: 53 AE    MOV   [hannValue+1],A
    2043: 18       POP   A
    2044: 53 AD    MOV   [hannValue],A
    2046: 38 FC    ADD   SP,0xFC
(0158) 			temp1 = ftoa(hannValue, &Status);
    2048: 62 D0 00 MOV   REG[0xD0],0x0
    204B: 5A 98    MOV   [__r1],X
    204D: 06 98 04 ADD   [__r1],0x4
    2050: 50 07    MOV   A,0x7
    2052: 08       PUSH  A
    2053: 51 98    MOV   A,[__r1]
    2055: 08       PUSH  A
    2056: 62 D0 00 MOV   REG[0xD0],0x0
    2059: 51 AD    MOV   A,[hannValue]
    205B: 08       PUSH  A
    205C: 51 AE    MOV   A,[hannValue+1]
    205E: 08       PUSH  A
    205F: 51 AF    MOV   A,[hannValue+2]
    2061: 08       PUSH  A
    2062: 51 B0    MOV   A,[hannValue+3]
    2064: 08       PUSH  A
    2065: 7C 40 71 LCALL _ftoa
    2068: 38 FA    ADD   SP,0xFA
    206A: 62 D0 00 MOV   REG[0xD0],0x0
    206D: 51 98    MOV   A,[__r1]
    206F: 54 03    MOV   [X+3],A
    2071: 51 99    MOV   A,[__r0]
    2073: 54 02    MOV   [X+2],A
(0159) 			UART_PutString(temp1);
    2075: 10       PUSH  X
    2076: 52 02    MOV   A,[X+2]
    2078: 08       PUSH  A
    2079: 52 03    MOV   A,[X+3]
    207B: 5C       MOV   X,A
    207C: 18       POP   A
    207D: 7C 05 72 LCALL _UART_PutString
(0160) 			UART_CPutString("\n\r");
    2080: 50 01    MOV   A,0x1
    2082: 08       PUSH  A
    2083: 50 ED    MOV   A,0xED
    2085: 5C       MOV   X,A
    2086: 18       POP   A
    2087: 7C 05 D8 LCALL _UART_CPutString
    208A: 20       POP   X
(0161) 			
(0162) 		}
    208B: 77 01    INC   [X+1]
    208D: 0F 00 00 ADC   [X+0],0x0
    2090: 52 01    MOV   A,[X+1]
    2092: 11 00    SUB   A,0x0
    2094: 52 00    MOV   A,[X+0]
    2096: 31 80    XOR   A,0x80
    2098: 19 82    SBB   A,0x82
    209A: CE 5A    JC    0x1EF5
(0163) 	}
    209C: 77 07    INC   [X+7]
    209E: 0F 06 00 ADC   [X+6],0x0
    20A1: 52 07    MOV   A,[X+7]
    20A3: 11 04    SUB   A,0x4
    20A5: 52 06    MOV   A,[X+6]
    20A7: 31 80    XOR   A,0x80
    20A9: 19 80    SBB   A,0x80
    20AB: CE 43    JC    0x1EEF
    20AD: 38 F8    ADD   SP,0xF8
    20AF: 20       POP   X
    20B0: 7F       RET   
(0164) }
(0165) 
(0166) void LCD_Clear(void)
(0167) {
(0168) 	LCD_Position(0,0);
_LCD_Clear:
    20B1: 10       PUSH  X
    20B2: 50 00    MOV   A,0x0
    20B4: 57 00    MOV   X,0x0
    20B6: 7C 09 F2 LCALL _LCD_Position
(0169) 	LCD_PrCString("                ");	
    20B9: 50 01    MOV   A,0x1
    20BB: 08       PUSH  A
    20BC: 50 DC    MOV   A,0xDC
    20BE: 5C       MOV   X,A
    20BF: 18       POP   A
    20C0: 7C 08 6D LCALL _LCD_PrCString
(0170) 	LCD_Position(1,0);
    20C3: 57 00    MOV   X,0x0
    20C5: 50 01    MOV   A,0x1
    20C7: 7C 09 F2 LCALL _LCD_Position
(0171) 	LCD_PrCString("                ");	
    20CA: 50 01    MOV   A,0x1
    20CC: 08       PUSH  A
    20CD: 50 DC    MOV   A,0xDC
    20CF: 5C       MOV   X,A
    20D0: 18       POP   A
    20D1: 7C 08 6D LCALL _LCD_PrCString
    20D4: 20       POP   X
    20D5: 7F       RET   
(0172) }
(0173) 
(0174) void soundLocalize(void )
(0175) {
_soundLocalize:
    20D6: 10       PUSH  X
    20D7: 4F       MOV   X,SP
    20D8: 38 04    ADD   SP,0x4
(0176) 	getFFTOutput();
    20DA: 99 4D    CALL  _getFFTOutput
(0177) 	FFT(1,exponent,data_re1,data_imm1,mod);
    20DC: 50 42    MOV   A,0x42
    20DE: 08       PUSH  A
    20DF: 50 80    MOV   A,0x80
    20E1: 08       PUSH  A
    20E2: 50 00    MOV   A,0x0
    20E4: 08       PUSH  A
    20E5: 08       PUSH  A
    20E6: 7C 4C 3F LCALL _logf
    20E9: 62 D0 00 MOV   REG[0xD0],0x0
    20EC: 51 99    MOV   A,[__r0]
    20EE: 54 00    MOV   [X+0],A
    20F0: 51 98    MOV   A,[__r1]
    20F2: 54 01    MOV   [X+1],A
    20F4: 51 97    MOV   A,[__r2]
    20F6: 54 02    MOV   [X+2],A
    20F8: 51 96    MOV   A,[__r3]
    20FA: 54 03    MOV   [X+3],A
    20FC: 50 40    MOV   A,0x40
    20FE: 08       PUSH  A
    20FF: 50 00    MOV   A,0x0
    2101: 08       PUSH  A
    2102: 08       PUSH  A
    2103: 08       PUSH  A
    2104: 7C 4C 3F LCALL _logf
    2107: 38 F8    ADD   SP,0xF8
    2109: 50 02    MOV   A,0x2
    210B: 08       PUSH  A
    210C: 50 00    MOV   A,0x0
    210E: 08       PUSH  A
    210F: 50 05    MOV   A,0x5
    2111: 08       PUSH  A
    2112: 50 00    MOV   A,0x0
    2114: 08       PUSH  A
    2115: 50 01    MOV   A,0x1
    2117: 08       PUSH  A
    2118: 50 00    MOV   A,0x0
    211A: 08       PUSH  A
    211B: 62 D0 00 MOV   REG[0xD0],0x0
    211E: 51 99    MOV   A,[__r0]
    2120: 08       PUSH  A
    2121: 51 98    MOV   A,[__r1]
    2123: 08       PUSH  A
    2124: 51 97    MOV   A,[__r2]
    2126: 08       PUSH  A
    2127: 51 96    MOV   A,[__r3]
    2129: 08       PUSH  A
    212A: 52 00    MOV   A,[X+0]
    212C: 08       PUSH  A
    212D: 52 01    MOV   A,[X+1]
    212F: 08       PUSH  A
    2130: 52 02    MOV   A,[X+2]
    2132: 08       PUSH  A
    2133: 52 03    MOV   A,[X+3]
    2135: 08       PUSH  A
    2136: 7C 3A 68 LCALL 0x3A68
    2139: 18       POP   A
    213A: 53 96    MOV   [__r3],A
    213C: 18       POP   A
    213D: 53 97    MOV   [__r2],A
    213F: 18       POP   A
    2140: 53 98    MOV   [__r1],A
    2142: 18       POP   A
    2143: 38 FC    ADD   SP,0xFC
    2145: 08       PUSH  A
    2146: 51 98    MOV   A,[__r1]
    2148: 08       PUSH  A
    2149: 51 97    MOV   A,[__r2]
    214B: 08       PUSH  A
    214C: 51 96    MOV   A,[__r3]
    214E: 08       PUSH  A
    214F: 50 00    MOV   A,0x0
    2151: 08       PUSH  A
    2152: 50 01    MOV   A,0x1
    2154: 08       PUSH  A
    2155: 7C 0B F3 LCALL __UserModules_end|_FFT|__text_start|_FFT
    2158: 38 F4    ADD   SP,0xF4
(0178) 	serialDataOut();
    215A: 9C DC    CALL  _serialDataOut
(0179) 	cordic1();
    215C: 90 07    CALL  _cordic1
(0180) 	max_likelihood();
    215E: 7C 2D 72 LCALL _max_likelihood
    2161: 38 FC    ADD   SP,0xFC
    2163: 20       POP   X
    2164: 7F       RET   
(0181) 	
(0182) }
(0183) 	
(0184) void cordic1(void )			//CORDIC
(0185) {
_cordic1:
  value                --> X+6
  neg                  --> X+4
  offset               --> X+2
  i                    --> X+0
    2165: 10       PUSH  X
    2166: 4F       MOV   X,SP
    2167: 38 0A    ADD   SP,0xA
(0186) 	int neg, offset,value,i;
(0187) 	
(0188) 	for(i=0;i<32;i++)
    2169: 56 01 00 MOV   [X+1],0x0
    216C: 56 00 00 MOV   [X+0],0x0
(0189) 	{		
(0190) 	neg=0;
    216F: 56 05 00 MOV   [X+5],0x0
    2172: 56 04 00 MOV   [X+4],0x0
(0191) 	offset=0;
    2175: 56 03 00 MOV   [X+3],0x0
    2178: 56 02 00 MOV   [X+2],0x0
(0192) 	value=0;
    217B: 56 07 00 MOV   [X+7],0x0
    217E: 56 06 00 MOV   [X+6],0x0
(0193) 	
(0194) 	if((data_imm[i]<0) && (data_re[i]<0))
    2181: 62 D0 00 MOV   REG[0xD0],0x0
    2184: 52 01    MOV   A,[X+1]
    2186: 53 98    MOV   [__r1],A
    2188: 52 00    MOV   A,[X+0]
    218A: 53 99    MOV   [__r0],A
    218C: 65 98    ASL   [__r1]
    218E: 6B 99    RLC   [__r0]
    2190: 65 98    ASL   [__r1]
    2192: 6B 99    RLC   [__r0]
    2194: 51 98    MOV   A,[__r1]
    2196: 01 00    ADD   A,0x0
    2198: 53 96    MOV   [__r3],A
    219A: 51 99    MOV   A,[__r0]
    219C: 09 04    ADC   A,0x4
    219E: 60 D4    MOV   REG[0xD4],A
    21A0: 3E 96    MVI   A,[__r3]
    21A2: 53 95    MOV   [__r4],A
    21A4: 3E 96    MVI   A,[__r3]
    21A6: 53 94    MOV   [__r5],A
    21A8: 3E 96    MVI   A,[__r3]
    21AA: 53 93    MOV   [__r6],A
    21AC: 3E 96    MVI   A,[__r3]
    21AE: 53 92    MOV   [__r7],A
    21B0: 50 00    MOV   A,0x0
    21B2: 08       PUSH  A
    21B3: 08       PUSH  A
    21B4: 08       PUSH  A
    21B5: 08       PUSH  A
    21B6: 51 95    MOV   A,[__r4]
    21B8: 08       PUSH  A
    21B9: 51 94    MOV   A,[__r5]
    21BB: 08       PUSH  A
    21BC: 51 93    MOV   A,[__r6]
    21BE: 08       PUSH  A
    21BF: 51 92    MOV   A,[__r7]
    21C1: 08       PUSH  A
    21C2: 7C 3A 0B LCALL 0x3A0B
    21C5: 38 F8    ADD   SP,0xF8
    21C7: 39 00    CMP   A,0x0
    21C9: A0 CE    JZ    0x2298
    21CB: 39 01    CMP   A,0x1
    21CD: A0 CA    JZ    0x2298
    21CF: 06 98 00 ADD   [__r1],0x0
    21D2: 0E 99 03 ADC   [__r0],0x3
    21D5: 51 99    MOV   A,[__r0]
    21D7: 60 D4    MOV   REG[0xD4],A
    21D9: 3E 98    MVI   A,[__r1]
    21DB: 53 95    MOV   [__r4],A
    21DD: 3E 98    MVI   A,[__r1]
    21DF: 53 94    MOV   [__r5],A
    21E1: 3E 98    MVI   A,[__r1]
    21E3: 53 93    MOV   [__r6],A
    21E5: 3E 98    MVI   A,[__r1]
    21E7: 53 92    MOV   [__r7],A
    21E9: 50 00    MOV   A,0x0
    21EB: 08       PUSH  A
    21EC: 08       PUSH  A
    21ED: 08       PUSH  A
    21EE: 08       PUSH  A
    21EF: 51 95    MOV   A,[__r4]
    21F1: 08       PUSH  A
    21F2: 51 94    MOV   A,[__r5]
    21F4: 08       PUSH  A
    21F5: 51 93    MOV   A,[__r6]
    21F7: 08       PUSH  A
    21F8: 51 92    MOV   A,[__r7]
    21FA: 08       PUSH  A
    21FB: 7C 3A 0B LCALL 0x3A0B
    21FE: 38 F8    ADD   SP,0xF8
    2200: 39 00    CMP   A,0x0
    2202: A0 95    JZ    0x2298
    2204: 39 01    CMP   A,0x1
    2206: A0 91    JZ    0x2298
(0195) 	{
(0196) 		data_re[i]=-data_re[i];
    2208: 52 01    MOV   A,[X+1]
    220A: 53 98    MOV   [__r1],A
    220C: 52 00    MOV   A,[X+0]
    220E: 53 99    MOV   [__r0],A
    2210: 65 98    ASL   [__r1]
    2212: 6B 99    RLC   [__r0]
    2214: 65 98    ASL   [__r1]
    2216: 6B 99    RLC   [__r0]
    2218: 06 98 00 ADD   [__r1],0x0
    221B: 0E 99 03 ADC   [__r0],0x3
    221E: 51 99    MOV   A,[__r0]
    2220: 60 D4    MOV   REG[0xD4],A
    2222: 3E 98    MVI   A,[__r1]
    2224: 53 95    MOV   [__r4],A
    2226: 3E 98    MVI   A,[__r1]
    2228: 53 94    MOV   [__r5],A
    222A: 3E 98    MVI   A,[__r1]
    222C: 53 93    MOV   [__r6],A
    222E: 3E 98    MVI   A,[__r1]
    2230: 16 98 04 SUB   [__r1],0x4
    2233: 53 92    MOV   [__r7],A
    2235: 36 95 80 XOR   [__r4],0x80
    2238: 51 99    MOV   A,[__r0]
    223A: 60 D5    MOV   REG[0xD5],A
    223C: 51 95    MOV   A,[__r4]
    223E: 3F 98    MVI   [__r1],A
    2240: 51 94    MOV   A,[__r5]
    2242: 3F 98    MVI   [__r1],A
    2244: 51 93    MOV   A,[__r6]
    2246: 3F 98    MVI   [__r1],A
    2248: 51 92    MOV   A,[__r7]
    224A: 3F 98    MVI   [__r1],A
(0197) 		data_imm[i]=-data_imm[i];
    224C: 52 01    MOV   A,[X+1]
    224E: 53 98    MOV   [__r1],A
    2250: 52 00    MOV   A,[X+0]
    2252: 53 99    MOV   [__r0],A
    2254: 65 98    ASL   [__r1]
    2256: 6B 99    RLC   [__r0]
    2258: 65 98    ASL   [__r1]
    225A: 6B 99    RLC   [__r0]
    225C: 06 98 00 ADD   [__r1],0x0
    225F: 0E 99 04 ADC   [__r0],0x4
    2262: 51 99    MOV   A,[__r0]
    2264: 60 D4    MOV   REG[0xD4],A
    2266: 3E 98    MVI   A,[__r1]
    2268: 53 95    MOV   [__r4],A
    226A: 3E 98    MVI   A,[__r1]
    226C: 53 94    MOV   [__r5],A
    226E: 3E 98    MVI   A,[__r1]
    2270: 53 93    MOV   [__r6],A
    2272: 3E 98    MVI   A,[__r1]
    2274: 16 98 04 SUB   [__r1],0x4
    2277: 53 92    MOV   [__r7],A
    2279: 36 95 80 XOR   [__r4],0x80
    227C: 51 99    MOV   A,[__r0]
    227E: 60 D5    MOV   REG[0xD5],A
    2280: 51 95    MOV   A,[__r4]
    2282: 3F 98    MVI   [__r1],A
    2284: 51 94    MOV   A,[__r5]
    2286: 3F 98    MVI   [__r1],A
    2288: 51 93    MOV   A,[__r6]
    228A: 3F 98    MVI   [__r1],A
    228C: 51 92    MOV   A,[__r7]
    228E: 3F 98    MVI   [__r1],A
(0198) 		offset=3.142;
    2290: 56 03 03 MOV   [X+3],0x3
    2293: 56 02 00 MOV   [X+2],0x0
(0199) 	}
    2296: 81 B1    JMP   0x2448
(0200) 	else if((data_imm[i]<0) && (data_re[i]>0))
    2298: 62 D0 00 MOV   REG[0xD0],0x0
    229B: 52 01    MOV   A,[X+1]
    229D: 53 98    MOV   [__r1],A
    229F: 52 00    MOV   A,[X+0]
    22A1: 53 99    MOV   [__r0],A
    22A3: 65 98    ASL   [__r1]
    22A5: 6B 99    RLC   [__r0]
    22A7: 65 98    ASL   [__r1]
    22A9: 6B 99    RLC   [__r0]
    22AB: 51 98    MOV   A,[__r1]
    22AD: 01 00    ADD   A,0x0
    22AF: 53 96    MOV   [__r3],A
    22B1: 51 99    MOV   A,[__r0]
    22B3: 09 04    ADC   A,0x4
    22B5: 60 D4    MOV   REG[0xD4],A
    22B7: 3E 96    MVI   A,[__r3]
    22B9: 53 95    MOV   [__r4],A
    22BB: 3E 96    MVI   A,[__r3]
    22BD: 53 94    MOV   [__r5],A
    22BF: 3E 96    MVI   A,[__r3]
    22C1: 53 93    MOV   [__r6],A
    22C3: 3E 96    MVI   A,[__r3]
    22C5: 53 92    MOV   [__r7],A
    22C7: 50 00    MOV   A,0x0
    22C9: 08       PUSH  A
    22CA: 08       PUSH  A
    22CB: 08       PUSH  A
    22CC: 08       PUSH  A
    22CD: 51 95    MOV   A,[__r4]
    22CF: 08       PUSH  A
    22D0: 51 94    MOV   A,[__r5]
    22D2: 08       PUSH  A
    22D3: 51 93    MOV   A,[__r6]
    22D5: 08       PUSH  A
    22D6: 51 92    MOV   A,[__r7]
    22D8: 08       PUSH  A
    22D9: 7C 3A 0B LCALL 0x3A0B
    22DC: 38 F8    ADD   SP,0xF8
    22DE: 39 00    CMP   A,0x0
    22E0: A0 90    JZ    0x2371
    22E2: 39 01    CMP   A,0x1
    22E4: A0 8C    JZ    0x2371
    22E6: 06 98 00 ADD   [__r1],0x0
    22E9: 0E 99 03 ADC   [__r0],0x3
    22EC: 51 99    MOV   A,[__r0]
    22EE: 60 D4    MOV   REG[0xD4],A
    22F0: 3E 98    MVI   A,[__r1]
    22F2: 53 95    MOV   [__r4],A
    22F4: 3E 98    MVI   A,[__r1]
    22F6: 53 94    MOV   [__r5],A
    22F8: 3E 98    MVI   A,[__r1]
    22FA: 53 93    MOV   [__r6],A
    22FC: 3E 98    MVI   A,[__r1]
    22FE: 53 92    MOV   [__r7],A
    2300: 50 00    MOV   A,0x0
    2302: 08       PUSH  A
    2303: 08       PUSH  A
    2304: 08       PUSH  A
    2305: 08       PUSH  A
    2306: 51 95    MOV   A,[__r4]
    2308: 08       PUSH  A
    2309: 51 94    MOV   A,[__r5]
    230B: 08       PUSH  A
    230C: 51 93    MOV   A,[__r6]
    230E: 08       PUSH  A
    230F: 51 92    MOV   A,[__r7]
    2311: 08       PUSH  A
    2312: 7C 3A 0B LCALL 0x3A0B
    2315: 38 F8    ADD   SP,0xF8
    2317: 39 00    CMP   A,0x0
    2319: A0 57    JZ    0x2371
    231B: 39 01    CMP   A,0x1
    231D: B0 53    JNZ   0x2371
(0201) 	{
(0202) 		data_imm[i]=-data_imm[i];
    231F: 52 01    MOV   A,[X+1]
    2321: 53 98    MOV   [__r1],A
    2323: 52 00    MOV   A,[X+0]
    2325: 53 99    MOV   [__r0],A
    2327: 65 98    ASL   [__r1]
    2329: 6B 99    RLC   [__r0]
    232B: 65 98    ASL   [__r1]
    232D: 6B 99    RLC   [__r0]
    232F: 06 98 00 ADD   [__r1],0x0
    2332: 0E 99 04 ADC   [__r0],0x4
    2335: 51 99    MOV   A,[__r0]
    2337: 60 D4    MOV   REG[0xD4],A
    2339: 3E 98    MVI   A,[__r1]
    233B: 53 95    MOV   [__r4],A
    233D: 3E 98    MVI   A,[__r1]
    233F: 53 94    MOV   [__r5],A
    2341: 3E 98    MVI   A,[__r1]
    2343: 53 93    MOV   [__r6],A
    2345: 3E 98    MVI   A,[__r1]
    2347: 16 98 04 SUB   [__r1],0x4
    234A: 53 92    MOV   [__r7],A
    234C: 36 95 80 XOR   [__r4],0x80
    234F: 51 99    MOV   A,[__r0]
    2351: 60 D5    MOV   REG[0xD5],A
    2353: 51 95    MOV   A,[__r4]
    2355: 3F 98    MVI   [__r1],A
    2357: 51 94    MOV   A,[__r5]
    2359: 3F 98    MVI   [__r1],A
    235B: 51 93    MOV   A,[__r6]
    235D: 3F 98    MVI   [__r1],A
    235F: 51 92    MOV   A,[__r7]
    2361: 3F 98    MVI   [__r1],A
(0203) 		neg=1;
    2363: 56 05 01 MOV   [X+5],0x1
    2366: 56 04 00 MOV   [X+4],0x0
(0204) 		offset=3*1.571;
    2369: 56 03 04 MOV   [X+3],0x4
    236C: 56 02 00 MOV   [X+2],0x0
(0205) 	}
    236F: 80 D8    JMP   0x2448
(0206) 	else if((data_imm[i]>0) && (data_re[i]<0))
    2371: 62 D0 00 MOV   REG[0xD0],0x0
    2374: 52 01    MOV   A,[X+1]
    2376: 53 98    MOV   [__r1],A
    2378: 52 00    MOV   A,[X+0]
    237A: 53 99    MOV   [__r0],A
    237C: 65 98    ASL   [__r1]
    237E: 6B 99    RLC   [__r0]
    2380: 65 98    ASL   [__r1]
    2382: 6B 99    RLC   [__r0]
    2384: 51 98    MOV   A,[__r1]
    2386: 01 00    ADD   A,0x0
    2388: 53 96    MOV   [__r3],A
    238A: 51 99    MOV   A,[__r0]
    238C: 09 04    ADC   A,0x4
    238E: 60 D4    MOV   REG[0xD4],A
    2390: 3E 96    MVI   A,[__r3]
    2392: 53 95    MOV   [__r4],A
    2394: 3E 96    MVI   A,[__r3]
    2396: 53 94    MOV   [__r5],A
    2398: 3E 96    MVI   A,[__r3]
    239A: 53 93    MOV   [__r6],A
    239C: 3E 96    MVI   A,[__r3]
    239E: 53 92    MOV   [__r7],A
    23A0: 50 00    MOV   A,0x0
    23A2: 08       PUSH  A
    23A3: 08       PUSH  A
    23A4: 08       PUSH  A
    23A5: 08       PUSH  A
    23A6: 51 95    MOV   A,[__r4]
    23A8: 08       PUSH  A
    23A9: 51 94    MOV   A,[__r5]
    23AB: 08       PUSH  A
    23AC: 51 93    MOV   A,[__r6]
    23AE: 08       PUSH  A
    23AF: 51 92    MOV   A,[__r7]
    23B1: 08       PUSH  A
    23B2: 7C 3A 0B LCALL 0x3A0B
    23B5: 38 F8    ADD   SP,0xF8
    23B7: 39 00    CMP   A,0x0
    23B9: A0 8E    JZ    0x2448
    23BB: 39 01    CMP   A,0x1
    23BD: B0 8A    JNZ   0x2448
    23BF: 06 98 00 ADD   [__r1],0x0
    23C2: 0E 99 03 ADC   [__r0],0x3
    23C5: 51 99    MOV   A,[__r0]
    23C7: 60 D4    MOV   REG[0xD4],A
    23C9: 3E 98    MVI   A,[__r1]
    23CB: 53 95    MOV   [__r4],A
    23CD: 3E 98    MVI   A,[__r1]
    23CF: 53 94    MOV   [__r5],A
    23D1: 3E 98    MVI   A,[__r1]
    23D3: 53 93    MOV   [__r6],A
    23D5: 3E 98    MVI   A,[__r1]
    23D7: 53 92    MOV   [__r7],A
    23D9: 50 00    MOV   A,0x0
    23DB: 08       PUSH  A
    23DC: 08       PUSH  A
    23DD: 08       PUSH  A
    23DE: 08       PUSH  A
    23DF: 51 95    MOV   A,[__r4]
    23E1: 08       PUSH  A
    23E2: 51 94    MOV   A,[__r5]
    23E4: 08       PUSH  A
    23E5: 51 93    MOV   A,[__r6]
    23E7: 08       PUSH  A
    23E8: 51 92    MOV   A,[__r7]
    23EA: 08       PUSH  A
    23EB: 7C 3A 0B LCALL 0x3A0B
    23EE: 38 F8    ADD   SP,0xF8
    23F0: 39 00    CMP   A,0x0
    23F2: A0 55    JZ    0x2448
    23F4: 39 01    CMP   A,0x1
    23F6: A0 51    JZ    0x2448
(0207) 	{
(0208) 		data_re[i]=-data_re[i];
    23F8: 52 01    MOV   A,[X+1]
    23FA: 53 98    MOV   [__r1],A
    23FC: 52 00    MOV   A,[X+0]
    23FE: 53 99    MOV   [__r0],A
    2400: 65 98    ASL   [__r1]
    2402: 6B 99    RLC   [__r0]
    2404: 65 98    ASL   [__r1]
    2406: 6B 99    RLC   [__r0]
    2408: 06 98 00 ADD   [__r1],0x0
    240B: 0E 99 03 ADC   [__r0],0x3
    240E: 51 99    MOV   A,[__r0]
    2410: 60 D4    MOV   REG[0xD4],A
    2412: 3E 98    MVI   A,[__r1]
    2414: 53 95    MOV   [__r4],A
    2416: 3E 98    MVI   A,[__r1]
    2418: 53 94    MOV   [__r5],A
    241A: 3E 98    MVI   A,[__r1]
    241C: 53 93    MOV   [__r6],A
    241E: 3E 98    MVI   A,[__r1]
    2420: 16 98 04 SUB   [__r1],0x4
    2423: 53 92    MOV   [__r7],A
    2425: 36 95 80 XOR   [__r4],0x80
    2428: 51 99    MOV   A,[__r0]
    242A: 60 D5    MOV   REG[0xD5],A
    242C: 51 95    MOV   A,[__r4]
    242E: 3F 98    MVI   [__r1],A
    2430: 51 94    MOV   A,[__r5]
    2432: 3F 98    MVI   [__r1],A
    2434: 51 93    MOV   A,[__r6]
    2436: 3F 98    MVI   [__r1],A
    2438: 51 92    MOV   A,[__r7]
    243A: 3F 98    MVI   [__r1],A
(0209) 		neg=1;
    243C: 56 05 01 MOV   [X+5],0x1
    243F: 56 04 00 MOV   [X+4],0x0
(0210) 		offset=1.571;
    2442: 56 03 01 MOV   [X+3],0x1
    2445: 56 02 00 MOV   [X+2],0x0
(0211) 	}
(0212) 
(0213) 	
(0214) 	if((data_imm[i]==0) && (data_re[i]>0))
    2448: 62 D0 00 MOV   REG[0xD0],0x0
    244B: 52 01    MOV   A,[X+1]
    244D: 53 98    MOV   [__r1],A
    244F: 52 00    MOV   A,[X+0]
    2451: 53 99    MOV   [__r0],A
    2453: 65 98    ASL   [__r1]
    2455: 6B 99    RLC   [__r0]
    2457: 65 98    ASL   [__r1]
    2459: 6B 99    RLC   [__r0]
    245B: 51 98    MOV   A,[__r1]
    245D: 01 00    ADD   A,0x0
    245F: 53 96    MOV   [__r3],A
    2461: 51 99    MOV   A,[__r0]
    2463: 09 04    ADC   A,0x4
    2465: 60 D4    MOV   REG[0xD4],A
    2467: 3E 96    MVI   A,[__r3]
    2469: 53 95    MOV   [__r4],A
    246B: 3E 96    MVI   A,[__r3]
    246D: 53 94    MOV   [__r5],A
    246F: 3E 96    MVI   A,[__r3]
    2471: 53 93    MOV   [__r6],A
    2473: 3E 96    MVI   A,[__r3]
    2475: 53 92    MOV   [__r7],A
    2477: 50 00    MOV   A,0x0
    2479: 08       PUSH  A
    247A: 08       PUSH  A
    247B: 08       PUSH  A
    247C: 08       PUSH  A
    247D: 51 95    MOV   A,[__r4]
    247F: 08       PUSH  A
    2480: 51 94    MOV   A,[__r5]
    2482: 08       PUSH  A
    2483: 51 93    MOV   A,[__r6]
    2485: 08       PUSH  A
    2486: 51 92    MOV   A,[__r7]
    2488: 08       PUSH  A
    2489: 7C 3A 0B LCALL 0x3A0B
    248C: 38 F8    ADD   SP,0xF8
    248E: 39 00    CMP   A,0x0
    2490: B0 60    JNZ   0x24F1
    2492: 06 98 00 ADD   [__r1],0x0
    2495: 0E 99 03 ADC   [__r0],0x3
    2498: 51 99    MOV   A,[__r0]
    249A: 60 D4    MOV   REG[0xD4],A
    249C: 3E 98    MVI   A,[__r1]
    249E: 53 95    MOV   [__r4],A
    24A0: 3E 98    MVI   A,[__r1]
    24A2: 53 94    MOV   [__r5],A
    24A4: 3E 98    MVI   A,[__r1]
    24A6: 53 93    MOV   [__r6],A
    24A8: 3E 98    MVI   A,[__r1]
    24AA: 53 92    MOV   [__r7],A
    24AC: 50 00    MOV   A,0x0
    24AE: 08       PUSH  A
    24AF: 08       PUSH  A
    24B0: 08       PUSH  A
    24B1: 08       PUSH  A
    24B2: 51 95    MOV   A,[__r4]
    24B4: 08       PUSH  A
    24B5: 51 94    MOV   A,[__r5]
    24B7: 08       PUSH  A
    24B8: 51 93    MOV   A,[__r6]
    24BA: 08       PUSH  A
    24BB: 51 92    MOV   A,[__r7]
    24BD: 08       PUSH  A
    24BE: 7C 3A 0B LCALL 0x3A0B
    24C1: 38 F8    ADD   SP,0xF8
    24C3: 39 00    CMP   A,0x0
    24C5: A0 2B    JZ    0x24F1
    24C7: 39 01    CMP   A,0x1
    24C9: B0 27    JNZ   0x24F1
(0215) 	{
(0216) 		ar1[i]=0;
    24CB: 52 01    MOV   A,[X+1]
    24CD: 53 98    MOV   [__r1],A
    24CF: 52 00    MOV   A,[X+0]
    24D1: 53 99    MOV   [__r0],A
    24D3: 65 98    ASL   [__r1]
    24D5: 6B 99    RLC   [__r0]
    24D7: 65 98    ASL   [__r1]
    24D9: 6B 99    RLC   [__r0]
    24DB: 06 98 0B ADD   [__r1],0xB
    24DE: 0E 99 00 ADC   [__r0],0x0
    24E1: 51 99    MOV   A,[__r0]
    24E3: 60 D5    MOV   REG[0xD5],A
    24E5: 50 00    MOV   A,0x0
    24E7: 3F 98    MVI   [__r1],A
    24E9: 3F 98    MVI   [__r1],A
    24EB: 3F 98    MVI   [__r1],A
    24ED: 3F 98    MVI   [__r1],A
(0217) 	}
    24EF: 83 D6    JMP   0x28C6
(0218) 	else if((data_imm[i]==0) && (data_re[i]<0))
    24F1: 62 D0 00 MOV   REG[0xD0],0x0
    24F4: 52 01    MOV   A,[X+1]
    24F6: 53 98    MOV   [__r1],A
    24F8: 52 00    MOV   A,[X+0]
    24FA: 53 99    MOV   [__r0],A
    24FC: 65 98    ASL   [__r1]
    24FE: 6B 99    RLC   [__r0]
    2500: 65 98    ASL   [__r1]
    2502: 6B 99    RLC   [__r0]
    2504: 51 98    MOV   A,[__r1]
    2506: 01 00    ADD   A,0x0
    2508: 53 96    MOV   [__r3],A
    250A: 51 99    MOV   A,[__r0]
    250C: 09 04    ADC   A,0x4
    250E: 60 D4    MOV   REG[0xD4],A
    2510: 3E 96    MVI   A,[__r3]
    2512: 53 95    MOV   [__r4],A
    2514: 3E 96    MVI   A,[__r3]
    2516: 53 94    MOV   [__r5],A
    2518: 3E 96    MVI   A,[__r3]
    251A: 53 93    MOV   [__r6],A
    251C: 3E 96    MVI   A,[__r3]
    251E: 53 92    MOV   [__r7],A
    2520: 50 00    MOV   A,0x0
    2522: 08       PUSH  A
    2523: 08       PUSH  A
    2524: 08       PUSH  A
    2525: 08       PUSH  A
    2526: 51 95    MOV   A,[__r4]
    2528: 08       PUSH  A
    2529: 51 94    MOV   A,[__r5]
    252B: 08       PUSH  A
    252C: 51 93    MOV   A,[__r6]
    252E: 08       PUSH  A
    252F: 51 92    MOV   A,[__r7]
    2531: 08       PUSH  A
    2532: 7C 3A 0B LCALL 0x3A0B
    2535: 38 F8    ADD   SP,0xF8
    2537: 39 00    CMP   A,0x0
    2539: B0 66    JNZ   0x25A0
    253B: 06 98 00 ADD   [__r1],0x0
    253E: 0E 99 03 ADC   [__r0],0x3
    2541: 51 99    MOV   A,[__r0]
    2543: 60 D4    MOV   REG[0xD4],A
    2545: 3E 98    MVI   A,[__r1]
    2547: 53 95    MOV   [__r4],A
    2549: 3E 98    MVI   A,[__r1]
    254B: 53 94    MOV   [__r5],A
    254D: 3E 98    MVI   A,[__r1]
    254F: 53 93    MOV   [__r6],A
    2551: 3E 98    MVI   A,[__r1]
    2553: 53 92    MOV   [__r7],A
    2555: 50 00    MOV   A,0x0
    2557: 08       PUSH  A
    2558: 08       PUSH  A
    2559: 08       PUSH  A
    255A: 08       PUSH  A
    255B: 51 95    MOV   A,[__r4]
    255D: 08       PUSH  A
    255E: 51 94    MOV   A,[__r5]
    2560: 08       PUSH  A
    2561: 51 93    MOV   A,[__r6]
    2563: 08       PUSH  A
    2564: 51 92    MOV   A,[__r7]
    2566: 08       PUSH  A
    2567: 7C 3A 0B LCALL 0x3A0B
    256A: 38 F8    ADD   SP,0xF8
    256C: 39 00    CMP   A,0x0
    256E: A0 31    JZ    0x25A0
    2570: 39 01    CMP   A,0x1
    2572: A0 2D    JZ    0x25A0
(0219) 	{
(0220) 		ar1[i]=3.142;
    2574: 52 01    MOV   A,[X+1]
    2576: 53 98    MOV   [__r1],A
    2578: 52 00    MOV   A,[X+0]
    257A: 53 99    MOV   [__r0],A
    257C: 65 98    ASL   [__r1]
    257E: 6B 99    RLC   [__r0]
    2580: 65 98    ASL   [__r1]
    2582: 6B 99    RLC   [__r0]
    2584: 06 98 0B ADD   [__r1],0xB
    2587: 0E 99 00 ADC   [__r0],0x0
    258A: 51 99    MOV   A,[__r0]
    258C: 60 D5    MOV   REG[0xD5],A
    258E: 50 40    MOV   A,0x40
    2590: 3F 98    MVI   [__r1],A
    2592: 50 49    MOV   A,0x49
    2594: 3F 98    MVI   [__r1],A
    2596: 50 16    MOV   A,0x16
    2598: 3F 98    MVI   [__r1],A
    259A: 50 87    MOV   A,0x87
    259C: 3F 98    MVI   [__r1],A
(0221) 	}
    259E: 83 27    JMP   0x28C6
(0222) 	else if((data_imm[i]>0) && (data_re[i]==0))
    25A0: 62 D0 00 MOV   REG[0xD0],0x0
    25A3: 52 01    MOV   A,[X+1]
    25A5: 53 98    MOV   [__r1],A
    25A7: 52 00    MOV   A,[X+0]
    25A9: 53 99    MOV   [__r0],A
    25AB: 65 98    ASL   [__r1]
    25AD: 6B 99    RLC   [__r0]
    25AF: 65 98    ASL   [__r1]
    25B1: 6B 99    RLC   [__r0]
    25B3: 51 98    MOV   A,[__r1]
    25B5: 01 00    ADD   A,0x0
    25B7: 53 96    MOV   [__r3],A
    25B9: 51 99    MOV   A,[__r0]
    25BB: 09 04    ADC   A,0x4
    25BD: 60 D4    MOV   REG[0xD4],A
    25BF: 3E 96    MVI   A,[__r3]
    25C1: 53 95    MOV   [__r4],A
    25C3: 3E 96    MVI   A,[__r3]
    25C5: 53 94    MOV   [__r5],A
    25C7: 3E 96    MVI   A,[__r3]
    25C9: 53 93    MOV   [__r6],A
    25CB: 3E 96    MVI   A,[__r3]
    25CD: 53 92    MOV   [__r7],A
    25CF: 50 00    MOV   A,0x0
    25D1: 08       PUSH  A
    25D2: 08       PUSH  A
    25D3: 08       PUSH  A
    25D4: 08       PUSH  A
    25D5: 51 95    MOV   A,[__r4]
    25D7: 08       PUSH  A
    25D8: 51 94    MOV   A,[__r5]
    25DA: 08       PUSH  A
    25DB: 51 93    MOV   A,[__r6]
    25DD: 08       PUSH  A
    25DE: 51 92    MOV   A,[__r7]
    25E0: 08       PUSH  A
    25E1: 7C 3A 0B LCALL 0x3A0B
    25E4: 38 F8    ADD   SP,0xF8
    25E6: 39 00    CMP   A,0x0
    25E8: A0 66    JZ    0x264F
    25EA: 39 01    CMP   A,0x1
    25EC: B0 62    JNZ   0x264F
    25EE: 06 98 00 ADD   [__r1],0x0
    25F1: 0E 99 03 ADC   [__r0],0x3
    25F4: 51 99    MOV   A,[__r0]
    25F6: 60 D4    MOV   REG[0xD4],A
    25F8: 3E 98    MVI   A,[__r1]
    25FA: 53 95    MOV   [__r4],A
    25FC: 3E 98    MVI   A,[__r1]
    25FE: 53 94    MOV   [__r5],A
    2600: 3E 98    MVI   A,[__r1]
    2602: 53 93    MOV   [__r6],A
    2604: 3E 98    MVI   A,[__r1]
    2606: 53 92    MOV   [__r7],A
    2608: 50 00    MOV   A,0x0
    260A: 08       PUSH  A
    260B: 08       PUSH  A
    260C: 08       PUSH  A
    260D: 08       PUSH  A
    260E: 51 95    MOV   A,[__r4]
    2610: 08       PUSH  A
    2611: 51 94    MOV   A,[__r5]
    2613: 08       PUSH  A
    2614: 51 93    MOV   A,[__r6]
    2616: 08       PUSH  A
    2617: 51 92    MOV   A,[__r7]
    2619: 08       PUSH  A
    261A: 7C 3A 0B LCALL 0x3A0B
    261D: 38 F8    ADD   SP,0xF8
    261F: 39 00    CMP   A,0x0
    2621: B0 2D    JNZ   0x264F
(0223) 	{
(0224) 		ar1[i]=1.571;
    2623: 52 01    MOV   A,[X+1]
    2625: 53 98    MOV   [__r1],A
    2627: 52 00    MOV   A,[X+0]
    2629: 53 99    MOV   [__r0],A
    262B: 65 98    ASL   [__r1]
    262D: 6B 99    RLC   [__r0]
    262F: 65 98    ASL   [__r1]
    2631: 6B 99    RLC   [__r0]
    2633: 06 98 0B ADD   [__r1],0xB
    2636: 0E 99 00 ADC   [__r0],0x0
    2639: 51 99    MOV   A,[__r0]
    263B: 60 D5    MOV   REG[0xD5],A
    263D: 50 3F    MOV   A,0x3F
    263F: 3F 98    MVI   [__r1],A
    2641: 50 C9    MOV   A,0xC9
    2643: 3F 98    MVI   [__r1],A
    2645: 50 16    MOV   A,0x16
    2647: 3F 98    MVI   [__r1],A
    2649: 50 87    MOV   A,0x87
    264B: 3F 98    MVI   [__r1],A
(0225) 	}
    264D: 82 78    JMP   0x28C6
(0226) 	else if((data_imm[i]<0) && (data_re[i]==0))
    264F: 62 D0 00 MOV   REG[0xD0],0x0
    2652: 52 01    MOV   A,[X+1]
    2654: 53 98    MOV   [__r1],A
    2656: 52 00    MOV   A,[X+0]
    2658: 53 99    MOV   [__r0],A
    265A: 65 98    ASL   [__r1]
    265C: 6B 99    RLC   [__r0]
    265E: 65 98    ASL   [__r1]
    2660: 6B 99    RLC   [__r0]
    2662: 51 98    MOV   A,[__r1]
    2664: 01 00    ADD   A,0x0
    2666: 53 96    MOV   [__r3],A
    2668: 51 99    MOV   A,[__r0]
    266A: 09 04    ADC   A,0x4
    266C: 60 D4    MOV   REG[0xD4],A
    266E: 3E 96    MVI   A,[__r3]
    2670: 53 95    MOV   [__r4],A
    2672: 3E 96    MVI   A,[__r3]
    2674: 53 94    MOV   [__r5],A
    2676: 3E 96    MVI   A,[__r3]
    2678: 53 93    MOV   [__r6],A
    267A: 3E 96    MVI   A,[__r3]
    267C: 53 92    MOV   [__r7],A
    267E: 50 00    MOV   A,0x0
    2680: 08       PUSH  A
    2681: 08       PUSH  A
    2682: 08       PUSH  A
    2683: 08       PUSH  A
    2684: 51 95    MOV   A,[__r4]
    2686: 08       PUSH  A
    2687: 51 94    MOV   A,[__r5]
    2689: 08       PUSH  A
    268A: 51 93    MOV   A,[__r6]
    268C: 08       PUSH  A
    268D: 51 92    MOV   A,[__r7]
    268F: 08       PUSH  A
    2690: 7C 3A 0B LCALL 0x3A0B
    2693: 38 F8    ADD   SP,0xF8
    2695: 39 00    CMP   A,0x0
    2697: A0 66    JZ    0x26FE
    2699: 39 01    CMP   A,0x1
    269B: A0 62    JZ    0x26FE
    269D: 06 98 00 ADD   [__r1],0x0
    26A0: 0E 99 03 ADC   [__r0],0x3
    26A3: 51 99    MOV   A,[__r0]
    26A5: 60 D4    MOV   REG[0xD4],A
    26A7: 3E 98    MVI   A,[__r1]
    26A9: 53 95    MOV   [__r4],A
    26AB: 3E 98    MVI   A,[__r1]
    26AD: 53 94    MOV   [__r5],A
    26AF: 3E 98    MVI   A,[__r1]
    26B1: 53 93    MOV   [__r6],A
    26B3: 3E 98    MVI   A,[__r1]
    26B5: 53 92    MOV   [__r7],A
    26B7: 50 00    MOV   A,0x0
    26B9: 08       PUSH  A
    26BA: 08       PUSH  A
    26BB: 08       PUSH  A
    26BC: 08       PUSH  A
    26BD: 51 95    MOV   A,[__r4]
    26BF: 08       PUSH  A
    26C0: 51 94    MOV   A,[__r5]
    26C2: 08       PUSH  A
    26C3: 51 93    MOV   A,[__r6]
    26C5: 08       PUSH  A
    26C6: 51 92    MOV   A,[__r7]
    26C8: 08       PUSH  A
    26C9: 7C 3A 0B LCALL 0x3A0B
    26CC: 38 F8    ADD   SP,0xF8
    26CE: 39 00    CMP   A,0x0
    26D0: B0 2D    JNZ   0x26FE
(0227) 	{
(0228) 		ar1[i]=3*1.571;
    26D2: 52 01    MOV   A,[X+1]
    26D4: 53 98    MOV   [__r1],A
    26D6: 52 00    MOV   A,[X+0]
    26D8: 53 99    MOV   [__r0],A
    26DA: 65 98    ASL   [__r1]
    26DC: 6B 99    RLC   [__r0]
    26DE: 65 98    ASL   [__r1]
    26E0: 6B 99    RLC   [__r0]
    26E2: 06 98 0B ADD   [__r1],0xB
    26E5: 0E 99 00 ADC   [__r0],0x0
    26E8: 51 99    MOV   A,[__r0]
    26EA: 60 D5    MOV   REG[0xD5],A
    26EC: 50 40    MOV   A,0x40
    26EE: 3F 98    MVI   [__r1],A
    26F0: 50 96    MOV   A,0x96
    26F2: 3F 98    MVI   [__r1],A
    26F4: 50 D0    MOV   A,0xD0
    26F6: 3F 98    MVI   [__r1],A
    26F8: 50 E5    MOV   A,0xE5
    26FA: 3F 98    MVI   [__r1],A
(0229) 	}
    26FC: 81 C9    JMP   0x28C6
(0230) 	else
(0231) 	{
(0232) 		
(0233) 		ar1[i]=atan(data_imm[i]/data_re[i]);
    26FE: 62 D0 00 MOV   REG[0xD0],0x0
    2701: 52 01    MOV   A,[X+1]
    2703: 53 98    MOV   [__r1],A
    2705: 52 00    MOV   A,[X+0]
    2707: 53 99    MOV   [__r0],A
    2709: 65 98    ASL   [__r1]
    270B: 6B 99    RLC   [__r0]
    270D: 65 98    ASL   [__r1]
    270F: 6B 99    RLC   [__r0]
    2711: 51 98    MOV   A,[__r1]
    2713: 54 09    MOV   [X+9],A
    2715: 51 99    MOV   A,[__r0]
    2717: 54 08    MOV   [X+8],A
    2719: 51 98    MOV   A,[__r1]
    271B: 01 00    ADD   A,0x0
    271D: 53 96    MOV   [__r3],A
    271F: 51 99    MOV   A,[__r0]
    2721: 09 03    ADC   A,0x3
    2723: 60 D4    MOV   REG[0xD4],A
    2725: 3E 96    MVI   A,[__r3]
    2727: 53 95    MOV   [__r4],A
    2729: 3E 96    MVI   A,[__r3]
    272B: 53 94    MOV   [__r5],A
    272D: 3E 96    MVI   A,[__r3]
    272F: 53 93    MOV   [__r6],A
    2731: 3E 96    MVI   A,[__r3]
    2733: 53 92    MOV   [__r7],A
    2735: 51 98    MOV   A,[__r1]
    2737: 01 00    ADD   A,0x0
    2739: 53 96    MOV   [__r3],A
    273B: 51 99    MOV   A,[__r0]
    273D: 09 04    ADC   A,0x4
    273F: 60 D4    MOV   REG[0xD4],A
    2741: 3E 96    MVI   A,[__r3]
    2743: 53 91    MOV   [__r8],A
    2745: 3E 96    MVI   A,[__r3]
    2747: 53 90    MOV   [__r9],A
    2749: 3E 96    MVI   A,[__r3]
    274B: 53 8F    MOV   [__r10],A
    274D: 3E 96    MVI   A,[__r3]
    274F: 53 8E    MOV   [__r11],A
    2751: 51 95    MOV   A,[__r4]
    2753: 08       PUSH  A
    2754: 51 94    MOV   A,[__r5]
    2756: 08       PUSH  A
    2757: 51 93    MOV   A,[__r6]
    2759: 08       PUSH  A
    275A: 51 92    MOV   A,[__r7]
    275C: 08       PUSH  A
    275D: 51 91    MOV   A,[__r8]
    275F: 08       PUSH  A
    2760: 51 90    MOV   A,[__r9]
    2762: 08       PUSH  A
    2763: 51 8F    MOV   A,[__r10]
    2765: 08       PUSH  A
    2766: 51 8E    MOV   A,[__r11]
    2768: 08       PUSH  A
    2769: 7C 3A 68 LCALL 0x3A68
    276C: 18       POP   A
    276D: 53 92    MOV   [__r7],A
    276F: 18       POP   A
    2770: 53 93    MOV   [__r6],A
    2772: 18       POP   A
    2773: 53 94    MOV   [__r5],A
    2775: 18       POP   A
    2776: 38 FC    ADD   SP,0xFC
    2778: 08       PUSH  A
    2779: 51 94    MOV   A,[__r5]
    277B: 08       PUSH  A
    277C: 51 93    MOV   A,[__r6]
    277E: 08       PUSH  A
    277F: 51 92    MOV   A,[__r7]
    2781: 08       PUSH  A
    2782: 7C 49 85 LCALL _atanf
    2785: 38 FC    ADD   SP,0xFC
    2787: 62 D0 00 MOV   REG[0xD0],0x0
    278A: 52 09    MOV   A,[X+9]
    278C: 01 0B    ADD   A,0xB
    278E: 53 94    MOV   [__r5],A
    2790: 52 08    MOV   A,[X+8]
    2792: 09 00    ADC   A,0x0
    2794: 60 D5    MOV   REG[0xD5],A
    2796: 51 99    MOV   A,[__r0]
    2798: 3F 94    MVI   [__r5],A
    279A: 51 98    MOV   A,[__r1]
    279C: 3F 94    MVI   [__r5],A
    279E: 51 97    MOV   A,[__r2]
    27A0: 3F 94    MVI   [__r5],A
    27A2: 51 96    MOV   A,[__r3]
    27A4: 3F 94    MVI   [__r5],A
(0234) 		//ar1[i]=atan_cordic(x1[i],z1[i]);
(0235) 		if(neg==1)
    27A6: 3D 04 00 CMP   [X+4],0x0
    27A9: B0 73    JNZ   0x281D
    27AB: 3D 05 01 CMP   [X+5],0x1
    27AE: B0 6E    JNZ   0x281D
(0236) 			ar1[i]=1.571-ar1[i];
    27B0: 62 D0 00 MOV   REG[0xD0],0x0
    27B3: 52 01    MOV   A,[X+1]
    27B5: 53 98    MOV   [__r1],A
    27B7: 52 00    MOV   A,[X+0]
    27B9: 53 99    MOV   [__r0],A
    27BB: 65 98    ASL   [__r1]
    27BD: 6B 99    RLC   [__r0]
    27BF: 65 98    ASL   [__r1]
    27C1: 6B 99    RLC   [__r0]
    27C3: 06 98 0B ADD   [__r1],0xB
    27C6: 0E 99 00 ADC   [__r0],0x0
    27C9: 51 99    MOV   A,[__r0]
    27CB: 60 D4    MOV   REG[0xD4],A
    27CD: 3E 98    MVI   A,[__r1]
    27CF: 53 95    MOV   [__r4],A
    27D1: 3E 98    MVI   A,[__r1]
    27D3: 53 94    MOV   [__r5],A
    27D5: 3E 98    MVI   A,[__r1]
    27D7: 53 93    MOV   [__r6],A
    27D9: 3E 98    MVI   A,[__r1]
    27DB: 16 98 04 SUB   [__r1],0x4
    27DE: 53 92    MOV   [__r7],A
    27E0: 51 95    MOV   A,[__r4]
    27E2: 08       PUSH  A
    27E3: 51 94    MOV   A,[__r5]
    27E5: 08       PUSH  A
    27E6: 51 93    MOV   A,[__r6]
    27E8: 08       PUSH  A
    27E9: 51 92    MOV   A,[__r7]
    27EB: 08       PUSH  A
    27EC: 50 3F    MOV   A,0x3F
    27EE: 08       PUSH  A
    27EF: 50 C9    MOV   A,0xC9
    27F1: 08       PUSH  A
    27F2: 50 16    MOV   A,0x16
    27F4: 08       PUSH  A
    27F5: 50 87    MOV   A,0x87
    27F7: 08       PUSH  A
    27F8: 7C 3C 75 LCALL 0x3C75
    27FB: 18       POP   A
    27FC: 53 92    MOV   [__r7],A
    27FE: 18       POP   A
    27FF: 53 93    MOV   [__r6],A
    2801: 18       POP   A
    2802: 53 94    MOV   [__r5],A
    2804: 18       POP   A
    2805: 53 95    MOV   [__r4],A
    2807: 38 FC    ADD   SP,0xFC
    2809: 51 99    MOV   A,[__r0]
    280B: 60 D5    MOV   REG[0xD5],A
    280D: 51 95    MOV   A,[__r4]
    280F: 3F 98    MVI   [__r1],A
    2811: 51 94    MOV   A,[__r5]
    2813: 3F 98    MVI   [__r1],A
    2815: 51 93    MOV   A,[__r6]
    2817: 3F 98    MVI   [__r1],A
    2819: 51 92    MOV   A,[__r7]
    281B: 3F 98    MVI   [__r1],A
(0237) 		ar1[i]=ar1[i]+offset;
    281D: 62 D0 00 MOV   REG[0xD0],0x0
    2820: 52 01    MOV   A,[X+1]
    2822: 53 98    MOV   [__r1],A
    2824: 52 00    MOV   A,[X+0]
    2826: 53 99    MOV   [__r0],A
    2828: 65 98    ASL   [__r1]
    282A: 6B 99    RLC   [__r0]
    282C: 65 98    ASL   [__r1]
    282E: 6B 99    RLC   [__r0]
    2830: 06 98 0B ADD   [__r1],0xB
    2833: 0E 99 00 ADC   [__r0],0x0
    2836: 52 03    MOV   A,[X+3]
    2838: 53 92    MOV   [__r7],A
    283A: 52 02    MOV   A,[X+2]
    283C: 53 93    MOV   [__r6],A
    283E: 47 93 80 TST   [__r6],0x80
    2841: A0 09    JZ    0x284B
    2843: 55 94 FF MOV   [__r5],0xFF
    2846: 55 95 FF MOV   [__r4],0xFF
    2849: 80 0A    JMP   0x2854
    284B: 62 D0 00 MOV   REG[0xD0],0x0
    284E: 55 94 00 MOV   [__r5],0x0
    2851: 55 95 00 MOV   [__r4],0x0
    2854: 62 D0 00 MOV   REG[0xD0],0x0
    2857: 51 95    MOV   A,[__r4]
    2859: 08       PUSH  A
    285A: 51 94    MOV   A,[__r5]
    285C: 08       PUSH  A
    285D: 51 93    MOV   A,[__r6]
    285F: 08       PUSH  A
    2860: 51 92    MOV   A,[__r7]
    2862: 08       PUSH  A
    2863: 7C 3D 4F LCALL 0x3D4F
    2866: 18       POP   A
    2867: 53 92    MOV   [__r7],A
    2869: 18       POP   A
    286A: 53 93    MOV   [__r6],A
    286C: 18       POP   A
    286D: 53 94    MOV   [__r5],A
    286F: 18       POP   A
    2870: 53 95    MOV   [__r4],A
    2872: 51 99    MOV   A,[__r0]
    2874: 60 D4    MOV   REG[0xD4],A
    2876: 3E 98    MVI   A,[__r1]
    2878: 53 91    MOV   [__r8],A
    287A: 3E 98    MVI   A,[__r1]
    287C: 53 90    MOV   [__r9],A
    287E: 3E 98    MVI   A,[__r1]
    2880: 53 8F    MOV   [__r10],A
    2882: 3E 98    MVI   A,[__r1]
    2884: 16 98 04 SUB   [__r1],0x4
    2887: 53 8E    MOV   [__r11],A
    2889: 51 95    MOV   A,[__r4]
    288B: 08       PUSH  A
    288C: 51 94    MOV   A,[__r5]
    288E: 08       PUSH  A
    288F: 51 93    MOV   A,[__r6]
    2891: 08       PUSH  A
    2892: 51 92    MOV   A,[__r7]
    2894: 08       PUSH  A
    2895: 51 91    MOV   A,[__r8]
    2897: 08       PUSH  A
    2898: 51 90    MOV   A,[__r9]
    289A: 08       PUSH  A
    289B: 51 8F    MOV   A,[__r10]
    289D: 08       PUSH  A
    289E: 51 8E    MOV   A,[__r11]
    28A0: 08       PUSH  A
    28A1: 7C 39 0B LCALL 0x390B
    28A4: 18       POP   A
    28A5: 53 92    MOV   [__r7],A
    28A7: 18       POP   A
    28A8: 53 93    MOV   [__r6],A
    28AA: 18       POP   A
    28AB: 53 94    MOV   [__r5],A
    28AD: 18       POP   A
    28AE: 53 95    MOV   [__r4],A
    28B0: 38 FC    ADD   SP,0xFC
    28B2: 51 99    MOV   A,[__r0]
    28B4: 60 D5    MOV   REG[0xD5],A
    28B6: 51 95    MOV   A,[__r4]
    28B8: 3F 98    MVI   [__r1],A
    28BA: 51 94    MOV   A,[__r5]
    28BC: 3F 98    MVI   [__r1],A
    28BE: 51 93    MOV   A,[__r6]
    28C0: 3F 98    MVI   [__r1],A
    28C2: 51 92    MOV   A,[__r7]
    28C4: 3F 98    MVI   [__r1],A
(0238) 	}
(0239) 	
(0240) 	
(0241) 	if((data_imm1[i]==0) && (data_re1[i]>0))
    28C6: 62 D0 00 MOV   REG[0xD0],0x0
    28C9: 52 01    MOV   A,[X+1]
    28CB: 53 98    MOV   [__r1],A
    28CD: 52 00    MOV   A,[X+0]
    28CF: 53 99    MOV   [__r0],A
    28D1: 65 98    ASL   [__r1]
    28D3: 6B 99    RLC   [__r0]
    28D5: 65 98    ASL   [__r1]
    28D7: 6B 99    RLC   [__r0]
    28D9: 51 98    MOV   A,[__r1]
    28DB: 01 00    ADD   A,0x0
    28DD: 53 96    MOV   [__r3],A
    28DF: 51 99    MOV   A,[__r0]
    28E1: 09 05    ADC   A,0x5
    28E3: 60 D4    MOV   REG[0xD4],A
    28E5: 3E 96    MVI   A,[__r3]
    28E7: 53 95    MOV   [__r4],A
    28E9: 3E 96    MVI   A,[__r3]
    28EB: 53 94    MOV   [__r5],A
    28ED: 3E 96    MVI   A,[__r3]
    28EF: 53 93    MOV   [__r6],A
    28F1: 3E 96    MVI   A,[__r3]
    28F3: 53 92    MOV   [__r7],A
    28F5: 50 00    MOV   A,0x0
    28F7: 08       PUSH  A
    28F8: 08       PUSH  A
    28F9: 08       PUSH  A
    28FA: 08       PUSH  A
    28FB: 51 95    MOV   A,[__r4]
    28FD: 08       PUSH  A
    28FE: 51 94    MOV   A,[__r5]
    2900: 08       PUSH  A
    2901: 51 93    MOV   A,[__r6]
    2903: 08       PUSH  A
    2904: 51 92    MOV   A,[__r7]
    2906: 08       PUSH  A
    2907: 7C 3A 0B LCALL 0x3A0B
    290A: 38 F8    ADD   SP,0xF8
    290C: 39 00    CMP   A,0x0
    290E: B0 60    JNZ   0x296F
    2910: 06 98 00 ADD   [__r1],0x0
    2913: 0E 99 01 ADC   [__r0],0x1
    2916: 51 99    MOV   A,[__r0]
    2918: 60 D4    MOV   REG[0xD4],A
    291A: 3E 98    MVI   A,[__r1]
    291C: 53 95    MOV   [__r4],A
    291E: 3E 98    MVI   A,[__r1]
    2920: 53 94    MOV   [__r5],A
    2922: 3E 98    MVI   A,[__r1]
    2924: 53 93    MOV   [__r6],A
    2926: 3E 98    MVI   A,[__r1]
    2928: 53 92    MOV   [__r7],A
    292A: 50 00    MOV   A,0x0
    292C: 08       PUSH  A
    292D: 08       PUSH  A
    292E: 08       PUSH  A
    292F: 08       PUSH  A
    2930: 51 95    MOV   A,[__r4]
    2932: 08       PUSH  A
    2933: 51 94    MOV   A,[__r5]
    2935: 08       PUSH  A
    2936: 51 93    MOV   A,[__r6]
    2938: 08       PUSH  A
    2939: 51 92    MOV   A,[__r7]
    293B: 08       PUSH  A
    293C: 7C 3A 0B LCALL 0x3A0B
    293F: 38 F8    ADD   SP,0xF8
    2941: 39 00    CMP   A,0x0
    2943: A0 2B    JZ    0x296F
    2945: 39 01    CMP   A,0x1
    2947: B0 27    JNZ   0x296F
(0242) 	{
(0243) 		ar2[i]=0;
    2949: 52 01    MOV   A,[X+1]
    294B: 53 98    MOV   [__r1],A
    294D: 52 00    MOV   A,[X+0]
    294F: 53 99    MOV   [__r0],A
    2951: 65 98    ASL   [__r1]
    2953: 6B 99    RLC   [__r0]
    2955: 65 98    ASL   [__r1]
    2957: 6B 99    RLC   [__r0]
    2959: 06 98 00 ADD   [__r1],0x0
    295C: 0E 99 06 ADC   [__r0],0x6
    295F: 51 99    MOV   A,[__r0]
    2961: 60 D5    MOV   REG[0xD5],A
    2963: 50 00    MOV   A,0x0
    2965: 3F 98    MVI   [__r1],A
    2967: 3F 98    MVI   [__r1],A
    2969: 3F 98    MVI   [__r1],A
    296B: 3F 98    MVI   [__r1],A
(0244) 	}
    296D: 83 D6    JMP   0x2D44
(0245) 	else if((data_imm1[i]==0) && (data_re1[i]<0))
    296F: 62 D0 00 MOV   REG[0xD0],0x0
    2972: 52 01    MOV   A,[X+1]
    2974: 53 98    MOV   [__r1],A
    2976: 52 00    MOV   A,[X+0]
    2978: 53 99    MOV   [__r0],A
    297A: 65 98    ASL   [__r1]
    297C: 6B 99    RLC   [__r0]
    297E: 65 98    ASL   [__r1]
    2980: 6B 99    RLC   [__r0]
    2982: 51 98    MOV   A,[__r1]
    2984: 01 00    ADD   A,0x0
    2986: 53 96    MOV   [__r3],A
    2988: 51 99    MOV   A,[__r0]
    298A: 09 05    ADC   A,0x5
    298C: 60 D4    MOV   REG[0xD4],A
    298E: 3E 96    MVI   A,[__r3]
    2990: 53 95    MOV   [__r4],A
    2992: 3E 96    MVI   A,[__r3]
    2994: 53 94    MOV   [__r5],A
    2996: 3E 96    MVI   A,[__r3]
    2998: 53 93    MOV   [__r6],A
    299A: 3E 96    MVI   A,[__r3]
    299C: 53 92    MOV   [__r7],A
    299E: 50 00    MOV   A,0x0
    29A0: 08       PUSH  A
    29A1: 08       PUSH  A
    29A2: 08       PUSH  A
    29A3: 08       PUSH  A
    29A4: 51 95    MOV   A,[__r4]
    29A6: 08       PUSH  A
    29A7: 51 94    MOV   A,[__r5]
    29A9: 08       PUSH  A
    29AA: 51 93    MOV   A,[__r6]
    29AC: 08       PUSH  A
    29AD: 51 92    MOV   A,[__r7]
    29AF: 08       PUSH  A
    29B0: 7C 3A 0B LCALL 0x3A0B
    29B3: 38 F8    ADD   SP,0xF8
    29B5: 39 00    CMP   A,0x0
    29B7: B0 66    JNZ   0x2A1E
    29B9: 06 98 00 ADD   [__r1],0x0
    29BC: 0E 99 01 ADC   [__r0],0x1
    29BF: 51 99    MOV   A,[__r0]
    29C1: 60 D4    MOV   REG[0xD4],A
    29C3: 3E 98    MVI   A,[__r1]
    29C5: 53 95    MOV   [__r4],A
    29C7: 3E 98    MVI   A,[__r1]
    29C9: 53 94    MOV   [__r5],A
    29CB: 3E 98    MVI   A,[__r1]
    29CD: 53 93    MOV   [__r6],A
    29CF: 3E 98    MVI   A,[__r1]
    29D1: 53 92    MOV   [__r7],A
    29D3: 50 00    MOV   A,0x0
    29D5: 08       PUSH  A
    29D6: 08       PUSH  A
    29D7: 08       PUSH  A
    29D8: 08       PUSH  A
    29D9: 51 95    MOV   A,[__r4]
    29DB: 08       PUSH  A
    29DC: 51 94    MOV   A,[__r5]
    29DE: 08       PUSH  A
    29DF: 51 93    MOV   A,[__r6]
    29E1: 08       PUSH  A
    29E2: 51 92    MOV   A,[__r7]
    29E4: 08       PUSH  A
    29E5: 7C 3A 0B LCALL 0x3A0B
    29E8: 38 F8    ADD   SP,0xF8
    29EA: 39 00    CMP   A,0x0
    29EC: A0 31    JZ    0x2A1E
    29EE: 39 01    CMP   A,0x1
    29F0: A0 2D    JZ    0x2A1E
(0246) 	{
(0247) 		ar2[i]=3.142;
    29F2: 52 01    MOV   A,[X+1]
    29F4: 53 98    MOV   [__r1],A
    29F6: 52 00    MOV   A,[X+0]
    29F8: 53 99    MOV   [__r0],A
    29FA: 65 98    ASL   [__r1]
    29FC: 6B 99    RLC   [__r0]
    29FE: 65 98    ASL   [__r1]
    2A00: 6B 99    RLC   [__r0]
    2A02: 06 98 00 ADD   [__r1],0x0
    2A05: 0E 99 06 ADC   [__r0],0x6
    2A08: 51 99    MOV   A,[__r0]
    2A0A: 60 D5    MOV   REG[0xD5],A
    2A0C: 50 40    MOV   A,0x40
    2A0E: 3F 98    MVI   [__r1],A
    2A10: 50 49    MOV   A,0x49
    2A12: 3F 98    MVI   [__r1],A
    2A14: 50 16    MOV   A,0x16
    2A16: 3F 98    MVI   [__r1],A
    2A18: 50 87    MOV   A,0x87
    2A1A: 3F 98    MVI   [__r1],A
(0248) 	}
    2A1C: 83 27    JMP   0x2D44
(0249) 	else if((data_imm1[i]>0) && (data_re1[i]==0))
    2A1E: 62 D0 00 MOV   REG[0xD0],0x0
    2A21: 52 01    MOV   A,[X+1]
    2A23: 53 98    MOV   [__r1],A
    2A25: 52 00    MOV   A,[X+0]
    2A27: 53 99    MOV   [__r0],A
    2A29: 65 98    ASL   [__r1]
    2A2B: 6B 99    RLC   [__r0]
    2A2D: 65 98    ASL   [__r1]
    2A2F: 6B 99    RLC   [__r0]
    2A31: 51 98    MOV   A,[__r1]
    2A33: 01 00    ADD   A,0x0
    2A35: 53 96    MOV   [__r3],A
    2A37: 51 99    MOV   A,[__r0]
    2A39: 09 05    ADC   A,0x5
    2A3B: 60 D4    MOV   REG[0xD4],A
    2A3D: 3E 96    MVI   A,[__r3]
    2A3F: 53 95    MOV   [__r4],A
    2A41: 3E 96    MVI   A,[__r3]
    2A43: 53 94    MOV   [__r5],A
    2A45: 3E 96    MVI   A,[__r3]
    2A47: 53 93    MOV   [__r6],A
    2A49: 3E 96    MVI   A,[__r3]
    2A4B: 53 92    MOV   [__r7],A
    2A4D: 50 00    MOV   A,0x0
    2A4F: 08       PUSH  A
    2A50: 08       PUSH  A
    2A51: 08       PUSH  A
    2A52: 08       PUSH  A
    2A53: 51 95    MOV   A,[__r4]
    2A55: 08       PUSH  A
    2A56: 51 94    MOV   A,[__r5]
    2A58: 08       PUSH  A
    2A59: 51 93    MOV   A,[__r6]
    2A5B: 08       PUSH  A
    2A5C: 51 92    MOV   A,[__r7]
    2A5E: 08       PUSH  A
    2A5F: 7C 3A 0B LCALL 0x3A0B
    2A62: 38 F8    ADD   SP,0xF8
    2A64: 39 00    CMP   A,0x0
    2A66: A0 66    JZ    0x2ACD
    2A68: 39 01    CMP   A,0x1
    2A6A: B0 62    JNZ   0x2ACD
    2A6C: 06 98 00 ADD   [__r1],0x0
    2A6F: 0E 99 01 ADC   [__r0],0x1
    2A72: 51 99    MOV   A,[__r0]
    2A74: 60 D4    MOV   REG[0xD4],A
    2A76: 3E 98    MVI   A,[__r1]
    2A78: 53 95    MOV   [__r4],A
    2A7A: 3E 98    MVI   A,[__r1]
    2A7C: 53 94    MOV   [__r5],A
    2A7E: 3E 98    MVI   A,[__r1]
    2A80: 53 93    MOV   [__r6],A
    2A82: 3E 98    MVI   A,[__r1]
    2A84: 53 92    MOV   [__r7],A
    2A86: 50 00    MOV   A,0x0
    2A88: 08       PUSH  A
    2A89: 08       PUSH  A
    2A8A: 08       PUSH  A
    2A8B: 08       PUSH  A
    2A8C: 51 95    MOV   A,[__r4]
    2A8E: 08       PUSH  A
    2A8F: 51 94    MOV   A,[__r5]
    2A91: 08       PUSH  A
    2A92: 51 93    MOV   A,[__r6]
    2A94: 08       PUSH  A
    2A95: 51 92    MOV   A,[__r7]
    2A97: 08       PUSH  A
    2A98: 7C 3A 0B LCALL 0x3A0B
    2A9B: 38 F8    ADD   SP,0xF8
    2A9D: 39 00    CMP   A,0x0
    2A9F: B0 2D    JNZ   0x2ACD
(0250) 	{
(0251) 		ar2[i]=1.571;
    2AA1: 52 01    MOV   A,[X+1]
    2AA3: 53 98    MOV   [__r1],A
    2AA5: 52 00    MOV   A,[X+0]
    2AA7: 53 99    MOV   [__r0],A
    2AA9: 65 98    ASL   [__r1]
    2AAB: 6B 99    RLC   [__r0]
    2AAD: 65 98    ASL   [__r1]
    2AAF: 6B 99    RLC   [__r0]
    2AB1: 06 98 00 ADD   [__r1],0x0
    2AB4: 0E 99 06 ADC   [__r0],0x6
    2AB7: 51 99    MOV   A,[__r0]
    2AB9: 60 D5    MOV   REG[0xD5],A
    2ABB: 50 3F    MOV   A,0x3F
    2ABD: 3F 98    MVI   [__r1],A
    2ABF: 50 C9    MOV   A,0xC9
    2AC1: 3F 98    MVI   [__r1],A
    2AC3: 50 16    MOV   A,0x16
    2AC5: 3F 98    MVI   [__r1],A
    2AC7: 50 87    MOV   A,0x87
    2AC9: 3F 98    MVI   [__r1],A
(0252) 	}
    2ACB: 82 78    JMP   0x2D44
(0253) 	else if((data_imm1[i]<0) && (data_re1[i]==0))
    2ACD: 62 D0 00 MOV   REG[0xD0],0x0
    2AD0: 52 01    MOV   A,[X+1]
    2AD2: 53 98    MOV   [__r1],A
    2AD4: 52 00    MOV   A,[X+0]
    2AD6: 53 99    MOV   [__r0],A
    2AD8: 65 98    ASL   [__r1]
    2ADA: 6B 99    RLC   [__r0]
    2ADC: 65 98    ASL   [__r1]
    2ADE: 6B 99    RLC   [__r0]
    2AE0: 51 98    MOV   A,[__r1]
    2AE2: 01 00    ADD   A,0x0
    2AE4: 53 96    MOV   [__r3],A
    2AE6: 51 99    MOV   A,[__r0]
    2AE8: 09 05    ADC   A,0x5
    2AEA: 60 D4    MOV   REG[0xD4],A
    2AEC: 3E 96    MVI   A,[__r3]
    2AEE: 53 95    MOV   [__r4],A
    2AF0: 3E 96    MVI   A,[__r3]
    2AF2: 53 94    MOV   [__r5],A
    2AF4: 3E 96    MVI   A,[__r3]
    2AF6: 53 93    MOV   [__r6],A
    2AF8: 3E 96    MVI   A,[__r3]
    2AFA: 53 92    MOV   [__r7],A
    2AFC: 50 00    MOV   A,0x0
    2AFE: 08       PUSH  A
    2AFF: 08       PUSH  A
    2B00: 08       PUSH  A
    2B01: 08       PUSH  A
    2B02: 51 95    MOV   A,[__r4]
    2B04: 08       PUSH  A
    2B05: 51 94    MOV   A,[__r5]
    2B07: 08       PUSH  A
    2B08: 51 93    MOV   A,[__r6]
    2B0A: 08       PUSH  A
    2B0B: 51 92    MOV   A,[__r7]
    2B0D: 08       PUSH  A
    2B0E: 7C 3A 0B LCALL 0x3A0B
    2B11: 38 F8    ADD   SP,0xF8
    2B13: 39 00    CMP   A,0x0
    2B15: A0 66    JZ    0x2B7C
    2B17: 39 01    CMP   A,0x1
    2B19: A0 62    JZ    0x2B7C
    2B1B: 06 98 00 ADD   [__r1],0x0
    2B1E: 0E 99 01 ADC   [__r0],0x1
    2B21: 51 99    MOV   A,[__r0]
    2B23: 60 D4    MOV   REG[0xD4],A
    2B25: 3E 98    MVI   A,[__r1]
    2B27: 53 95    MOV   [__r4],A
    2B29: 3E 98    MVI   A,[__r1]
    2B2B: 53 94    MOV   [__r5],A
    2B2D: 3E 98    MVI   A,[__r1]
    2B2F: 53 93    MOV   [__r6],A
    2B31: 3E 98    MVI   A,[__r1]
    2B33: 53 92    MOV   [__r7],A
    2B35: 50 00    MOV   A,0x0
    2B37: 08       PUSH  A
    2B38: 08       PUSH  A
    2B39: 08       PUSH  A
    2B3A: 08       PUSH  A
    2B3B: 51 95    MOV   A,[__r4]
    2B3D: 08       PUSH  A
    2B3E: 51 94    MOV   A,[__r5]
    2B40: 08       PUSH  A
    2B41: 51 93    MOV   A,[__r6]
    2B43: 08       PUSH  A
    2B44: 51 92    MOV   A,[__r7]
    2B46: 08       PUSH  A
    2B47: 7C 3A 0B LCALL 0x3A0B
    2B4A: 38 F8    ADD   SP,0xF8
    2B4C: 39 00    CMP   A,0x0
    2B4E: B0 2D    JNZ   0x2B7C
(0254) 	{
(0255) 		ar2[i]=3*1.571;
    2B50: 52 01    MOV   A,[X+1]
    2B52: 53 98    MOV   [__r1],A
    2B54: 52 00    MOV   A,[X+0]
    2B56: 53 99    MOV   [__r0],A
    2B58: 65 98    ASL   [__r1]
    2B5A: 6B 99    RLC   [__r0]
    2B5C: 65 98    ASL   [__r1]
    2B5E: 6B 99    RLC   [__r0]
    2B60: 06 98 00 ADD   [__r1],0x0
    2B63: 0E 99 06 ADC   [__r0],0x6
    2B66: 51 99    MOV   A,[__r0]
    2B68: 60 D5    MOV   REG[0xD5],A
    2B6A: 50 40    MOV   A,0x40
    2B6C: 3F 98    MVI   [__r1],A
    2B6E: 50 96    MOV   A,0x96
    2B70: 3F 98    MVI   [__r1],A
    2B72: 50 D0    MOV   A,0xD0
    2B74: 3F 98    MVI   [__r1],A
    2B76: 50 E5    MOV   A,0xE5
    2B78: 3F 98    MVI   [__r1],A
(0256) 	}
    2B7A: 81 C9    JMP   0x2D44
(0257) 	else
(0258) 	{
(0259) 		ar2[i]=atan(data_imm1[i]/data_re1[i]);
    2B7C: 62 D0 00 MOV   REG[0xD0],0x0
    2B7F: 52 01    MOV   A,[X+1]
    2B81: 53 98    MOV   [__r1],A
    2B83: 52 00    MOV   A,[X+0]
    2B85: 53 99    MOV   [__r0],A
    2B87: 65 98    ASL   [__r1]
    2B89: 6B 99    RLC   [__r0]
    2B8B: 65 98    ASL   [__r1]
    2B8D: 6B 99    RLC   [__r0]
    2B8F: 51 98    MOV   A,[__r1]
    2B91: 54 09    MOV   [X+9],A
    2B93: 51 99    MOV   A,[__r0]
    2B95: 54 08    MOV   [X+8],A
    2B97: 51 98    MOV   A,[__r1]
    2B99: 01 00    ADD   A,0x0
    2B9B: 53 96    MOV   [__r3],A
    2B9D: 51 99    MOV   A,[__r0]
    2B9F: 09 01    ADC   A,0x1
    2BA1: 60 D4    MOV   REG[0xD4],A
    2BA3: 3E 96    MVI   A,[__r3]
    2BA5: 53 95    MOV   [__r4],A
    2BA7: 3E 96    MVI   A,[__r3]
    2BA9: 53 94    MOV   [__r5],A
    2BAB: 3E 96    MVI   A,[__r3]
    2BAD: 53 93    MOV   [__r6],A
    2BAF: 3E 96    MVI   A,[__r3]
    2BB1: 53 92    MOV   [__r7],A
    2BB3: 51 98    MOV   A,[__r1]
    2BB5: 01 00    ADD   A,0x0
    2BB7: 53 96    MOV   [__r3],A
    2BB9: 51 99    MOV   A,[__r0]
    2BBB: 09 05    ADC   A,0x5
    2BBD: 60 D4    MOV   REG[0xD4],A
    2BBF: 3E 96    MVI   A,[__r3]
    2BC1: 53 91    MOV   [__r8],A
    2BC3: 3E 96    MVI   A,[__r3]
    2BC5: 53 90    MOV   [__r9],A
    2BC7: 3E 96    MVI   A,[__r3]
    2BC9: 53 8F    MOV   [__r10],A
    2BCB: 3E 96    MVI   A,[__r3]
    2BCD: 53 8E    MOV   [__r11],A
    2BCF: 51 95    MOV   A,[__r4]
    2BD1: 08       PUSH  A
    2BD2: 51 94    MOV   A,[__r5]
    2BD4: 08       PUSH  A
    2BD5: 51 93    MOV   A,[__r6]
    2BD7: 08       PUSH  A
    2BD8: 51 92    MOV   A,[__r7]
    2BDA: 08       PUSH  A
    2BDB: 51 91    MOV   A,[__r8]
    2BDD: 08       PUSH  A
    2BDE: 51 90    MOV   A,[__r9]
    2BE0: 08       PUSH  A
    2BE1: 51 8F    MOV   A,[__r10]
    2BE3: 08       PUSH  A
    2BE4: 51 8E    MOV   A,[__r11]
    2BE6: 08       PUSH  A
    2BE7: 7C 3A 68 LCALL 0x3A68
    2BEA: 18       POP   A
    2BEB: 53 92    MOV   [__r7],A
    2BED: 18       POP   A
    2BEE: 53 93    MOV   [__r6],A
    2BF0: 18       POP   A
    2BF1: 53 94    MOV   [__r5],A
    2BF3: 18       POP   A
    2BF4: 38 FC    ADD   SP,0xFC
    2BF6: 08       PUSH  A
    2BF7: 51 94    MOV   A,[__r5]
    2BF9: 08       PUSH  A
    2BFA: 51 93    MOV   A,[__r6]
    2BFC: 08       PUSH  A
    2BFD: 51 92    MOV   A,[__r7]
    2BFF: 08       PUSH  A
    2C00: 7C 49 85 LCALL _atanf
    2C03: 38 FC    ADD   SP,0xFC
    2C05: 62 D0 00 MOV   REG[0xD0],0x0
    2C08: 52 09    MOV   A,[X+9]
    2C0A: 01 00    ADD   A,0x0
    2C0C: 53 94    MOV   [__r5],A
    2C0E: 52 08    MOV   A,[X+8]
    2C10: 09 06    ADC   A,0x6
    2C12: 60 D5    MOV   REG[0xD5],A
    2C14: 51 99    MOV   A,[__r0]
    2C16: 3F 94    MVI   [__r5],A
    2C18: 51 98    MOV   A,[__r1]
    2C1A: 3F 94    MVI   [__r5],A
    2C1C: 51 97    MOV   A,[__r2]
    2C1E: 3F 94    MVI   [__r5],A
    2C20: 51 96    MOV   A,[__r3]
    2C22: 3F 94    MVI   [__r5],A
(0260) 		//ar2[i]=atan_cordic(x1[i],z1[i]);
(0261) 		if(neg==1)
    2C24: 3D 04 00 CMP   [X+4],0x0
    2C27: B0 73    JNZ   0x2C9B
    2C29: 3D 05 01 CMP   [X+5],0x1
    2C2C: B0 6E    JNZ   0x2C9B
(0262) 			ar2[i]=1.571-ar2[i];
    2C2E: 62 D0 00 MOV   REG[0xD0],0x0
    2C31: 52 01    MOV   A,[X+1]
    2C33: 53 98    MOV   [__r1],A
    2C35: 52 00    MOV   A,[X+0]
    2C37: 53 99    MOV   [__r0],A
    2C39: 65 98    ASL   [__r1]
    2C3B: 6B 99    RLC   [__r0]
    2C3D: 65 98    ASL   [__r1]
    2C3F: 6B 99    RLC   [__r0]
    2C41: 06 98 00 ADD   [__r1],0x0
    2C44: 0E 99 06 ADC   [__r0],0x6
    2C47: 51 99    MOV   A,[__r0]
    2C49: 60 D4    MOV   REG[0xD4],A
    2C4B: 3E 98    MVI   A,[__r1]
    2C4D: 53 95    MOV   [__r4],A
    2C4F: 3E 98    MVI   A,[__r1]
    2C51: 53 94    MOV   [__r5],A
    2C53: 3E 98    MVI   A,[__r1]
    2C55: 53 93    MOV   [__r6],A
    2C57: 3E 98    MVI   A,[__r1]
    2C59: 16 98 04 SUB   [__r1],0x4
    2C5C: 53 92    MOV   [__r7],A
    2C5E: 51 95    MOV   A,[__r4]
    2C60: 08       PUSH  A
    2C61: 51 94    MOV   A,[__r5]
    2C63: 08       PUSH  A
    2C64: 51 93    MOV   A,[__r6]
    2C66: 08       PUSH  A
    2C67: 51 92    MOV   A,[__r7]
    2C69: 08       PUSH  A
    2C6A: 50 3F    MOV   A,0x3F
    2C6C: 08       PUSH  A
    2C6D: 50 C9    MOV   A,0xC9
    2C6F: 08       PUSH  A
    2C70: 50 16    MOV   A,0x16
    2C72: 08       PUSH  A
    2C73: 50 87    MOV   A,0x87
    2C75: 08       PUSH  A
    2C76: 7C 3C 75 LCALL 0x3C75
    2C79: 18       POP   A
    2C7A: 53 92    MOV   [__r7],A
    2C7C: 18       POP   A
    2C7D: 53 93    MOV   [__r6],A
    2C7F: 18       POP   A
    2C80: 53 94    MOV   [__r5],A
    2C82: 18       POP   A
    2C83: 53 95    MOV   [__r4],A
    2C85: 38 FC    ADD   SP,0xFC
    2C87: 51 99    MOV   A,[__r0]
    2C89: 60 D5    MOV   REG[0xD5],A
    2C8B: 51 95    MOV   A,[__r4]
    2C8D: 3F 98    MVI   [__r1],A
    2C8F: 51 94    MOV   A,[__r5]
    2C91: 3F 98    MVI   [__r1],A
    2C93: 51 93    MOV   A,[__r6]
    2C95: 3F 98    MVI   [__r1],A
    2C97: 51 92    MOV   A,[__r7]
    2C99: 3F 98    MVI   [__r1],A
(0263) 		ar2[i]=ar2[i]+offset;
    2C9B: 62 D0 00 MOV   REG[0xD0],0x0
    2C9E: 52 01    MOV   A,[X+1]
    2CA0: 53 98    MOV   [__r1],A
    2CA2: 52 00    MOV   A,[X+0]
    2CA4: 53 99    MOV   [__r0],A
    2CA6: 65 98    ASL   [__r1]
    2CA8: 6B 99    RLC   [__r0]
    2CAA: 65 98    ASL   [__r1]
    2CAC: 6B 99    RLC   [__r0]
    2CAE: 06 98 00 ADD   [__r1],0x0
    2CB1: 0E 99 06 ADC   [__r0],0x6
    2CB4: 52 03    MOV   A,[X+3]
    2CB6: 53 92    MOV   [__r7],A
    2CB8: 52 02    MOV   A,[X+2]
    2CBA: 53 93    MOV   [__r6],A
    2CBC: 47 93 80 TST   [__r6],0x80
    2CBF: A0 09    JZ    0x2CC9
    2CC1: 55 94 FF MOV   [__r5],0xFF
    2CC4: 55 95 FF MOV   [__r4],0xFF
    2CC7: 80 0A    JMP   0x2CD2
    2CC9: 62 D0 00 MOV   REG[0xD0],0x0
    2CCC: 55 94 00 MOV   [__r5],0x0
    2CCF: 55 95 00 MOV   [__r4],0x0
    2CD2: 62 D0 00 MOV   REG[0xD0],0x0
    2CD5: 51 95    MOV   A,[__r4]
    2CD7: 08       PUSH  A
    2CD8: 51 94    MOV   A,[__r5]
    2CDA: 08       PUSH  A
    2CDB: 51 93    MOV   A,[__r6]
    2CDD: 08       PUSH  A
    2CDE: 51 92    MOV   A,[__r7]
    2CE0: 08       PUSH  A
    2CE1: 7C 3D 4F LCALL 0x3D4F
    2CE4: 18       POP   A
    2CE5: 53 92    MOV   [__r7],A
    2CE7: 18       POP   A
    2CE8: 53 93    MOV   [__r6],A
    2CEA: 18       POP   A
    2CEB: 53 94    MOV   [__r5],A
    2CED: 18       POP   A
    2CEE: 53 95    MOV   [__r4],A
    2CF0: 51 99    MOV   A,[__r0]
    2CF2: 60 D4    MOV   REG[0xD4],A
    2CF4: 3E 98    MVI   A,[__r1]
    2CF6: 53 91    MOV   [__r8],A
    2CF8: 3E 98    MVI   A,[__r1]
    2CFA: 53 90    MOV   [__r9],A
    2CFC: 3E 98    MVI   A,[__r1]
    2CFE: 53 8F    MOV   [__r10],A
    2D00: 3E 98    MVI   A,[__r1]
    2D02: 16 98 04 SUB   [__r1],0x4
    2D05: 53 8E    MOV   [__r11],A
    2D07: 51 95    MOV   A,[__r4]
    2D09: 08       PUSH  A
    2D0A: 51 94    MOV   A,[__r5]
    2D0C: 08       PUSH  A
    2D0D: 51 93    MOV   A,[__r6]
    2D0F: 08       PUSH  A
    2D10: 51 92    MOV   A,[__r7]
    2D12: 08       PUSH  A
    2D13: 51 91    MOV   A,[__r8]
    2D15: 08       PUSH  A
    2D16: 51 90    MOV   A,[__r9]
    2D18: 08       PUSH  A
    2D19: 51 8F    MOV   A,[__r10]
    2D1B: 08       PUSH  A
    2D1C: 51 8E    MOV   A,[__r11]
    2D1E: 08       PUSH  A
    2D1F: 7C 39 0B LCALL 0x390B
    2D22: 18       POP   A
    2D23: 53 92    MOV   [__r7],A
    2D25: 18       POP   A
    2D26: 53 93    MOV   [__r6],A
    2D28: 18       POP   A
    2D29: 53 94    MOV   [__r5],A
    2D2B: 18       POP   A
    2D2C: 53 95    MOV   [__r4],A
    2D2E: 38 FC    ADD   SP,0xFC
    2D30: 51 99    MOV   A,[__r0]
    2D32: 60 D5    MOV   REG[0xD5],A
    2D34: 51 95    MOV   A,[__r4]
    2D36: 3F 98    MVI   [__r1],A
    2D38: 51 94    MOV   A,[__r5]
    2D3A: 3F 98    MVI   [__r1],A
    2D3C: 51 93    MOV   A,[__r6]
    2D3E: 3F 98    MVI   [__r1],A
    2D40: 51 92    MOV   A,[__r7]
    2D42: 3F 98    MVI   [__r1],A
(0264) 	}
(0265) 	
(0266) 	
(0267) 	}
    2D44: 77 01    INC   [X+1]
    2D46: 0F 00 00 ADC   [X+0],0x0
    2D49: 52 01    MOV   A,[X+1]
    2D4B: 11 20    SUB   A,0x20
    2D4D: 52 00    MOV   A,[X+0]
    2D4F: 31 80    XOR   A,0x80
    2D51: 19 80    SBB   A,0x80
    2D53: D0 04    JNC   0x2D58
    2D55: 7D 21 6F LJMP  0x216F
(0268) 	LCD_Clear();
    2D58: 7C 20 B1 LCALL _LCD_Clear
(0269) 	LCD_Position(0,0);
    2D5B: 10       PUSH  X
    2D5C: 50 00    MOV   A,0x0
    2D5E: 57 00    MOV   X,0x0
    2D60: 7C 09 F2 LCALL _LCD_Position
(0270) 	LCD_PrCString("Exiting cordic");
    2D63: 50 01    MOV   A,0x1
    2D65: 08       PUSH  A
    2D66: 50 CD    MOV   A,0xCD
    2D68: 5C       MOV   X,A
    2D69: 18       POP   A
    2D6A: 7C 08 6D LCALL _LCD_PrCString
    2D6D: 20       POP   X
    2D6E: 38 F6    ADD   SP,0xF6
    2D70: 20       POP   X
    2D71: 7F       RET   
(0271) }
(0272) 
(0273) 
(0274) 
(0275) //x1  --> data_re
(0276) //x2 --> data_imm
(0277) //z1 --> mod
(0278) //z2 --> data_re1
(0279) void max_likelihood(void)
(0280) {
_max_likelihood:
  Status               --> X+36
  value                --> X+32
  temp1                --> X+30
  doa                  --> X+26
  qmax                 --> X+22
  max                  --> X+18
  i                    --> X+16
  phin                 --> X+12
  temp                 --> X+8
  ph                   --> X+4
  n                    --> X+2
  q                    --> X+0
    2D72: 10       PUSH  X
    2D73: 4F       MOV   X,SP
    2D74: 38 26    ADD   SP,0x26
(0281) int i,n,q,Status;
(0282) 	double phin,max,qmax,ph, temp;
(0283) 	double doa;
(0284) 	char *temp1;
(0285) 	double value;
(0286) for(i=0;i<31;i++)
    2D76: 56 11 00 MOV   [X+17],0x0
    2D79: 56 10 00 MOV   [X+16],0x0
(0287) 	data_re[i]=ar1[i]-ar2[i];
    2D7C: 62 D0 00 MOV   REG[0xD0],0x0
    2D7F: 52 11    MOV   A,[X+17]
    2D81: 53 98    MOV   [__r1],A
    2D83: 52 10    MOV   A,[X+16]
    2D85: 53 99    MOV   [__r0],A
    2D87: 65 98    ASL   [__r1]
    2D89: 6B 99    RLC   [__r0]
    2D8B: 65 98    ASL   [__r1]
    2D8D: 6B 99    RLC   [__r0]
    2D8F: 51 98    MOV   A,[__r1]
    2D91: 01 00    ADD   A,0x0
    2D93: 53 96    MOV   [__r3],A
    2D95: 51 99    MOV   A,[__r0]
    2D97: 09 06    ADC   A,0x6
    2D99: 60 D4    MOV   REG[0xD4],A
    2D9B: 3E 96    MVI   A,[__r3]
    2D9D: 53 95    MOV   [__r4],A
    2D9F: 3E 96    MVI   A,[__r3]
    2DA1: 53 94    MOV   [__r5],A
    2DA3: 3E 96    MVI   A,[__r3]
    2DA5: 53 93    MOV   [__r6],A
    2DA7: 3E 96    MVI   A,[__r3]
    2DA9: 53 92    MOV   [__r7],A
    2DAB: 51 98    MOV   A,[__r1]
    2DAD: 01 0B    ADD   A,0xB
    2DAF: 53 96    MOV   [__r3],A
    2DB1: 51 99    MOV   A,[__r0]
    2DB3: 09 00    ADC   A,0x0
    2DB5: 60 D4    MOV   REG[0xD4],A
    2DB7: 3E 96    MVI   A,[__r3]
    2DB9: 53 91    MOV   [__r8],A
    2DBB: 3E 96    MVI   A,[__r3]
    2DBD: 53 90    MOV   [__r9],A
    2DBF: 3E 96    MVI   A,[__r3]
    2DC1: 53 8F    MOV   [__r10],A
    2DC3: 3E 96    MVI   A,[__r3]
    2DC5: 53 8E    MOV   [__r11],A
    2DC7: 51 95    MOV   A,[__r4]
    2DC9: 08       PUSH  A
    2DCA: 51 94    MOV   A,[__r5]
    2DCC: 08       PUSH  A
    2DCD: 51 93    MOV   A,[__r6]
    2DCF: 08       PUSH  A
    2DD0: 51 92    MOV   A,[__r7]
    2DD2: 08       PUSH  A
    2DD3: 51 91    MOV   A,[__r8]
    2DD5: 08       PUSH  A
    2DD6: 51 90    MOV   A,[__r9]
    2DD8: 08       PUSH  A
    2DD9: 51 8F    MOV   A,[__r10]
    2DDB: 08       PUSH  A
    2DDC: 51 8E    MOV   A,[__r11]
    2DDE: 08       PUSH  A
    2DDF: 7C 3C 75 LCALL 0x3C75
    2DE2: 18       POP   A
    2DE3: 53 92    MOV   [__r7],A
    2DE5: 18       POP   A
    2DE6: 53 93    MOV   [__r6],A
    2DE8: 18       POP   A
    2DE9: 53 94    MOV   [__r5],A
    2DEB: 18       POP   A
    2DEC: 53 95    MOV   [__r4],A
    2DEE: 38 FC    ADD   SP,0xFC
    2DF0: 06 98 00 ADD   [__r1],0x0
    2DF3: 0E 99 03 ADC   [__r0],0x3
    2DF6: 51 99    MOV   A,[__r0]
    2DF8: 60 D5    MOV   REG[0xD5],A
    2DFA: 51 95    MOV   A,[__r4]
    2DFC: 3F 98    MVI   [__r1],A
    2DFE: 51 94    MOV   A,[__r5]
    2E00: 3F 98    MVI   [__r1],A
    2E02: 51 93    MOV   A,[__r6]
    2E04: 3F 98    MVI   [__r1],A
    2E06: 51 92    MOV   A,[__r7]
    2E08: 3F 98    MVI   [__r1],A
    2E0A: 77 11    INC   [X+17]
    2E0C: 0F 10 00 ADC   [X+16],0x0
    2E0F: 52 11    MOV   A,[X+17]
    2E11: 11 1F    SUB   A,0x1F
    2E13: 52 10    MOV   A,[X+16]
    2E15: 31 80    XOR   A,0x80
    2E17: 19 80    SBB   A,0x80
    2E19: CF 62    JC    0x2D7C
(0288) 
(0289) 
(0290) 
(0291) for(i=0;i<64;i++)
    2E1B: 56 11 00 MOV   [X+17],0x0
    2E1E: 56 10 00 MOV   [X+16],0x0
(0292) {
(0293) data_imm[i]=0;
    2E21: 62 D0 00 MOV   REG[0xD0],0x0
    2E24: 52 11    MOV   A,[X+17]
    2E26: 53 98    MOV   [__r1],A
    2E28: 52 10    MOV   A,[X+16]
    2E2A: 53 99    MOV   [__r0],A
    2E2C: 65 98    ASL   [__r1]
    2E2E: 6B 99    RLC   [__r0]
    2E30: 65 98    ASL   [__r1]
    2E32: 6B 99    RLC   [__r0]
    2E34: 06 98 00 ADD   [__r1],0x0
    2E37: 0E 99 04 ADC   [__r0],0x4
    2E3A: 51 99    MOV   A,[__r0]
    2E3C: 60 D5    MOV   REG[0xD5],A
    2E3E: 50 00    MOV   A,0x0
    2E40: 3F 98    MVI   [__r1],A
    2E42: 3F 98    MVI   [__r1],A
    2E44: 3F 98    MVI   [__r1],A
    2E46: 3F 98    MVI   [__r1],A
(0294) mod[i]=0;
    2E48: 52 11    MOV   A,[X+17]
    2E4A: 53 98    MOV   [__r1],A
    2E4C: 52 10    MOV   A,[X+16]
    2E4E: 53 99    MOV   [__r0],A
    2E50: 65 98    ASL   [__r1]
    2E52: 6B 99    RLC   [__r0]
    2E54: 65 98    ASL   [__r1]
    2E56: 6B 99    RLC   [__r0]
    2E58: 06 98 00 ADD   [__r1],0x0
    2E5B: 0E 99 02 ADC   [__r0],0x2
    2E5E: 51 99    MOV   A,[__r0]
    2E60: 60 D5    MOV   REG[0xD5],A
    2E62: 50 00    MOV   A,0x0
    2E64: 3F 98    MVI   [__r1],A
    2E66: 3F 98    MVI   [__r1],A
    2E68: 3F 98    MVI   [__r1],A
    2E6A: 3F 98    MVI   [__r1],A
(0295) data_re1[i]=0;
    2E6C: 52 11    MOV   A,[X+17]
    2E6E: 53 98    MOV   [__r1],A
    2E70: 52 10    MOV   A,[X+16]
    2E72: 53 99    MOV   [__r0],A
    2E74: 65 98    ASL   [__r1]
    2E76: 6B 99    RLC   [__r0]
    2E78: 65 98    ASL   [__r1]
    2E7A: 6B 99    RLC   [__r0]
    2E7C: 06 98 00 ADD   [__r1],0x0
    2E7F: 0E 99 01 ADC   [__r0],0x1
    2E82: 51 99    MOV   A,[__r0]
    2E84: 60 D5    MOV   REG[0xD5],A
    2E86: 50 00    MOV   A,0x0
    2E88: 3F 98    MVI   [__r1],A
    2E8A: 3F 98    MVI   [__r1],A
    2E8C: 3F 98    MVI   [__r1],A
    2E8E: 3F 98    MVI   [__r1],A
(0296) }
    2E90: 77 11    INC   [X+17]
    2E92: 0F 10 00 ADC   [X+16],0x0
    2E95: 52 11    MOV   A,[X+17]
    2E97: 11 40    SUB   A,0x40
    2E99: 52 10    MOV   A,[X+16]
    2E9B: 31 80    XOR   A,0x80
    2E9D: 19 80    SBB   A,0x80
    2E9F: CF 81    JC    0x2E21
(0297) 
(0298) phin=-0.397604;
    2EA1: 56 0C BE MOV   [X+12],0xBE
    2EA4: 56 0D CB MOV   [X+13],0xCB
    2EA7: 56 0E 92 MOV   [X+14],0x92
    2EAA: 56 0F C0 MOV   [X+15],0xC0
(0299) max=0;
    2EAD: 56 12 00 MOV   [X+18],0x0
    2EB0: 56 13 00 MOV   [X+19],0x0
    2EB3: 56 14 00 MOV   [X+20],0x0
    2EB6: 56 15 00 MOV   [X+21],0x0
(0300) qmax=0;
    2EB9: 56 16 00 MOV   [X+22],0x0
    2EBC: 56 17 00 MOV   [X+23],0x0
    2EBF: 56 18 00 MOV   [X+24],0x0
    2EC2: 56 19 00 MOV   [X+25],0x0
(0301) 
(0302) for(q=0;q<162;q++)
    2EC5: 56 01 00 MOV   [X+1],0x0
    2EC8: 56 00 00 MOV   [X+0],0x0
(0303) {
(0304) 	phin = phin + 0.0049087;
    2ECB: 50 3B    MOV   A,0x3B
    2ECD: 08       PUSH  A
    2ECE: 50 A0    MOV   A,0xA0
    2ED0: 08       PUSH  A
    2ED1: 50 D9    MOV   A,0xD9
    2ED3: 08       PUSH  A
    2ED4: 50 29    MOV   A,0x29
    2ED6: 08       PUSH  A
    2ED7: 52 0C    MOV   A,[X+12]
    2ED9: 08       PUSH  A
    2EDA: 52 0D    MOV   A,[X+13]
    2EDC: 08       PUSH  A
    2EDD: 52 0E    MOV   A,[X+14]
    2EDF: 08       PUSH  A
    2EE0: 52 0F    MOV   A,[X+15]
    2EE2: 08       PUSH  A
    2EE3: 62 D0 00 MOV   REG[0xD0],0x0
    2EE6: 7C 39 0B LCALL 0x390B
    2EE9: 18       POP   A
    2EEA: 54 0F    MOV   [X+15],A
    2EEC: 18       POP   A
    2EED: 54 0E    MOV   [X+14],A
    2EEF: 18       POP   A
    2EF0: 54 0D    MOV   [X+13],A
    2EF2: 18       POP   A
    2EF3: 54 0C    MOV   [X+12],A
    2EF5: 38 FC    ADD   SP,0xFC
(0305) 	
(0306) 	for(n=0;n<31;n++)
    2EF7: 56 03 00 MOV   [X+3],0x0
    2EFA: 56 02 00 MOV   [X+2],0x0
(0307) 	{
(0308) //		i=n;
(0309) //		ph=0;
(0310) //		for(i=0;i<n;i++)
(0311) //			ph = ph + phin;
(0312) 		
(0313) 		ph = phin * n;
    2EFD: 62 D0 00 MOV   REG[0xD0],0x0
    2F00: 52 03    MOV   A,[X+3]
    2F02: 53 96    MOV   [__r3],A
    2F04: 52 02    MOV   A,[X+2]
    2F06: 53 97    MOV   [__r2],A
    2F08: 47 97 80 TST   [__r2],0x80
    2F0B: A0 09    JZ    0x2F15
    2F0D: 55 98 FF MOV   [__r1],0xFF
    2F10: 55 99 FF MOV   [__r0],0xFF
    2F13: 80 0A    JMP   0x2F1E
    2F15: 62 D0 00 MOV   REG[0xD0],0x0
    2F18: 55 98 00 MOV   [__r1],0x0
    2F1B: 55 99 00 MOV   [__r0],0x0
    2F1E: 62 D0 00 MOV   REG[0xD0],0x0
    2F21: 51 99    MOV   A,[__r0]
    2F23: 08       PUSH  A
    2F24: 51 98    MOV   A,[__r1]
    2F26: 08       PUSH  A
    2F27: 51 97    MOV   A,[__r2]
    2F29: 08       PUSH  A
    2F2A: 51 96    MOV   A,[__r3]
    2F2C: 08       PUSH  A
    2F2D: 7C 3D 4F LCALL 0x3D4F
    2F30: 18       POP   A
    2F31: 53 96    MOV   [__r3],A
    2F33: 18       POP   A
    2F34: 53 97    MOV   [__r2],A
    2F36: 18       POP   A
    2F37: 53 98    MOV   [__r1],A
    2F39: 18       POP   A
    2F3A: 08       PUSH  A
    2F3B: 51 98    MOV   A,[__r1]
    2F3D: 08       PUSH  A
    2F3E: 51 97    MOV   A,[__r2]
    2F40: 08       PUSH  A
    2F41: 51 96    MOV   A,[__r3]
    2F43: 08       PUSH  A
    2F44: 52 0C    MOV   A,[X+12]
    2F46: 08       PUSH  A
    2F47: 52 0D    MOV   A,[X+13]
    2F49: 08       PUSH  A
    2F4A: 52 0E    MOV   A,[X+14]
    2F4C: 08       PUSH  A
    2F4D: 52 0F    MOV   A,[X+15]
    2F4F: 08       PUSH  A
    2F50: 7C 3B 4B LCALL 0x3B4B
    2F53: 18       POP   A
    2F54: 54 07    MOV   [X+7],A
    2F56: 18       POP   A
    2F57: 54 06    MOV   [X+6],A
    2F59: 18       POP   A
    2F5A: 54 05    MOV   [X+5],A
    2F5C: 18       POP   A
    2F5D: 54 04    MOV   [X+4],A
    2F5F: 38 FC    ADD   SP,0xFC
(0314) 		if(q<64)
    2F61: 52 01    MOV   A,[X+1]
    2F63: 11 40    SUB   A,0x40
    2F65: 52 00    MOV   A,[X+0]
    2F67: 31 80    XOR   A,0x80
    2F69: 19 80    SBB   A,0x80
    2F6B: D0 FB    JNC   0x3067
(0315) 		{
(0316) 			data_imm[q]=data_imm[q]+cos(data_re[n]-ph);
    2F6D: 62 D0 00 MOV   REG[0xD0],0x0
    2F70: 52 03    MOV   A,[X+3]
    2F72: 53 98    MOV   [__r1],A
    2F74: 52 02    MOV   A,[X+2]
    2F76: 53 99    MOV   [__r0],A
    2F78: 65 98    ASL   [__r1]
    2F7A: 6B 99    RLC   [__r0]
    2F7C: 65 98    ASL   [__r1]
    2F7E: 6B 99    RLC   [__r0]
    2F80: 06 98 00 ADD   [__r1],0x0
    2F83: 0E 99 03 ADC   [__r0],0x3
    2F86: 51 99    MOV   A,[__r0]
    2F88: 60 D4    MOV   REG[0xD4],A
    2F8A: 3E 98    MVI   A,[__r1]
    2F8C: 53 95    MOV   [__r4],A
    2F8E: 3E 98    MVI   A,[__r1]
    2F90: 53 94    MOV   [__r5],A
    2F92: 3E 98    MVI   A,[__r1]
    2F94: 53 93    MOV   [__r6],A
    2F96: 3E 98    MVI   A,[__r1]
    2F98: 53 92    MOV   [__r7],A
    2F9A: 52 04    MOV   A,[X+4]
    2F9C: 08       PUSH  A
    2F9D: 52 05    MOV   A,[X+5]
    2F9F: 08       PUSH  A
    2FA0: 52 06    MOV   A,[X+6]
    2FA2: 08       PUSH  A
    2FA3: 52 07    MOV   A,[X+7]
    2FA5: 08       PUSH  A
    2FA6: 51 95    MOV   A,[__r4]
    2FA8: 08       PUSH  A
    2FA9: 51 94    MOV   A,[__r5]
    2FAB: 08       PUSH  A
    2FAC: 51 93    MOV   A,[__r6]
    2FAE: 08       PUSH  A
    2FAF: 51 92    MOV   A,[__r7]
    2FB1: 08       PUSH  A
    2FB2: 7C 3C 75 LCALL 0x3C75
    2FB5: 18       POP   A
    2FB6: 53 96    MOV   [__r3],A
    2FB8: 18       POP   A
    2FB9: 53 97    MOV   [__r2],A
    2FBB: 18       POP   A
    2FBC: 53 98    MOV   [__r1],A
    2FBE: 18       POP   A
    2FBF: 38 FC    ADD   SP,0xFC
    2FC1: 08       PUSH  A
    2FC2: 51 98    MOV   A,[__r1]
    2FC4: 08       PUSH  A
    2FC5: 51 97    MOV   A,[__r2]
    2FC7: 08       PUSH  A
    2FC8: 51 96    MOV   A,[__r3]
    2FCA: 08       PUSH  A
    2FCB: 7C 49 E7 LCALL _cosf
    2FCE: 38 FC    ADD   SP,0xFC
    2FD0: 62 D0 00 MOV   REG[0xD0],0x0
    2FD3: 52 01    MOV   A,[X+1]
    2FD5: 53 94    MOV   [__r5],A
    2FD7: 52 00    MOV   A,[X+0]
    2FD9: 53 95    MOV   [__r4],A
    2FDB: 65 94    ASL   [__r5]
    2FDD: 6B 95    RLC   [__r4]
    2FDF: 65 94    ASL   [__r5]
    2FE1: 6B 95    RLC   [__r4]
    2FE3: 06 94 00 ADD   [__r5],0x0
    2FE6: 0E 95 04 ADC   [__r4],0x4
    2FE9: 51 95    MOV   A,[__r4]
    2FEB: 60 D4    MOV   REG[0xD4],A
    2FED: 3E 94    MVI   A,[__r5]
    2FEF: 53 91    MOV   [__r8],A
    2FF1: 3E 94    MVI   A,[__r5]
    2FF3: 53 90    MOV   [__r9],A
    2FF5: 3E 94    MVI   A,[__r5]
    2FF7: 53 8F    MOV   [__r10],A
    2FF9: 3E 94    MVI   A,[__r5]
    2FFB: 16 94 04 SUB   [__r5],0x4
    2FFE: 53 8E    MOV   [__r11],A
    3000: 51 99    MOV   A,[__r0]
    3002: 08       PUSH  A
    3003: 51 98    MOV   A,[__r1]
    3005: 08       PUSH  A
    3006: 51 97    MOV   A,[__r2]
    3008: 08       PUSH  A
    3009: 51 96    MOV   A,[__r3]
    300B: 08       PUSH  A
    300C: 51 91    MOV   A,[__r8]
    300E: 08       PUSH  A
    300F: 51 90    MOV   A,[__r9]
    3011: 08       PUSH  A
    3012: 51 8F    MOV   A,[__r10]
    3014: 08       PUSH  A
    3015: 51 8E    MOV   A,[__r11]
    3017: 08       PUSH  A
    3018: 7C 39 0B LCALL 0x390B
    301B: 18       POP   A
    301C: 53 96    MOV   [__r3],A
    301E: 18       POP   A
    301F: 53 97    MOV   [__r2],A
    3021: 18       POP   A
    3022: 53 98    MOV   [__r1],A
    3024: 18       POP   A
    3025: 53 99    MOV   [__r0],A
    3027: 38 FC    ADD   SP,0xFC
    3029: 51 95    MOV   A,[__r4]
    302B: 60 D5    MOV   REG[0xD5],A
    302D: 51 99    MOV   A,[__r0]
    302F: 3F 94    MVI   [__r5],A
    3031: 51 98    MOV   A,[__r1]
    3033: 3F 94    MVI   [__r5],A
    3035: 51 97    MOV   A,[__r2]
    3037: 3F 94    MVI   [__r5],A
    3039: 51 96    MOV   A,[__r3]
    303B: 3F 94    MVI   [__r5],A
(0317) 			temp = data_imm[q];
    303D: 52 01    MOV   A,[X+1]
    303F: 53 98    MOV   [__r1],A
    3041: 52 00    MOV   A,[X+0]
    3043: 53 99    MOV   [__r0],A
    3045: 65 98    ASL   [__r1]
    3047: 6B 99    RLC   [__r0]
    3049: 65 98    ASL   [__r1]
    304B: 6B 99    RLC   [__r0]
    304D: 06 98 00 ADD   [__r1],0x0
    3050: 0E 99 04 ADC   [__r0],0x4
    3053: 51 99    MOV   A,[__r0]
    3055: 60 D4    MOV   REG[0xD4],A
    3057: 3E 98    MVI   A,[__r1]
    3059: 54 08    MOV   [X+8],A
    305B: 3E 98    MVI   A,[__r1]
    305D: 54 09    MOV   [X+9],A
    305F: 3E 98    MVI   A,[__r1]
    3061: 54 0A    MOV   [X+10],A
    3063: 3E 98    MVI   A,[__r1]
    3065: 54 0B    MOV   [X+11],A
(0318) 		}
(0319) 		
(0320) 		if(q>63)
    3067: 50 3F    MOV   A,0x3F
    3069: 13 01    SUB   A,[X+1]
    306B: 52 00    MOV   A,[X+0]
    306D: 31 80    XOR   A,0x80
    306F: 62 D0 00 MOV   REG[0xD0],0x0
    3072: 53 8D    MOV   [__rX],A
    3074: 50 80    MOV   A,0x80
    3076: 1A 8D    SBB   A,[__rX]
    3078: D1 0F    JNC   0x3188
(0321) 		{
(0322) 		if(q<128)
    307A: 52 01    MOV   A,[X+1]
    307C: 11 80    SUB   A,0x80
    307E: 52 00    MOV   A,[X+0]
    3080: 31 80    XOR   A,0x80
    3082: 19 80    SBB   A,0x80
    3084: D1 03    JNC   0x3188
(0323) 		{
(0324) 			mod[q-64]=mod[q-64]+cos(data_re[n]-ph);
    3086: 62 D0 00 MOV   REG[0xD0],0x0
    3089: 52 03    MOV   A,[X+3]
    308B: 53 98    MOV   [__r1],A
    308D: 52 02    MOV   A,[X+2]
    308F: 53 99    MOV   [__r0],A
    3091: 65 98    ASL   [__r1]
    3093: 6B 99    RLC   [__r0]
    3095: 65 98    ASL   [__r1]
    3097: 6B 99    RLC   [__r0]
    3099: 06 98 00 ADD   [__r1],0x0
    309C: 0E 99 03 ADC   [__r0],0x3
    309F: 51 99    MOV   A,[__r0]
    30A1: 60 D4    MOV   REG[0xD4],A
    30A3: 3E 98    MVI   A,[__r1]
    30A5: 53 95    MOV   [__r4],A
    30A7: 3E 98    MVI   A,[__r1]
    30A9: 53 94    MOV   [__r5],A
    30AB: 3E 98    MVI   A,[__r1]
    30AD: 53 93    MOV   [__r6],A
    30AF: 3E 98    MVI   A,[__r1]
    30B1: 53 92    MOV   [__r7],A
    30B3: 52 04    MOV   A,[X+4]
    30B5: 08       PUSH  A
    30B6: 52 05    MOV   A,[X+5]
    30B8: 08       PUSH  A
    30B9: 52 06    MOV   A,[X+6]
    30BB: 08       PUSH  A
    30BC: 52 07    MOV   A,[X+7]
    30BE: 08       PUSH  A
    30BF: 51 95    MOV   A,[__r4]
    30C1: 08       PUSH  A
    30C2: 51 94    MOV   A,[__r5]
    30C4: 08       PUSH  A
    30C5: 51 93    MOV   A,[__r6]
    30C7: 08       PUSH  A
    30C8: 51 92    MOV   A,[__r7]
    30CA: 08       PUSH  A
    30CB: 7C 3C 75 LCALL 0x3C75
    30CE: 18       POP   A
    30CF: 53 96    MOV   [__r3],A
    30D1: 18       POP   A
    30D2: 53 97    MOV   [__r2],A
    30D4: 18       POP   A
    30D5: 53 98    MOV   [__r1],A
    30D7: 18       POP   A
    30D8: 38 FC    ADD   SP,0xFC
    30DA: 08       PUSH  A
    30DB: 51 98    MOV   A,[__r1]
    30DD: 08       PUSH  A
    30DE: 51 97    MOV   A,[__r2]
    30E0: 08       PUSH  A
    30E1: 51 96    MOV   A,[__r3]
    30E3: 08       PUSH  A
    30E4: 7C 49 E7 LCALL _cosf
    30E7: 38 FC    ADD   SP,0xFC
    30E9: 62 D0 00 MOV   REG[0xD0],0x0
    30EC: 52 01    MOV   A,[X+1]
    30EE: 11 40    SUB   A,0x40
    30F0: 53 94    MOV   [__r5],A
    30F2: 52 00    MOV   A,[X+0]
    30F4: 19 00    SBB   A,0x0
    30F6: 53 95    MOV   [__r4],A
    30F8: 65 94    ASL   [__r5]
    30FA: 6B 95    RLC   [__r4]
    30FC: 65 94    ASL   [__r5]
    30FE: 6B 95    RLC   [__r4]
    3100: 06 94 00 ADD   [__r5],0x0
    3103: 0E 95 02 ADC   [__r4],0x2
    3106: 51 95    MOV   A,[__r4]
    3108: 60 D4    MOV   REG[0xD4],A
    310A: 3E 94    MVI   A,[__r5]
    310C: 53 91    MOV   [__r8],A
    310E: 3E 94    MVI   A,[__r5]
    3110: 53 90    MOV   [__r9],A
    3112: 3E 94    MVI   A,[__r5]
    3114: 53 8F    MOV   [__r10],A
    3116: 3E 94    MVI   A,[__r5]
    3118: 16 94 04 SUB   [__r5],0x4
    311B: 53 8E    MOV   [__r11],A
    311D: 51 99    MOV   A,[__r0]
    311F: 08       PUSH  A
    3120: 51 98    MOV   A,[__r1]
    3122: 08       PUSH  A
    3123: 51 97    MOV   A,[__r2]
    3125: 08       PUSH  A
    3126: 51 96    MOV   A,[__r3]
    3128: 08       PUSH  A
    3129: 51 91    MOV   A,[__r8]
    312B: 08       PUSH  A
    312C: 51 90    MOV   A,[__r9]
    312E: 08       PUSH  A
    312F: 51 8F    MOV   A,[__r10]
    3131: 08       PUSH  A
    3132: 51 8E    MOV   A,[__r11]
    3134: 08       PUSH  A
    3135: 7C 39 0B LCALL 0x390B
    3138: 18       POP   A
    3139: 53 96    MOV   [__r3],A
    313B: 18       POP   A
    313C: 53 97    MOV   [__r2],A
    313E: 18       POP   A
    313F: 53 98    MOV   [__r1],A
    3141: 18       POP   A
    3142: 53 99    MOV   [__r0],A
    3144: 38 FC    ADD   SP,0xFC
    3146: 51 95    MOV   A,[__r4]
    3148: 60 D5    MOV   REG[0xD5],A
    314A: 51 99    MOV   A,[__r0]
    314C: 3F 94    MVI   [__r5],A
    314E: 51 98    MOV   A,[__r1]
    3150: 3F 94    MVI   [__r5],A
    3152: 51 97    MOV   A,[__r2]
    3154: 3F 94    MVI   [__r5],A
    3156: 51 96    MOV   A,[__r3]
    3158: 3F 94    MVI   [__r5],A
(0325) 			temp = mod[q-64];
    315A: 52 01    MOV   A,[X+1]
    315C: 11 40    SUB   A,0x40
    315E: 53 98    MOV   [__r1],A
    3160: 52 00    MOV   A,[X+0]
    3162: 19 00    SBB   A,0x0
    3164: 53 99    MOV   [__r0],A
    3166: 65 98    ASL   [__r1]
    3168: 6B 99    RLC   [__r0]
    316A: 65 98    ASL   [__r1]
    316C: 6B 99    RLC   [__r0]
    316E: 06 98 00 ADD   [__r1],0x0
    3171: 0E 99 02 ADC   [__r0],0x2
    3174: 51 99    MOV   A,[__r0]
    3176: 60 D4    MOV   REG[0xD4],A
    3178: 3E 98    MVI   A,[__r1]
    317A: 54 08    MOV   [X+8],A
    317C: 3E 98    MVI   A,[__r1]
    317E: 54 09    MOV   [X+9],A
    3180: 3E 98    MVI   A,[__r1]
    3182: 54 0A    MOV   [X+10],A
    3184: 3E 98    MVI   A,[__r1]
    3186: 54 0B    MOV   [X+11],A
(0326) 		}
(0327) 		}
(0328) 		
(0329) 		if(q>127)
    3188: 50 7F    MOV   A,0x7F
    318A: 13 01    SUB   A,[X+1]
    318C: 52 00    MOV   A,[X+0]
    318E: 31 80    XOR   A,0x80
    3190: 62 D0 00 MOV   REG[0xD0],0x0
    3193: 53 8D    MOV   [__rX],A
    3195: 50 80    MOV   A,0x80
    3197: 1A 8D    SBB   A,[__rX]
    3199: D1 03    JNC   0x329D
(0330) 		{
(0331) 			data_re1[q-128]=data_re1[q-128]+cos(data_re[n]-ph);
    319B: 62 D0 00 MOV   REG[0xD0],0x0
    319E: 52 03    MOV   A,[X+3]
    31A0: 53 98    MOV   [__r1],A
    31A2: 52 02    MOV   A,[X+2]
    31A4: 53 99    MOV   [__r0],A
    31A6: 65 98    ASL   [__r1]
    31A8: 6B 99    RLC   [__r0]
    31AA: 65 98    ASL   [__r1]
    31AC: 6B 99    RLC   [__r0]
    31AE: 06 98 00 ADD   [__r1],0x0
    31B1: 0E 99 03 ADC   [__r0],0x3
    31B4: 51 99    MOV   A,[__r0]
    31B6: 60 D4    MOV   REG[0xD4],A
    31B8: 3E 98    MVI   A,[__r1]
    31BA: 53 95    MOV   [__r4],A
    31BC: 3E 98    MVI   A,[__r1]
    31BE: 53 94    MOV   [__r5],A
    31C0: 3E 98    MVI   A,[__r1]
    31C2: 53 93    MOV   [__r6],A
    31C4: 3E 98    MVI   A,[__r1]
    31C6: 53 92    MOV   [__r7],A
    31C8: 52 04    MOV   A,[X+4]
    31CA: 08       PUSH  A
    31CB: 52 05    MOV   A,[X+5]
    31CD: 08       PUSH  A
    31CE: 52 06    MOV   A,[X+6]
    31D0: 08       PUSH  A
    31D1: 52 07    MOV   A,[X+7]
    31D3: 08       PUSH  A
    31D4: 51 95    MOV   A,[__r4]
    31D6: 08       PUSH  A
    31D7: 51 94    MOV   A,[__r5]
    31D9: 08       PUSH  A
    31DA: 51 93    MOV   A,[__r6]
    31DC: 08       PUSH  A
    31DD: 51 92    MOV   A,[__r7]
    31DF: 08       PUSH  A
    31E0: 7C 3C 75 LCALL 0x3C75
    31E3: 18       POP   A
    31E4: 53 96    MOV   [__r3],A
    31E6: 18       POP   A
    31E7: 53 97    MOV   [__r2],A
    31E9: 18       POP   A
    31EA: 53 98    MOV   [__r1],A
    31EC: 18       POP   A
    31ED: 38 FC    ADD   SP,0xFC
    31EF: 08       PUSH  A
    31F0: 51 98    MOV   A,[__r1]
    31F2: 08       PUSH  A
    31F3: 51 97    MOV   A,[__r2]
    31F5: 08       PUSH  A
    31F6: 51 96    MOV   A,[__r3]
    31F8: 08       PUSH  A
    31F9: 7C 49 E7 LCALL _cosf
    31FC: 38 FC    ADD   SP,0xFC
    31FE: 62 D0 00 MOV   REG[0xD0],0x0
    3201: 52 01    MOV   A,[X+1]
    3203: 11 80    SUB   A,0x80
    3205: 53 94    MOV   [__r5],A
    3207: 52 00    MOV   A,[X+0]
    3209: 19 00    SBB   A,0x0
    320B: 53 95    MOV   [__r4],A
    320D: 65 94    ASL   [__r5]
    320F: 6B 95    RLC   [__r4]
    3211: 65 94    ASL   [__r5]
    3213: 6B 95    RLC   [__r4]
    3215: 06 94 00 ADD   [__r5],0x0
    3218: 0E 95 01 ADC   [__r4],0x1
    321B: 51 95    MOV   A,[__r4]
    321D: 60 D4    MOV   REG[0xD4],A
    321F: 3E 94    MVI   A,[__r5]
    3221: 53 91    MOV   [__r8],A
    3223: 3E 94    MVI   A,[__r5]
    3225: 53 90    MOV   [__r9],A
    3227: 3E 94    MVI   A,[__r5]
    3229: 53 8F    MOV   [__r10],A
    322B: 3E 94    MVI   A,[__r5]
    322D: 16 94 04 SUB   [__r5],0x4
    3230: 53 8E    MOV   [__r11],A
    3232: 51 99    MOV   A,[__r0]
    3234: 08       PUSH  A
    3235: 51 98    MOV   A,[__r1]
    3237: 08       PUSH  A
    3238: 51 97    MOV   A,[__r2]
    323A: 08       PUSH  A
    323B: 51 96    MOV   A,[__r3]
    323D: 08       PUSH  A
    323E: 51 91    MOV   A,[__r8]
    3240: 08       PUSH  A
    3241: 51 90    MOV   A,[__r9]
    3243: 08       PUSH  A
    3244: 51 8F    MOV   A,[__r10]
    3246: 08       PUSH  A
    3247: 51 8E    MOV   A,[__r11]
    3249: 08       PUSH  A
    324A: 7C 39 0B LCALL 0x390B
    324D: 18       POP   A
    324E: 53 96    MOV   [__r3],A
    3250: 18       POP   A
    3251: 53 97    MOV   [__r2],A
    3253: 18       POP   A
    3254: 53 98    MOV   [__r1],A
    3256: 18       POP   A
    3257: 53 99    MOV   [__r0],A
    3259: 38 FC    ADD   SP,0xFC
    325B: 51 95    MOV   A,[__r4]
    325D: 60 D5    MOV   REG[0xD5],A
    325F: 51 99    MOV   A,[__r0]
    3261: 3F 94    MVI   [__r5],A
    3263: 51 98    MOV   A,[__r1]
    3265: 3F 94    MVI   [__r5],A
    3267: 51 97    MOV   A,[__r2]
    3269: 3F 94    MVI   [__r5],A
    326B: 51 96    MOV   A,[__r3]
    326D: 3F 94    MVI   [__r5],A
(0332) 			temp = data_re1[q-128];
    326F: 52 01    MOV   A,[X+1]
    3271: 11 80    SUB   A,0x80
    3273: 53 98    MOV   [__r1],A
    3275: 52 00    MOV   A,[X+0]
    3277: 19 00    SBB   A,0x0
    3279: 53 99    MOV   [__r0],A
    327B: 65 98    ASL   [__r1]
    327D: 6B 99    RLC   [__r0]
    327F: 65 98    ASL   [__r1]
    3281: 6B 99    RLC   [__r0]
    3283: 06 98 00 ADD   [__r1],0x0
    3286: 0E 99 01 ADC   [__r0],0x1
    3289: 51 99    MOV   A,[__r0]
    328B: 60 D4    MOV   REG[0xD4],A
    328D: 3E 98    MVI   A,[__r1]
    328F: 54 08    MOV   [X+8],A
    3291: 3E 98    MVI   A,[__r1]
    3293: 54 09    MOV   [X+9],A
    3295: 3E 98    MVI   A,[__r1]
    3297: 54 0A    MOV   [X+10],A
    3299: 3E 98    MVI   A,[__r1]
    329B: 54 0B    MOV   [X+11],A
(0333) 		}
(0334) 		LCD_Position(1,8);
    329D: 10       PUSH  X
    329E: 57 08    MOV   X,0x8
    32A0: 50 01    MOV   A,0x1
    32A2: 7C 09 F2 LCALL _LCD_Position
    32A5: 20       POP   X
(0335) 		LCD_PrHexInt(n);
    32A6: 10       PUSH  X
    32A7: 52 02    MOV   A,[X+2]
    32A9: 08       PUSH  A
    32AA: 52 03    MOV   A,[X+3]
    32AC: 20       POP   X
    32AD: 7C 08 A2 LCALL _LCD_PrHexInt
    32B0: 20       POP   X
(0336) 		
(0337) 	}
    32B1: 77 03    INC   [X+3]
    32B3: 0F 02 00 ADC   [X+2],0x0
    32B6: 52 03    MOV   A,[X+3]
    32B8: 11 1F    SUB   A,0x1F
    32BA: 52 02    MOV   A,[X+2]
    32BC: 31 80    XOR   A,0x80
    32BE: 19 80    SBB   A,0x80
    32C0: CC 3C    JC    0x2EFD
(0338) 	
(0339) 	if(temp>max)
    32C2: 52 12    MOV   A,[X+18]
    32C4: 08       PUSH  A
    32C5: 52 13    MOV   A,[X+19]
    32C7: 08       PUSH  A
    32C8: 52 14    MOV   A,[X+20]
    32CA: 08       PUSH  A
    32CB: 52 15    MOV   A,[X+21]
    32CD: 08       PUSH  A
    32CE: 52 08    MOV   A,[X+8]
    32D0: 08       PUSH  A
    32D1: 52 09    MOV   A,[X+9]
    32D3: 08       PUSH  A
    32D4: 52 0A    MOV   A,[X+10]
    32D6: 08       PUSH  A
    32D7: 52 0B    MOV   A,[X+11]
    32D9: 08       PUSH  A
    32DA: 62 D0 00 MOV   REG[0xD0],0x0
    32DD: 7C 3A 0B LCALL 0x3A0B
    32E0: 38 F8    ADD   SP,0xF8
    32E2: 39 00    CMP   A,0x0
    32E4: A0 4E    JZ    0x3333
    32E6: 39 01    CMP   A,0x1
    32E8: B0 4A    JNZ   0x3333
(0340) 	{
(0341) 		max=temp;
    32EA: 52 08    MOV   A,[X+8]
    32EC: 54 12    MOV   [X+18],A
    32EE: 52 09    MOV   A,[X+9]
    32F0: 54 13    MOV   [X+19],A
    32F2: 52 0A    MOV   A,[X+10]
    32F4: 54 14    MOV   [X+20],A
    32F6: 52 0B    MOV   A,[X+11]
    32F8: 54 15    MOV   [X+21],A
(0342) 		qmax=q;
    32FA: 52 01    MOV   A,[X+1]
    32FC: 54 19    MOV   [X+25],A
    32FE: 52 00    MOV   A,[X+0]
    3300: 54 18    MOV   [X+24],A
    3302: 48 18 80 TST   [X+24],0x80
    3305: A0 09    JZ    0x330F
    3307: 56 17 FF MOV   [X+23],0xFF
    330A: 56 16 FF MOV   [X+22],0xFF
    330D: 80 07    JMP   0x3315
    330F: 56 17 00 MOV   [X+23],0x0
    3312: 56 16 00 MOV   [X+22],0x0
    3315: 52 16    MOV   A,[X+22]
    3317: 08       PUSH  A
    3318: 52 17    MOV   A,[X+23]
    331A: 08       PUSH  A
    331B: 52 18    MOV   A,[X+24]
    331D: 08       PUSH  A
    331E: 52 19    MOV   A,[X+25]
    3320: 08       PUSH  A
    3321: 62 D0 00 MOV   REG[0xD0],0x0
    3324: 7C 3D 4F LCALL 0x3D4F
    3327: 18       POP   A
    3328: 54 19    MOV   [X+25],A
    332A: 18       POP   A
    332B: 54 18    MOV   [X+24],A
    332D: 18       POP   A
    332E: 54 17    MOV   [X+23],A
    3330: 18       POP   A
    3331: 54 16    MOV   [X+22],A
(0343) 	}
(0344) 	LCD_Position(1,0);
    3333: 10       PUSH  X
    3334: 57 00    MOV   X,0x0
    3336: 50 01    MOV   A,0x1
    3338: 7C 09 F2 LCALL _LCD_Position
    333B: 20       POP   X
(0345) 	LCD_PrHexInt(q);
    333C: 10       PUSH  X
    333D: 52 00    MOV   A,[X+0]
    333F: 08       PUSH  A
    3340: 52 01    MOV   A,[X+1]
    3342: 20       POP   X
    3343: 7C 08 A2 LCALL _LCD_PrHexInt
    3346: 20       POP   X
(0346) }
    3347: 77 01    INC   [X+1]
    3349: 0F 00 00 ADC   [X+0],0x0
    334C: 52 01    MOV   A,[X+1]
    334E: 11 A2    SUB   A,0xA2
    3350: 52 00    MOV   A,[X+0]
    3352: 31 80    XOR   A,0x80
    3354: 19 80    SBB   A,0x80
    3356: CB 74    JC    0x2ECB
(0347) 
(0348) qmax=qmax-81;
    3358: 50 42    MOV   A,0x42
    335A: 08       PUSH  A
    335B: 50 A2    MOV   A,0xA2
    335D: 08       PUSH  A
    335E: 50 00    MOV   A,0x0
    3360: 08       PUSH  A
    3361: 08       PUSH  A
    3362: 52 16    MOV   A,[X+22]
    3364: 08       PUSH  A
    3365: 52 17    MOV   A,[X+23]
    3367: 08       PUSH  A
    3368: 52 18    MOV   A,[X+24]
    336A: 08       PUSH  A
    336B: 52 19    MOV   A,[X+25]
    336D: 08       PUSH  A
    336E: 62 D0 00 MOV   REG[0xD0],0x0
    3371: 7C 3C 75 LCALL 0x3C75
    3374: 18       POP   A
    3375: 54 19    MOV   [X+25],A
    3377: 18       POP   A
    3378: 54 18    MOV   [X+24],A
    337A: 18       POP   A
    337B: 54 17    MOV   [X+23],A
    337D: 18       POP   A
    337E: 54 16    MOV   [X+22],A
    3380: 38 FC    ADD   SP,0xFC
(0349) qmax=qmax/10;
    3382: 50 41    MOV   A,0x41
    3384: 08       PUSH  A
    3385: 50 20    MOV   A,0x20
    3387: 08       PUSH  A
    3388: 50 00    MOV   A,0x0
    338A: 08       PUSH  A
    338B: 08       PUSH  A
    338C: 52 16    MOV   A,[X+22]
    338E: 08       PUSH  A
    338F: 52 17    MOV   A,[X+23]
    3391: 08       PUSH  A
    3392: 52 18    MOV   A,[X+24]
    3394: 08       PUSH  A
    3395: 52 19    MOV   A,[X+25]
    3397: 08       PUSH  A
    3398: 7C 3A 68 LCALL 0x3A68
    339B: 18       POP   A
    339C: 54 19    MOV   [X+25],A
    339E: 18       POP   A
    339F: 54 18    MOV   [X+24],A
    33A1: 18       POP   A
    33A2: 54 17    MOV   [X+23],A
    33A4: 18       POP   A
    33A5: 54 16    MOV   [X+22],A
    33A7: 38 FC    ADD   SP,0xFC
(0350) value = qmax*0.12937823;			//345) / (0.20*13333);
    33A9: 52 16    MOV   A,[X+22]
    33AB: 08       PUSH  A
    33AC: 52 17    MOV   A,[X+23]
    33AE: 08       PUSH  A
    33AF: 52 18    MOV   A,[X+24]
    33B1: 08       PUSH  A
    33B2: 52 19    MOV   A,[X+25]
    33B4: 08       PUSH  A
    33B5: 50 3E    MOV   A,0x3E
    33B7: 08       PUSH  A
    33B8: 50 04    MOV   A,0x4
    33BA: 08       PUSH  A
    33BB: 50 7B    MOV   A,0x7B
    33BD: 08       PUSH  A
    33BE: 50 BA    MOV   A,0xBA
    33C0: 08       PUSH  A
    33C1: 7C 3B 4B LCALL 0x3B4B
    33C4: 18       POP   A
    33C5: 54 23    MOV   [X+35],A
    33C7: 18       POP   A
    33C8: 54 22    MOV   [X+34],A
    33CA: 18       POP   A
    33CB: 54 21    MOV   [X+33],A
    33CD: 18       POP   A
    33CE: 54 20    MOV   [X+32],A
    33D0: 38 FC    ADD   SP,0xFC
(0351) if (value > 1)
    33D2: 50 3F    MOV   A,0x3F
    33D4: 08       PUSH  A
    33D5: 50 80    MOV   A,0x80
    33D7: 08       PUSH  A
    33D8: 50 00    MOV   A,0x0
    33DA: 08       PUSH  A
    33DB: 08       PUSH  A
    33DC: 52 20    MOV   A,[X+32]
    33DE: 08       PUSH  A
    33DF: 52 21    MOV   A,[X+33]
    33E1: 08       PUSH  A
    33E2: 52 22    MOV   A,[X+34]
    33E4: 08       PUSH  A
    33E5: 52 23    MOV   A,[X+35]
    33E7: 08       PUSH  A
    33E8: 7C 3A 0B LCALL 0x3A0B
    33EB: 38 F8    ADD   SP,0xF8
    33ED: 39 00    CMP   A,0x0
    33EF: A0 11    JZ    0x3401
    33F1: 39 01    CMP   A,0x1
    33F3: B0 0D    JNZ   0x3401
(0352)     value = 1;
    33F5: 56 20 3F MOV   [X+32],0x3F
    33F8: 56 21 80 MOV   [X+33],0x80
    33FB: 56 22 00 MOV   [X+34],0x0
    33FE: 56 23 00 MOV   [X+35],0x0
(0353) if (value < -1)
    3401: 50 BF    MOV   A,0xBF
    3403: 08       PUSH  A
    3404: 50 80    MOV   A,0x80
    3406: 08       PUSH  A
    3407: 50 00    MOV   A,0x0
    3409: 08       PUSH  A
    340A: 08       PUSH  A
    340B: 52 20    MOV   A,[X+32]
    340D: 08       PUSH  A
    340E: 52 21    MOV   A,[X+33]
    3410: 08       PUSH  A
    3411: 52 22    MOV   A,[X+34]
    3413: 08       PUSH  A
    3414: 52 23    MOV   A,[X+35]
    3416: 08       PUSH  A
    3417: 62 D0 00 MOV   REG[0xD0],0x0
    341A: 7C 3A 0B LCALL 0x3A0B
    341D: 38 F8    ADD   SP,0xF8
    341F: 39 00    CMP   A,0x0
    3421: A0 11    JZ    0x3433
    3423: 39 01    CMP   A,0x1
    3425: A0 0D    JZ    0x3433
(0354)     value = -1;
    3427: 56 20 BF MOV   [X+32],0xBF
    342A: 56 21 80 MOV   [X+33],0x80
    342D: 56 22 00 MOV   [X+34],0x0
    3430: 56 23 00 MOV   [X+35],0x0
(0355) UART_CPutString("\n\rBefore Sine\n\r");
    3433: 10       PUSH  X
    3434: 50 01    MOV   A,0x1
    3436: 08       PUSH  A
    3437: 50 BD    MOV   A,0xBD
    3439: 5C       MOV   X,A
    343A: 18       POP   A
    343B: 7C 05 D8 LCALL _UART_CPutString
    343E: 20       POP   X
(0356) doa = asin(value); 
    343F: 52 20    MOV   A,[X+32]
    3441: 08       PUSH  A
    3442: 52 21    MOV   A,[X+33]
    3444: 08       PUSH  A
    3445: 52 22    MOV   A,[X+34]
    3447: 08       PUSH  A
    3448: 52 23    MOV   A,[X+35]
    344A: 08       PUSH  A
    344B: 7C 47 7C LCALL _asinf
    344E: 62 D0 00 MOV   REG[0xD0],0x0
    3451: 51 99    MOV   A,[__r0]
    3453: 54 1A    MOV   [X+26],A
    3455: 51 98    MOV   A,[__r1]
    3457: 54 1B    MOV   [X+27],A
    3459: 51 97    MOV   A,[__r2]
    345B: 54 1C    MOV   [X+28],A
    345D: 51 96    MOV   A,[__r3]
    345F: 54 1D    MOV   [X+29],A
(0357) temp1 = ftoa(doa, &Status);
    3461: 5A 98    MOV   [__r1],X
    3463: 06 98 24 ADD   [__r1],0x24
    3466: 50 07    MOV   A,0x7
    3468: 08       PUSH  A
    3469: 51 98    MOV   A,[__r1]
    346B: 08       PUSH  A
    346C: 52 1A    MOV   A,[X+26]
    346E: 08       PUSH  A
    346F: 52 1B    MOV   A,[X+27]
    3471: 08       PUSH  A
    3472: 52 1C    MOV   A,[X+28]
    3474: 08       PUSH  A
    3475: 52 1D    MOV   A,[X+29]
    3477: 08       PUSH  A
    3478: 7C 40 71 LCALL _ftoa
    347B: 38 F6    ADD   SP,0xF6
    347D: 62 D0 00 MOV   REG[0xD0],0x0
    3480: 51 98    MOV   A,[__r1]
    3482: 54 1F    MOV   [X+31],A
    3484: 51 99    MOV   A,[__r0]
    3486: 54 1E    MOV   [X+30],A
(0358) UART_PutString(temp1);
    3488: 10       PUSH  X
    3489: 52 1E    MOV   A,[X+30]
    348B: 08       PUSH  A
    348C: 52 1F    MOV   A,[X+31]
    348E: 5C       MOV   X,A
    348F: 18       POP   A
    3490: 7C 05 72 LCALL _UART_PutString
    3493: 20       POP   X
(0359) doa = doa*57.29577;
    3494: 52 1A    MOV   A,[X+26]
    3496: 08       PUSH  A
    3497: 52 1B    MOV   A,[X+27]
    3499: 08       PUSH  A
    349A: 52 1C    MOV   A,[X+28]
    349C: 08       PUSH  A
    349D: 52 1D    MOV   A,[X+29]
    349F: 08       PUSH  A
    34A0: 50 42    MOV   A,0x42
    34A2: 08       PUSH  A
    34A3: 50 65    MOV   A,0x65
    34A5: 08       PUSH  A
    34A6: 50 2E    MOV   A,0x2E
    34A8: 08       PUSH  A
    34A9: 50 DE    MOV   A,0xDE
    34AB: 08       PUSH  A
    34AC: 62 D0 00 MOV   REG[0xD0],0x0
    34AF: 7C 3B 4B LCALL 0x3B4B
    34B2: 18       POP   A
    34B3: 54 1D    MOV   [X+29],A
    34B5: 18       POP   A
    34B6: 54 1C    MOV   [X+28],A
    34B8: 18       POP   A
    34B9: 54 1B    MOV   [X+27],A
    34BB: 18       POP   A
    34BC: 54 1A    MOV   [X+26],A
    34BE: 38 FC    ADD   SP,0xFC
(0360) UART_CPutString("\n\rAfter Multiplication\n\r");
    34C0: 10       PUSH  X
    34C1: 50 01    MOV   A,0x1
    34C3: 08       PUSH  A
    34C4: 50 A4    MOV   A,0xA4
    34C6: 5C       MOV   X,A
    34C7: 18       POP   A
    34C8: 7C 05 D8 LCALL _UART_CPutString
    34CB: 20       POP   X
(0361) temp1 = ftoa(doa, &Status);
    34CC: 62 D0 00 MOV   REG[0xD0],0x0
    34CF: 5A 98    MOV   [__r1],X
    34D1: 06 98 24 ADD   [__r1],0x24
    34D4: 50 07    MOV   A,0x7
    34D6: 08       PUSH  A
    34D7: 51 98    MOV   A,[__r1]
    34D9: 08       PUSH  A
    34DA: 52 1A    MOV   A,[X+26]
    34DC: 08       PUSH  A
    34DD: 52 1B    MOV   A,[X+27]
    34DF: 08       PUSH  A
    34E0: 52 1C    MOV   A,[X+28]
    34E2: 08       PUSH  A
    34E3: 52 1D    MOV   A,[X+29]
    34E5: 08       PUSH  A
    34E6: 7C 40 71 LCALL _ftoa
    34E9: 38 FA    ADD   SP,0xFA
    34EB: 62 D0 00 MOV   REG[0xD0],0x0
    34EE: 51 98    MOV   A,[__r1]
    34F0: 54 1F    MOV   [X+31],A
    34F2: 51 99    MOV   A,[__r0]
    34F4: 54 1E    MOV   [X+30],A
(0362) UART_PutString(temp1);
    34F6: 10       PUSH  X
    34F7: 52 1E    MOV   A,[X+30]
    34F9: 08       PUSH  A
    34FA: 52 1F    MOV   A,[X+31]
    34FC: 5C       MOV   X,A
    34FD: 18       POP   A
    34FE: 7C 05 72 LCALL _UART_PutString
    3501: 20       POP   X
(0363) //doa = doa*100;
(0364) LCD_Clear();
    3502: 7C 20 B1 LCALL _LCD_Clear
(0365) UART_CPutString("\n\r");
    3505: 10       PUSH  X
    3506: 50 01    MOV   A,0x1
    3508: 08       PUSH  A
    3509: 50 ED    MOV   A,0xED
    350B: 5C       MOV   X,A
    350C: 18       POP   A
    350D: 7C 05 D8 LCALL _UART_CPutString
    3510: 20       POP   X
(0366) if(doa<0)
    3511: 50 00    MOV   A,0x0
    3513: 08       PUSH  A
    3514: 08       PUSH  A
    3515: 08       PUSH  A
    3516: 08       PUSH  A
    3517: 52 1A    MOV   A,[X+26]
    3519: 08       PUSH  A
    351A: 52 1B    MOV   A,[X+27]
    351C: 08       PUSH  A
    351D: 52 1C    MOV   A,[X+28]
    351F: 08       PUSH  A
    3520: 52 1D    MOV   A,[X+29]
    3522: 08       PUSH  A
    3523: 62 D0 00 MOV   REG[0xD0],0x0
    3526: 7C 3A 0B LCALL 0x3A0B
    3529: 38 F8    ADD   SP,0xF8
    352B: 39 00    CMP   A,0x0
    352D: A0 9F    JZ    0x35CD
    352F: 39 01    CMP   A,0x1
    3531: A0 9B    JZ    0x35CD
(0367) {
(0368) doa=-1*doa;
    3533: 52 1A    MOV   A,[X+26]
    3535: 08       PUSH  A
    3536: 52 1B    MOV   A,[X+27]
    3538: 08       PUSH  A
    3539: 52 1C    MOV   A,[X+28]
    353B: 08       PUSH  A
    353C: 52 1D    MOV   A,[X+29]
    353E: 08       PUSH  A
    353F: 50 BF    MOV   A,0xBF
    3541: 08       PUSH  A
    3542: 50 80    MOV   A,0x80
    3544: 08       PUSH  A
    3545: 50 00    MOV   A,0x0
    3547: 08       PUSH  A
    3548: 08       PUSH  A
    3549: 7C 3B 4B LCALL 0x3B4B
    354C: 18       POP   A
    354D: 54 1D    MOV   [X+29],A
    354F: 18       POP   A
    3550: 54 1C    MOV   [X+28],A
    3552: 18       POP   A
    3553: 54 1B    MOV   [X+27],A
    3555: 18       POP   A
    3556: 54 1A    MOV   [X+26],A
    3558: 38 FC    ADD   SP,0xFC
(0369) LCD_Position(1,11);
    355A: 10       PUSH  X
    355B: 57 0B    MOV   X,0xB
    355D: 50 01    MOV   A,0x1
    355F: 7C 09 F2 LCALL _LCD_Position
(0370) LCD_PrCString("n");
    3562: 50 01    MOV   A,0x1
    3564: 08       PUSH  A
    3565: 50 A2    MOV   A,0xA2
    3567: 5C       MOV   X,A
    3568: 18       POP   A
    3569: 7C 08 6D LCALL _LCD_PrCString
    356C: 20       POP   X
(0371) temp1 = ftoa(doa, &Status);
    356D: 62 D0 00 MOV   REG[0xD0],0x0
    3570: 5A 98    MOV   [__r1],X
    3572: 06 98 24 ADD   [__r1],0x24
    3575: 50 07    MOV   A,0x7
    3577: 08       PUSH  A
    3578: 51 98    MOV   A,[__r1]
    357A: 08       PUSH  A
    357B: 52 1A    MOV   A,[X+26]
    357D: 08       PUSH  A
    357E: 52 1B    MOV   A,[X+27]
    3580: 08       PUSH  A
    3581: 52 1C    MOV   A,[X+28]
    3583: 08       PUSH  A
    3584: 52 1D    MOV   A,[X+29]
    3586: 08       PUSH  A
    3587: 7C 40 71 LCALL _ftoa
    358A: 38 FA    ADD   SP,0xFA
    358C: 62 D0 00 MOV   REG[0xD0],0x0
    358F: 51 98    MOV   A,[__r1]
    3591: 54 1F    MOV   [X+31],A
    3593: 51 99    MOV   A,[__r0]
    3595: 54 1E    MOV   [X+30],A
(0372) UART_PutString(temp1);
    3597: 10       PUSH  X
    3598: 52 1E    MOV   A,[X+30]
    359A: 08       PUSH  A
    359B: 52 1F    MOV   A,[X+31]
    359D: 5C       MOV   X,A
    359E: 18       POP   A
    359F: 7C 05 72 LCALL _UART_PutString
(0373) LCD_Position(1,12);
    35A2: 57 0C    MOV   X,0xC
    35A4: 50 01    MOV   A,0x1
    35A6: 7C 09 F2 LCALL _LCD_Position
    35A9: 20       POP   X
(0374) LCD_PrHexInt(doa);
    35AA: 62 D0 00 MOV   REG[0xD0],0x0
    35AD: 52 1A    MOV   A,[X+26]
    35AF: 08       PUSH  A
    35B0: 52 1B    MOV   A,[X+27]
    35B2: 08       PUSH  A
    35B3: 52 1C    MOV   A,[X+28]
    35B5: 08       PUSH  A
    35B6: 52 1D    MOV   A,[X+29]
    35B8: 08       PUSH  A
    35B9: 7C 37 FA LCALL 0x37FA
    35BC: 18       POP   A
    35BD: 53 98    MOV   [__r1],A
    35BF: 18       POP   A
    35C0: 38 FE    ADD   SP,0xFE
    35C2: 10       PUSH  X
    35C3: 08       PUSH  A
    35C4: 51 98    MOV   A,[__r1]
    35C6: 20       POP   X
    35C7: 7C 08 A2 LCALL _LCD_PrHexInt
    35CA: 20       POP   X
(0375) }
    35CB: 80 72    JMP   0x363E
(0376) else
(0377) {
(0378) LCD_Position(1,11);
    35CD: 10       PUSH  X
    35CE: 57 0B    MOV   X,0xB
    35D0: 50 01    MOV   A,0x1
    35D2: 7C 09 F2 LCALL _LCD_Position
(0379) LCD_PrCString("p");
    35D5: 50 01    MOV   A,0x1
    35D7: 08       PUSH  A
    35D8: 50 A0    MOV   A,0xA0
    35DA: 5C       MOV   X,A
    35DB: 18       POP   A
    35DC: 7C 08 6D LCALL _LCD_PrCString
    35DF: 20       POP   X
(0380) temp1 = ftoa(doa, &Status);
    35E0: 62 D0 00 MOV   REG[0xD0],0x0
    35E3: 5A 98    MOV   [__r1],X
    35E5: 06 98 24 ADD   [__r1],0x24
    35E8: 50 07    MOV   A,0x7
    35EA: 08       PUSH  A
    35EB: 51 98    MOV   A,[__r1]
    35ED: 08       PUSH  A
    35EE: 52 1A    MOV   A,[X+26]
    35F0: 08       PUSH  A
    35F1: 52 1B    MOV   A,[X+27]
    35F3: 08       PUSH  A
    35F4: 52 1C    MOV   A,[X+28]
    35F6: 08       PUSH  A
    35F7: 52 1D    MOV   A,[X+29]
    35F9: 08       PUSH  A
    35FA: 7C 40 71 LCALL _ftoa
    35FD: 38 FA    ADD   SP,0xFA
    35FF: 62 D0 00 MOV   REG[0xD0],0x0
    3602: 51 98    MOV   A,[__r1]
    3604: 54 1F    MOV   [X+31],A
    3606: 51 99    MOV   A,[__r0]
    3608: 54 1E    MOV   [X+30],A
(0381) UART_PutString(temp1);
    360A: 10       PUSH  X
    360B: 52 1E    MOV   A,[X+30]
    360D: 08       PUSH  A
    360E: 52 1F    MOV   A,[X+31]
    3610: 5C       MOV   X,A
    3611: 18       POP   A
    3612: 7C 05 72 LCALL _UART_PutString
(0382) LCD_Position(1,12);
    3615: 57 0C    MOV   X,0xC
    3617: 50 01    MOV   A,0x1
    3619: 7C 09 F2 LCALL _LCD_Position
    361C: 20       POP   X
(0383) LCD_PrHexInt(doa);
    361D: 62 D0 00 MOV   REG[0xD0],0x0
    3620: 52 1A    MOV   A,[X+26]
    3622: 08       PUSH  A
    3623: 52 1B    MOV   A,[X+27]
    3625: 08       PUSH  A
    3626: 52 1C    MOV   A,[X+28]
    3628: 08       PUSH  A
    3629: 52 1D    MOV   A,[X+29]
    362B: 08       PUSH  A
    362C: 7C 37 FA LCALL 0x37FA
    362F: 18       POP   A
    3630: 53 98    MOV   [__r1],A
    3632: 18       POP   A
    3633: 38 FE    ADD   SP,0xFE
    3635: 10       PUSH  X
    3636: 08       PUSH  A
    3637: 51 98    MOV   A,[__r1]
    3639: 20       POP   X
    363A: 7C 08 A2 LCALL _LCD_PrHexInt
    363D: 20       POP   X
(0384) }
    363E: 38 DA    ADD   SP,0xDA
(0385) 
(0386) }
(0387) 
(0388) 
(0389) 
(0390) 
(0391) 
(0392) 
(0393) 
(0394) 
(0395) 
(0396) 
(0397) 
(0398) 
(0399) 
(0400) 
(0401) 
(0402) 
(0403) 
(0404) 
(0405) 
(0406) 
(0407) 
(0408) 
(0409) 
(0410) 
(0411) 
(0412) 
(0413) 
(0414) 
(0415) 
(0416) 
(0417) 
(0418) 
    3640: 20       POP   X
    3641: 7F       RET   
_Timer_ISR:
    3642: 71 C0    OR    F,0xC0
    3644: 08       PUSH  A
    3645: 5D D0    MOV   A,REG[0xD0]
    3647: 08       PUSH  A
    3648: 62 D0 06 MOV   REG[0xD0],0x6
    364B: 76 89    INC   [i_msec+1]
    364D: 0E 88 00 ADC   [i_msec],0x0
    3650: 40       NOP   
    3651: 40       NOP   
    3652: 51 89    MOV   A,[i_msec+1]
    3654: 11 E8    SUB   A,0xE8
    3656: 51 88    MOV   A,[i_msec]
    3658: 19 03    SBB   A,0x3
    365A: C0 91    JC    0x36EC
    365C: 62 D0 06 MOV   REG[0xD0],0x6
    365F: 76 8B    INC   [i_sec+1]
    3661: 0E 8A 00 ADC   [i_sec],0x0
    3664: 62 D0 06 MOV   REG[0xD0],0x6
    3667: 55 89 00 MOV   [i_msec+1],0x0
    366A: 55 88 00 MOV   [i_msec],0x0
    366D: 62 D0 00 MOV   REG[0xD0],0x0
    3670: 3C E7 00 CMP   [mat_flag],0x0
    3673: B0 0E    JNZ   0x3682
    3675: 3C E8 01 CMP   [mat_flag+1],0x1
    3678: B0 09    JNZ   0x3682
    367A: 62 D0 06 MOV   REG[0xD0],0x6
    367D: 76 91    INC   [cnt_sec+1]
    367F: 0E 90 00 ADC   [cnt_sec],0x0
    3682: 62 D0 00 MOV   REG[0xD0],0x0
    3685: 3C CB 00 CMP   [dumflag],0x0
    3688: B0 0E    JNZ   0x3697
    368A: 3C CC 01 CMP   [dumflag+1],0x1
    368D: B0 09    JNZ   0x3697
    368F: 62 D0 06 MOV   REG[0xD0],0x6
    3692: 7A 99    DEC   [dumCount+1]
    3694: 1E 98 00 SBB   [dumCount],0x0
    3697: 62 D0 00 MOV   REG[0xD0],0x0
    369A: 3C C7 00 CMP   [temp_value],0x0
    369D: B0 0E    JNZ   0x36AC
    369F: 3C C8 01 CMP   [temp_value+1],0x1
    36A2: B0 09    JNZ   0x36AC
    36A4: 62 D0 00 MOV   REG[0xD0],0x0
    36A7: 76 C6    INC   [mode_check_count+1]
    36A9: 0E C5 00 ADC   [mode_check_count],0x0
    36AC: 62 D0 00 MOV   REG[0xD0],0x0
    36AF: 51 C6    MOV   A,[mode_check_count+1]
    36B1: 11 0A    SUB   A,0xA
    36B3: 51 C5    MOV   A,[mode_check_count]
    36B5: 19 00    SBB   A,0x0
    36B7: C0 0A    JC    0x36C2
    36B9: 62 D0 00 MOV   REG[0xD0],0x0
    36BC: 55 C6 00 MOV   [mode_check_count+1],0x0
    36BF: 55 C5 00 MOV   [mode_check_count],0x0
    36C2: 62 D0 00 MOV   REG[0xD0],0x0
    36C5: 3C E5 00 CMP   [downcountFlag],0x0
    36C8: B0 0E    JNZ   0x36D7
    36CA: 3C E6 01 CMP   [downcountFlag+1],0x1
    36CD: B0 09    JNZ   0x36D7
    36CF: 62 D0 06 MOV   REG[0xD0],0x6
    36D2: 7A 97    DEC   [downCount+1]
    36D4: 1E 96 00 SBB   [downCount],0x0
    36D7: 62 D0 06 MOV   REG[0xD0],0x6
    36DA: 3C 82 00 CMP   [dispflag],0x0
    36DD: B0 0E    JNZ   0x36EC
    36DF: 3C 83 01 CMP   [dispflag+1],0x1
    36E2: B0 09    JNZ   0x36EC
    36E4: 62 D0 06 MOV   REG[0xD0],0x6
    36E7: 7A 9B    DEC   [dispCount+1]
    36E9: 1E 9A 00 SBB   [dispCount],0x0
    36EC: 40       NOP   
    36ED: 40       NOP   
    36EE: 62 D0 06 MOV   REG[0xD0],0x6
    36F1: 51 8B    MOV   A,[i_sec+1]
    36F3: 11 3C    SUB   A,0x3C
    36F5: 51 8A    MOV   A,[i_sec]
    36F7: 19 00    SBB   A,0x0
    36F9: C0 12    JC    0x370C
    36FB: 62 D0 06 MOV   REG[0xD0],0x6
    36FE: 76 8D    INC   [i_min+1]
    3700: 0E 8C 00 ADC   [i_min],0x0
    3703: 62 D0 06 MOV   REG[0xD0],0x6
    3706: 55 8B 00 MOV   [i_sec+1],0x0
    3709: 55 8A 00 MOV   [i_sec],0x0
    370C: 62 D0 06 MOV   REG[0xD0],0x6
    370F: 51 91    MOV   A,[cnt_sec+1]
    3711: 11 3C    SUB   A,0x3C
    3713: 51 90    MOV   A,[cnt_sec]
    3715: 19 00    SBB   A,0x0
    3717: C0 12    JC    0x372A
    3719: 62 D0 06 MOV   REG[0xD0],0x6
    371C: 76 93    INC   [cnt_min+1]
    371E: 0E 92 00 ADC   [cnt_min],0x0
    3721: 62 D0 06 MOV   REG[0xD0],0x6
    3724: 55 91 00 MOV   [cnt_sec+1],0x0
    3727: 55 90 00 MOV   [cnt_sec],0x0
    372A: 40       NOP   
    372B: 40       NOP   
    372C: 62 D0 06 MOV   REG[0xD0],0x6
    372F: 51 8D    MOV   A,[i_min+1]
    3731: 11 3C    SUB   A,0x3C
    3733: 51 8C    MOV   A,[i_min]
    3735: 19 00    SBB   A,0x0
    3737: C0 12    JC    0x374A
    3739: 62 D0 06 MOV   REG[0xD0],0x6
    373C: 76 8F    INC   [i_hour+1]
    373E: 0E 8E 00 ADC   [i_hour],0x0
    3741: 62 D0 06 MOV   REG[0xD0],0x6
    3744: 55 8D 00 MOV   [i_min+1],0x0
    3747: 55 8C 00 MOV   [i_min],0x0
    374A: 62 D0 06 MOV   REG[0xD0],0x6
    374D: 51 93    MOV   A,[cnt_min+1]
    374F: 11 3C    SUB   A,0x3C
    3751: 51 92    MOV   A,[cnt_min]
    3753: 19 00    SBB   A,0x0
    3755: C0 12    JC    0x3768
    3757: 62 D0 06 MOV   REG[0xD0],0x6
    375A: 76 95    INC   [cnt_hour+1]
    375C: 0E 94 00 ADC   [cnt_hour],0x0
    375F: 62 D0 06 MOV   REG[0xD0],0x6
    3762: 55 93 00 MOV   [cnt_min+1],0x0
    3765: 55 92 00 MOV   [cnt_min],0x0
    3768: 40       NOP   
    3769: 40       NOP   
    376A: 62 D0 06 MOV   REG[0xD0],0x6
    376D: 3C 8E 00 CMP   [i_hour],0x0
    3770: B0 0F    JNZ   0x3780
    3772: 3C 8F 63 CMP   [i_hour+1],0x63
    3775: B0 0A    JNZ   0x3780
    3777: 62 D0 06 MOV   REG[0xD0],0x6
    377A: 55 8F 00 MOV   [i_hour+1],0x0
    377D: 55 8E 00 MOV   [i_hour],0x0
    3780: 62 D0 06 MOV   REG[0xD0],0x6
    3783: 3C 94 00 CMP   [cnt_hour],0x0
    3786: B0 0F    JNZ   0x3796
    3788: 3C 95 63 CMP   [cnt_hour+1],0x63
    378B: B0 0A    JNZ   0x3796
    378D: 62 D0 06 MOV   REG[0xD0],0x6
    3790: 55 95 00 MOV   [cnt_hour+1],0x0
    3793: 55 94 00 MOV   [cnt_hour],0x0
    3796: 40       NOP   
    3797: 40       NOP   
    3798: 18       POP   A
    3799: 60 D0    MOV   REG[0xD0],A
    379B: 18       POP   A
    379C: 7E       RETI  
_ltoa:
    3DF8: 10       PUSH  X
    3DF9: 4F       MOV   X,SP
    3DFA: 38 0B    ADD   SP,0xB
    3DFC: 52 F7    MOV   A,[X-9]
    3DFE: 54 02    MOV   [X+2],A
    3E00: 52 F8    MOV   A,[X-8]
    3E02: 54 03    MOV   [X+3],A
    3E04: 52 F9    MOV   A,[X-7]
    3E06: 54 04    MOV   [X+4],A
    3E08: 52 FA    MOV   A,[X-6]
    3E0A: 54 05    MOV   [X+5],A
    3E0C: 3D F7 00 CMP   [X-9],0x0
    3E0F: B0 39    JNZ   0x3E49
    3E11: 3D F8 00 CMP   [X-8],0x0
    3E14: B0 34    JNZ   0x3E49
    3E16: 3D F9 00 CMP   [X-7],0x0
    3E19: B0 2F    JNZ   0x3E49
    3E1B: 3D FA 00 CMP   [X-6],0x0
    3E1E: B0 2A    JNZ   0x3E49
    3E20: 62 D0 00 MOV   REG[0xD0],0x0
    3E23: 52 FC    MOV   A,[X-4]
    3E25: 53 98    MOV   [__r1],A
    3E27: 52 FB    MOV   A,[X-5]
    3E29: 60 D5    MOV   REG[0xD5],A
    3E2B: 50 30    MOV   A,0x30
    3E2D: 3F 98    MVI   [__r1],A
    3E2F: 52 FC    MOV   A,[X-4]
    3E31: 01 01    ADD   A,0x1
    3E33: 53 98    MOV   [__r1],A
    3E35: 52 FB    MOV   A,[X-5]
    3E37: 09 00    ADC   A,0x0
    3E39: 60 D5    MOV   REG[0xD5],A
    3E3B: 50 00    MOV   A,0x0
    3E3D: 3F 98    MVI   [__r1],A
    3E3F: 52 FC    MOV   A,[X-4]
    3E41: 53 98    MOV   [__r1],A
    3E43: 52 FB    MOV   A,[X-5]
    3E45: 53 99    MOV   [__r0],A
    3E47: 82 25    JMP   0x406D
    3E49: 52 FA    MOV   A,[X-6]
    3E4B: 11 00    SUB   A,0x0
    3E4D: 52 F9    MOV   A,[X-7]
    3E4F: 19 00    SBB   A,0x0
    3E51: 52 F8    MOV   A,[X-8]
    3E53: 19 00    SBB   A,0x0
    3E55: 52 F7    MOV   A,[X-9]
    3E57: 31 80    XOR   A,0x80
    3E59: 19 80    SBB   A,0x80
    3E5B: D0 3B    JNC   0x3E97
    3E5D: 3D F5 00 CMP   [X-11],0x0
    3E60: B0 36    JNZ   0x3E97
    3E62: 3D F6 0A CMP   [X-10],0xA
    3E65: B0 31    JNZ   0x3E97
    3E67: 56 08 01 MOV   [X+8],0x1
    3E6A: 62 D0 00 MOV   REG[0xD0],0x0
    3E6D: 52 02    MOV   A,[X+2]
    3E6F: 73       CPL   A
    3E70: 53 99    MOV   [__r0],A
    3E72: 52 03    MOV   A,[X+3]
    3E74: 73       CPL   A
    3E75: 53 98    MOV   [__r1],A
    3E77: 52 04    MOV   A,[X+4]
    3E79: 73       CPL   A
    3E7A: 53 97    MOV   [__r2],A
    3E7C: 52 05    MOV   A,[X+5]
    3E7E: 73       CPL   A
    3E7F: 01 01    ADD   A,0x1
    3E81: 54 05    MOV   [X+5],A
    3E83: 51 97    MOV   A,[__r2]
    3E85: 09 00    ADC   A,0x0
    3E87: 54 04    MOV   [X+4],A
    3E89: 51 98    MOV   A,[__r1]
    3E8B: 09 00    ADC   A,0x0
    3E8D: 54 03    MOV   [X+3],A
    3E8F: 51 99    MOV   A,[__r0]
    3E91: 09 00    ADC   A,0x0
    3E93: 54 02    MOV   [X+2],A
    3E95: 80 04    JMP   0x3E9A
    3E97: 56 08 00 MOV   [X+8],0x0
    3E9A: 52 FC    MOV   A,[X-4]
    3E9C: 54 01    MOV   [X+1],A
    3E9E: 52 FB    MOV   A,[X-5]
    3EA0: 54 00    MOV   [X+0],A
    3EA2: 62 D0 00 MOV   REG[0xD0],0x0
    3EA5: 52 F6    MOV   A,[X-10]
    3EA7: 53 96    MOV   [__r3],A
    3EA9: 52 F5    MOV   A,[X-11]
    3EAB: 53 97    MOV   [__r2],A
    3EAD: 47 97 80 TST   [__r2],0x80
    3EB0: A0 09    JZ    0x3EBA
    3EB2: 55 98 FF MOV   [__r1],0xFF
    3EB5: 55 99 FF MOV   [__r0],0xFF
    3EB8: 80 0A    JMP   0x3EC3
    3EBA: 62 D0 00 MOV   REG[0xD0],0x0
    3EBD: 55 98 00 MOV   [__r1],0x0
    3EC0: 55 99 00 MOV   [__r0],0x0
    3EC3: 62 D0 00 MOV   REG[0xD0],0x0
    3EC6: 51 99    MOV   A,[__r0]
    3EC8: 08       PUSH  A
    3EC9: 51 98    MOV   A,[__r1]
    3ECB: 08       PUSH  A
    3ECC: 51 97    MOV   A,[__r2]
    3ECE: 08       PUSH  A
    3ECF: 51 96    MOV   A,[__r3]
    3ED1: 08       PUSH  A
    3ED2: 52 02    MOV   A,[X+2]
    3ED4: 08       PUSH  A
    3ED5: 52 03    MOV   A,[X+3]
    3ED7: 08       PUSH  A
    3ED8: 52 04    MOV   A,[X+4]
    3EDA: 08       PUSH  A
    3EDB: 52 05    MOV   A,[X+5]
    3EDD: 08       PUSH  A
    3EDE: 7C 37 EB LCALL 0x37EB
    3EE1: 38 FC    ADD   SP,0xFC
    3EE3: 18       POP   A
    3EE4: 53 96    MOV   [__r3],A
    3EE6: 18       POP   A
    3EE7: 53 97    MOV   [__r2],A
    3EE9: 18       POP   A
    3EEA: 18       POP   A
    3EEB: 51 96    MOV   A,[__r3]
    3EED: 53 98    MOV   [__r1],A
    3EEF: 51 97    MOV   A,[__r2]
    3EF1: 53 99    MOV   [__r0],A
    3EF3: 51 98    MOV   A,[__r1]
    3EF5: 54 0A    MOV   [X+10],A
    3EF7: 51 99    MOV   A,[__r0]
    3EF9: 54 09    MOV   [X+9],A
    3EFB: 50 09    MOV   A,0x9
    3EFD: 13 0A    SUB   A,[X+10]
    3EFF: 52 09    MOV   A,[X+9]
    3F01: 31 80    XOR   A,0x80
    3F03: 53 8D    MOV   [__rX],A
    3F05: 50 80    MOV   A,0x80
    3F07: 1A 8D    SBB   A,[__rX]
    3F09: C0 28    JC    0x3F32
    3F0B: 62 D0 00 MOV   REG[0xD0],0x0
    3F0E: 52 01    MOV   A,[X+1]
    3F10: 53 98    MOV   [__r1],A
    3F12: 52 00    MOV   A,[X+0]
    3F14: 53 99    MOV   [__r0],A
    3F16: 51 98    MOV   A,[__r1]
    3F18: 01 01    ADD   A,0x1
    3F1A: 54 01    MOV   [X+1],A
    3F1C: 51 99    MOV   A,[__r0]
    3F1E: 09 00    ADC   A,0x0
    3F20: 54 00    MOV   [X+0],A
    3F22: 52 0A    MOV   A,[X+10]
    3F24: 01 30    ADD   A,0x30
    3F26: 53 97    MOV   [__r2],A
    3F28: 51 99    MOV   A,[__r0]
    3F2A: 60 D5    MOV   REG[0xD5],A
    3F2C: 51 97    MOV   A,[__r2]
    3F2E: 3F 98    MVI   [__r1],A
    3F30: 80 26    JMP   0x3F57
    3F32: 62 D0 00 MOV   REG[0xD0],0x0
    3F35: 52 01    MOV   A,[X+1]
    3F37: 53 98    MOV   [__r1],A
    3F39: 52 00    MOV   A,[X+0]
    3F3B: 53 99    MOV   [__r0],A
    3F3D: 51 98    MOV   A,[__r1]
    3F3F: 01 01    ADD   A,0x1
    3F41: 54 01    MOV   [X+1],A
    3F43: 51 99    MOV   A,[__r0]
    3F45: 09 00    ADC   A,0x0
    3F47: 54 00    MOV   [X+0],A
    3F49: 52 0A    MOV   A,[X+10]
    3F4B: 01 57    ADD   A,0x57
    3F4D: 53 97    MOV   [__r2],A
    3F4F: 51 99    MOV   A,[__r0]
    3F51: 60 D5    MOV   REG[0xD5],A
    3F53: 51 97    MOV   A,[__r2]
    3F55: 3F 98    MVI   [__r1],A
    3F57: 62 D0 00 MOV   REG[0xD0],0x0
    3F5A: 52 F6    MOV   A,[X-10]
    3F5C: 53 96    MOV   [__r3],A
    3F5E: 52 F5    MOV   A,[X-11]
    3F60: 53 97    MOV   [__r2],A
    3F62: 47 97 80 TST   [__r2],0x80
    3F65: A0 09    JZ    0x3F6F
    3F67: 55 98 FF MOV   [__r1],0xFF
    3F6A: 55 99 FF MOV   [__r0],0xFF
    3F6D: 80 0A    JMP   0x3F78
    3F6F: 62 D0 00 MOV   REG[0xD0],0x0
    3F72: 55 98 00 MOV   [__r1],0x0
    3F75: 55 99 00 MOV   [__r0],0x0
    3F78: 62 D0 00 MOV   REG[0xD0],0x0
    3F7B: 51 99    MOV   A,[__r0]
    3F7D: 08       PUSH  A
    3F7E: 51 98    MOV   A,[__r1]
    3F80: 08       PUSH  A
    3F81: 51 97    MOV   A,[__r2]
    3F83: 08       PUSH  A
    3F84: 51 96    MOV   A,[__r3]
    3F86: 08       PUSH  A
    3F87: 52 02    MOV   A,[X+2]
    3F89: 08       PUSH  A
    3F8A: 52 03    MOV   A,[X+3]
    3F8C: 08       PUSH  A
    3F8D: 52 04    MOV   A,[X+4]
    3F8F: 08       PUSH  A
    3F90: 52 05    MOV   A,[X+5]
    3F92: 08       PUSH  A
    3F93: 7C 37 EB LCALL 0x37EB
    3F96: 18       POP   A
    3F97: 54 05    MOV   [X+5],A
    3F99: 18       POP   A
    3F9A: 54 04    MOV   [X+4],A
    3F9C: 18       POP   A
    3F9D: 54 03    MOV   [X+3],A
    3F9F: 18       POP   A
    3FA0: 54 02    MOV   [X+2],A
    3FA2: 38 FC    ADD   SP,0xFC
    3FA4: 3D 02 00 CMP   [X+2],0x0
    3FA7: BE FA    JNZ   0x3EA2
    3FA9: 3D 03 00 CMP   [X+3],0x0
    3FAC: BE F5    JNZ   0x3EA2
    3FAE: 3D 04 00 CMP   [X+4],0x0
    3FB1: BE F0    JNZ   0x3EA2
    3FB3: 3D 05 00 CMP   [X+5],0x0
    3FB6: BE EB    JNZ   0x3EA2
    3FB8: 3D 08 00 CMP   [X+8],0x0
    3FBB: A0 20    JZ    0x3FDC
    3FBD: 62 D0 00 MOV   REG[0xD0],0x0
    3FC0: 52 01    MOV   A,[X+1]
    3FC2: 53 98    MOV   [__r1],A
    3FC4: 52 00    MOV   A,[X+0]
    3FC6: 53 99    MOV   [__r0],A
    3FC8: 51 98    MOV   A,[__r1]
    3FCA: 01 01    ADD   A,0x1
    3FCC: 54 01    MOV   [X+1],A
    3FCE: 51 99    MOV   A,[__r0]
    3FD0: 09 00    ADC   A,0x0
    3FD2: 54 00    MOV   [X+0],A
    3FD4: 51 99    MOV   A,[__r0]
    3FD6: 60 D5    MOV   REG[0xD5],A
    3FD8: 50 2D    MOV   A,0x2D
    3FDA: 3F 98    MVI   [__r1],A
    3FDC: 62 D0 00 MOV   REG[0xD0],0x0
    3FDF: 52 01    MOV   A,[X+1]
    3FE1: 53 98    MOV   [__r1],A
    3FE3: 52 00    MOV   A,[X+0]
    3FE5: 53 99    MOV   [__r0],A
    3FE7: 51 98    MOV   A,[__r1]
    3FE9: 01 FF    ADD   A,0xFF
    3FEB: 54 01    MOV   [X+1],A
    3FED: 51 99    MOV   A,[__r0]
    3FEF: 09 FF    ADC   A,0xFF
    3FF1: 54 00    MOV   [X+0],A
    3FF3: 51 99    MOV   A,[__r0]
    3FF5: 60 D5    MOV   REG[0xD5],A
    3FF7: 50 00    MOV   A,0x0
    3FF9: 3F 98    MVI   [__r1],A
    3FFB: 52 FC    MOV   A,[X-4]
    3FFD: 54 07    MOV   [X+7],A
    3FFF: 52 FB    MOV   A,[X-5]
    4001: 54 06    MOV   [X+6],A
    4003: 80 54    JMP   0x4058
    4005: 62 D0 00 MOV   REG[0xD0],0x0
    4008: 52 07    MOV   A,[X+7]
    400A: 53 98    MOV   [__r1],A
    400C: 52 06    MOV   A,[X+6]
    400E: 60 D4    MOV   REG[0xD4],A
    4010: 3E 98    MVI   A,[__r1]
    4012: 54 08    MOV   [X+8],A
    4014: 52 07    MOV   A,[X+7]
    4016: 53 98    MOV   [__r1],A
    4018: 52 06    MOV   A,[X+6]
    401A: 53 99    MOV   [__r0],A
    401C: 51 98    MOV   A,[__r1]
    401E: 01 01    ADD   A,0x1
    4020: 54 07    MOV   [X+7],A
    4022: 51 99    MOV   A,[__r0]
    4024: 09 00    ADC   A,0x0
    4026: 54 06    MOV   [X+6],A
    4028: 52 01    MOV   A,[X+1]
    402A: 53 96    MOV   [__r3],A
    402C: 52 00    MOV   A,[X+0]
    402E: 60 D4    MOV   REG[0xD4],A
    4030: 3E 96    MVI   A,[__r3]
    4032: 53 97    MOV   [__r2],A
    4034: 51 99    MOV   A,[__r0]
    4036: 60 D5    MOV   REG[0xD5],A
    4038: 51 97    MOV   A,[__r2]
    403A: 3F 98    MVI   [__r1],A
    403C: 52 01    MOV   A,[X+1]
    403E: 53 98    MOV   [__r1],A
    4040: 52 00    MOV   A,[X+0]
    4042: 53 99    MOV   [__r0],A
    4044: 51 98    MOV   A,[__r1]
    4046: 01 FF    ADD   A,0xFF
    4048: 54 01    MOV   [X+1],A
    404A: 51 99    MOV   A,[__r0]
    404C: 09 FF    ADC   A,0xFF
    404E: 54 00    MOV   [X+0],A
    4050: 51 99    MOV   A,[__r0]
    4052: 60 D5    MOV   REG[0xD5],A
    4054: 52 08    MOV   A,[X+8]
    4056: 3F 98    MVI   [__r1],A
    4058: 52 07    MOV   A,[X+7]
    405A: 13 01    SUB   A,[X+1]
    405C: 52 06    MOV   A,[X+6]
    405E: 1B 00    SBB   A,[X+0]
    4060: CF A4    JC    0x4005
    4062: 62 D0 00 MOV   REG[0xD0],0x0
    4065: 52 FC    MOV   A,[X-4]
    4067: 53 98    MOV   [__r1],A
    4069: 52 FB    MOV   A,[X-5]
    406B: 53 99    MOV   [__r0],A
    406D: 38 F5    ADD   SP,0xF5
    406F: 20       POP   X
    4070: 7F       RET   
_ftoa:
    4071: 10       PUSH  X
    4072: 4F       MOV   X,SP
    4073: 38 16    ADD   SP,0x16
    4075: 62 D0 00 MOV   REG[0xD0],0x0
    4078: 52 F8    MOV   A,[X-8]
    407A: 53 98    MOV   [__r1],A
    407C: 52 F7    MOV   A,[X-9]
    407E: 60 D5    MOV   REG[0xD5],A
    4080: 50 00    MOV   A,0x0
    4082: 3F 98    MVI   [__r1],A
    4084: 3F 98    MVI   [__r1],A
    4086: 08       PUSH  A
    4087: 08       PUSH  A
    4088: 08       PUSH  A
    4089: 08       PUSH  A
    408A: 52 F9    MOV   A,[X-7]
    408C: 08       PUSH  A
    408D: 52 FA    MOV   A,[X-6]
    408F: 08       PUSH  A
    4090: 52 FB    MOV   A,[X-5]
    4092: 08       PUSH  A
    4093: 52 FC    MOV   A,[X-4]
    4095: 08       PUSH  A
    4096: 7C 3A 0B LCALL 0x3A0B
    4099: 38 F8    ADD   SP,0xF8
    409B: 39 00    CMP   A,0x0
    409D: B0 1B    JNZ   0x40B9
    409F: 62 D0 00 MOV   REG[0xD0],0x0
    40A2: 55 9A 30 MOV   [0x9A],0x30
    40A5: 55 9B 2E MOV   [0x9B],0x2E
    40A8: 55 9C 30 MOV   [0x9C],0x30
    40AB: 55 9D 00 MOV   [0x9D],0x0
    40AE: 62 D0 00 MOV   REG[0xD0],0x0
    40B1: 55 98 9A MOV   [__r1],0x9A
    40B4: 55 99 00 MOV   [__r0],0x0
    40B7: 84 04    JMP   0x44BC
    40B9: 52 F9    MOV   A,[X-7]
    40BB: 54 06    MOV   [X+6],A
    40BD: 52 FA    MOV   A,[X-6]
    40BF: 54 07    MOV   [X+7],A
    40C1: 52 FB    MOV   A,[X-5]
    40C3: 54 08    MOV   [X+8],A
    40C5: 52 FC    MOV   A,[X-4]
    40C7: 54 09    MOV   [X+9],A
    40C9: 62 D0 00 MOV   REG[0xD0],0x0
    40CC: 52 06    MOV   A,[X+6]
    40CE: 53 99    MOV   [__r0],A
    40D0: 52 07    MOV   A,[X+7]
    40D2: 53 98    MOV   [__r1],A
    40D4: 52 08    MOV   A,[X+8]
    40D6: 53 97    MOV   [__r2],A
    40D8: 52 09    MOV   A,[X+9]
    40DA: 53 96    MOV   [__r3],A
    40DC: 50 17    MOV   A,0x17
    40DE: 62 D0 00 MOV   REG[0xD0],0x0
    40E1: 68 99    ASR   [__r0]
    40E3: 6E 98    RRC   [__r1]
    40E5: 6E 97    RRC   [__r2]
    40E7: 6E 96    RRC   [__r3]
    40E9: 78       DEC   A
    40EA: BF F3    JNZ   0x40DE
    40EC: 51 96    MOV   A,[__r3]
    40EE: 11 7F    SUB   A,0x7F
    40F0: 54 0B    MOV   [X+11],A
    40F2: 50 00    MOV   A,0x0
    40F4: 19 00    SBB   A,0x0
    40F6: 54 0A    MOV   [X+10],A
    40F8: 52 09    MOV   A,[X+9]
    40FA: 53 96    MOV   [__r3],A
    40FC: 52 08    MOV   A,[X+8]
    40FE: 53 97    MOV   [__r2],A
    4100: 52 07    MOV   A,[X+7]
    4102: 53 98    MOV   [__r1],A
    4104: 52 06    MOV   A,[X+6]
    4106: 21 00    AND   A,0x0
    4108: 53 99    MOV   [__r0],A
    410A: 51 96    MOV   A,[__r3]
    410C: 54 13    MOV   [X+19],A
    410E: 51 97    MOV   A,[__r2]
    4110: 54 12    MOV   [X+18],A
    4112: 51 98    MOV   A,[__r1]
    4114: 29 80    OR    A,0x80
    4116: 54 11    MOV   [X+17],A
    4118: 51 99    MOV   A,[__r0]
    411A: 54 10    MOV   [X+16],A
    411C: 56 02 00 MOV   [X+2],0x0
    411F: 56 03 00 MOV   [X+3],0x0
    4122: 56 04 00 MOV   [X+4],0x0
    4125: 56 05 00 MOV   [X+5],0x0
    4128: 56 0C 00 MOV   [X+12],0x0
    412B: 56 0D 00 MOV   [X+13],0x0
    412E: 56 0E 00 MOV   [X+14],0x0
    4131: 56 0F 00 MOV   [X+15],0x0
    4134: 52 0B    MOV   A,[X+11]
    4136: 11 1F    SUB   A,0x1F
    4138: 52 0A    MOV   A,[X+10]
    413A: 31 80    XOR   A,0x80
    413C: 19 80    SBB   A,0x80
    413E: C0 1C    JC    0x415B
    4140: 62 D0 00 MOV   REG[0xD0],0x0
    4143: 52 F8    MOV   A,[X-8]
    4145: 53 98    MOV   [__r1],A
    4147: 52 F7    MOV   A,[X-9]
    4149: 60 D5    MOV   REG[0xD5],A
    414B: 50 FF    MOV   A,0xFF
    414D: 3F 98    MVI   [__r1],A
    414F: 50 FE    MOV   A,0xFE
    4151: 3F 98    MVI   [__r1],A
    4153: 55 98 00 MOV   [__r1],0x0
    4156: 55 99 00 MOV   [__r0],0x0
    4159: 83 62    JMP   0x44BC
    415B: 52 0B    MOV   A,[X+11]
    415D: 11 E9    SUB   A,0xE9
    415F: 52 0A    MOV   A,[X+10]
    4161: 31 80    XOR   A,0x80
    4163: 19 7F    SBB   A,0x7F
    4165: D0 1A    JNC   0x4180
    4167: 62 D0 00 MOV   REG[0xD0],0x0
    416A: 52 F8    MOV   A,[X-8]
    416C: 53 98    MOV   [__r1],A
    416E: 52 F7    MOV   A,[X-9]
    4170: 60 D5    MOV   REG[0xD5],A
    4172: 50 FF    MOV   A,0xFF
    4174: 3F 98    MVI   [__r1],A
    4176: 3F 98    MVI   [__r1],A
    4178: 55 98 00 MOV   [__r1],0x0
    417B: 55 99 00 MOV   [__r0],0x0
    417E: 83 3D    JMP   0x44BC
    4180: 52 0B    MOV   A,[X+11]
    4182: 11 17    SUB   A,0x17
    4184: 52 0A    MOV   A,[X+10]
    4186: 31 80    XOR   A,0x80
    4188: 19 80    SBB   A,0x80
    418A: C0 43    JC    0x41CE
    418C: 62 D0 00 MOV   REG[0xD0],0x0
    418F: 52 0B    MOV   A,[X+11]
    4191: 11 17    SUB   A,0x17
    4193: 53 98    MOV   [__r1],A
    4195: 52 10    MOV   A,[X+16]
    4197: 53 95    MOV   [__r4],A
    4199: 52 11    MOV   A,[X+17]
    419B: 53 94    MOV   [__r5],A
    419D: 52 12    MOV   A,[X+18]
    419F: 53 93    MOV   [__r6],A
    41A1: 52 13    MOV   A,[X+19]
    41A3: 53 92    MOV   [__r7],A
    41A5: 51 98    MOV   A,[__r1]
    41A7: 21 1F    AND   A,0x1F
    41A9: A0 0F    JZ    0x41B9
    41AB: 62 D0 00 MOV   REG[0xD0],0x0
    41AE: 65 92    ASL   [__r7]
    41B0: 6B 93    RLC   [__r6]
    41B2: 6B 94    RLC   [__r5]
    41B4: 6B 95    RLC   [__r4]
    41B6: 78       DEC   A
    41B7: BF F3    JNZ   0x41AB
    41B9: 62 D0 00 MOV   REG[0xD0],0x0
    41BC: 51 95    MOV   A,[__r4]
    41BE: 54 0C    MOV   [X+12],A
    41C0: 51 94    MOV   A,[__r5]
    41C2: 54 0D    MOV   [X+13],A
    41C4: 51 93    MOV   A,[__r6]
    41C6: 54 0E    MOV   [X+14],A
    41C8: 51 92    MOV   A,[__r7]
    41CA: 54 0F    MOV   [X+15],A
    41CC: 80 D0    JMP   0x429D
    41CE: 52 0B    MOV   A,[X+11]
    41D0: 11 00    SUB   A,0x0
    41D2: 52 0A    MOV   A,[X+10]
    41D4: 31 80    XOR   A,0x80
    41D6: 19 80    SBB   A,0x80
    41D8: C0 7F    JC    0x4258
    41DA: 62 D0 00 MOV   REG[0xD0],0x0
    41DD: 50 17    MOV   A,0x17
    41DF: 13 0B    SUB   A,[X+11]
    41E1: 53 98    MOV   [__r1],A
    41E3: 52 10    MOV   A,[X+16]
    41E5: 53 95    MOV   [__r4],A
    41E7: 52 11    MOV   A,[X+17]
    41E9: 53 94    MOV   [__r5],A
    41EB: 52 12    MOV   A,[X+18]
    41ED: 53 93    MOV   [__r6],A
    41EF: 52 13    MOV   A,[X+19]
    41F1: 53 92    MOV   [__r7],A
    41F3: 51 98    MOV   A,[__r1]
    41F5: 21 1F    AND   A,0x1F
    41F7: A0 0F    JZ    0x4207
    41F9: 62 D0 00 MOV   REG[0xD0],0x0
    41FC: 68 95    ASR   [__r4]
    41FE: 6E 94    RRC   [__r5]
    4200: 6E 93    RRC   [__r6]
    4202: 6E 92    RRC   [__r7]
    4204: 78       DEC   A
    4205: BF F3    JNZ   0x41F9
    4207: 62 D0 00 MOV   REG[0xD0],0x0
    420A: 51 95    MOV   A,[__r4]
    420C: 54 0C    MOV   [X+12],A
    420E: 51 94    MOV   A,[__r5]
    4210: 54 0D    MOV   [X+13],A
    4212: 51 93    MOV   A,[__r6]
    4214: 54 0E    MOV   [X+14],A
    4216: 51 92    MOV   A,[__r7]
    4218: 54 0F    MOV   [X+15],A
    421A: 52 0B    MOV   A,[X+11]
    421C: 01 01    ADD   A,0x1
    421E: 53 98    MOV   [__r1],A
    4220: 52 10    MOV   A,[X+16]
    4222: 53 95    MOV   [__r4],A
    4224: 52 11    MOV   A,[X+17]
    4226: 53 94    MOV   [__r5],A
    4228: 52 12    MOV   A,[X+18]
    422A: 53 93    MOV   [__r6],A
    422C: 52 13    MOV   A,[X+19]
    422E: 53 92    MOV   [__r7],A
    4230: 51 98    MOV   A,[__r1]
    4232: 21 1F    AND   A,0x1F
    4234: A0 0F    JZ    0x4244
    4236: 62 D0 00 MOV   REG[0xD0],0x0
    4239: 65 92    ASL   [__r7]
    423B: 6B 93    RLC   [__r6]
    423D: 6B 94    RLC   [__r5]
    423F: 6B 95    RLC   [__r4]
    4241: 78       DEC   A
    4242: BF F3    JNZ   0x4236
    4244: 62 D0 00 MOV   REG[0xD0],0x0
    4247: 51 92    MOV   A,[__r7]
    4249: 54 05    MOV   [X+5],A
    424B: 51 93    MOV   A,[__r6]
    424D: 54 04    MOV   [X+4],A
    424F: 51 94    MOV   A,[__r5]
    4251: 54 03    MOV   [X+3],A
    4253: 56 02 00 MOV   [X+2],0x0
    4256: 80 46    JMP   0x429D
    4258: 62 D0 00 MOV   REG[0xD0],0x0
    425B: 52 0B    MOV   A,[X+11]
    425D: 01 01    ADD   A,0x1
    425F: 73       CPL   A
    4260: 11 FF    SUB   A,0xFF
    4262: 53 98    MOV   [__r1],A
    4264: 52 13    MOV   A,[X+19]
    4266: 53 92    MOV   [__r7],A
    4268: 52 12    MOV   A,[X+18]
    426A: 53 93    MOV   [__r6],A
    426C: 52 11    MOV   A,[X+17]
    426E: 53 94    MOV   [__r5],A
    4270: 52 10    MOV   A,[X+16]
    4272: 21 00    AND   A,0x0
    4274: 53 95    MOV   [__r4],A
    4276: 51 98    MOV   A,[__r1]
    4278: 21 1F    AND   A,0x1F
    427A: A0 0F    JZ    0x428A
    427C: 62 D0 00 MOV   REG[0xD0],0x0
    427F: 68 95    ASR   [__r4]
    4281: 6E 94    RRC   [__r5]
    4283: 6E 93    RRC   [__r6]
    4285: 6E 92    RRC   [__r7]
    4287: 78       DEC   A
    4288: BF F3    JNZ   0x427C
    428A: 62 D0 00 MOV   REG[0xD0],0x0
    428D: 51 95    MOV   A,[__r4]
    428F: 54 02    MOV   [X+2],A
    4291: 51 94    MOV   A,[__r5]
    4293: 54 03    MOV   [X+3],A
    4295: 51 93    MOV   A,[__r6]
    4297: 54 04    MOV   [X+4],A
    4299: 51 92    MOV   A,[__r7]
    429B: 54 05    MOV   [X+5],A
    429D: 56 01 9A MOV   [X+1],0x9A
    42A0: 56 00 00 MOV   [X+0],0x0
    42A3: 52 09    MOV   A,[X+9]
    42A5: 11 00    SUB   A,0x0
    42A7: 52 08    MOV   A,[X+8]
    42A9: 19 00    SBB   A,0x0
    42AB: 52 07    MOV   A,[X+7]
    42AD: 19 00    SBB   A,0x0
    42AF: 52 06    MOV   A,[X+6]
    42B1: 31 80    XOR   A,0x80
    42B3: 19 80    SBB   A,0x80
    42B5: D0 20    JNC   0x42D6
    42B7: 62 D0 00 MOV   REG[0xD0],0x0
    42BA: 52 01    MOV   A,[X+1]
    42BC: 53 98    MOV   [__r1],A
    42BE: 52 00    MOV   A,[X+0]
    42C0: 53 99    MOV   [__r0],A
    42C2: 51 98    MOV   A,[__r1]
    42C4: 01 01    ADD   A,0x1
    42C6: 54 01    MOV   [X+1],A
    42C8: 51 99    MOV   A,[__r0]
    42CA: 09 00    ADC   A,0x0
    42CC: 54 00    MOV   [X+0],A
    42CE: 51 99    MOV   A,[__r0]
    42D0: 60 D5    MOV   REG[0xD5],A
    42D2: 50 2D    MOV   A,0x2D
    42D4: 3F 98    MVI   [__r1],A
    42D6: 3D 0C 00 CMP   [X+12],0x0
    42D9: B0 31    JNZ   0x430B
    42DB: 3D 0D 00 CMP   [X+13],0x0
    42DE: B0 2C    JNZ   0x430B
    42E0: 3D 0E 00 CMP   [X+14],0x0
    42E3: B0 27    JNZ   0x430B
    42E5: 3D 0F 00 CMP   [X+15],0x0
    42E8: B0 22    JNZ   0x430B
    42EA: 62 D0 00 MOV   REG[0xD0],0x0
    42ED: 52 01    MOV   A,[X+1]
    42EF: 53 98    MOV   [__r1],A
    42F1: 52 00    MOV   A,[X+0]
    42F3: 53 99    MOV   [__r0],A
    42F5: 51 98    MOV   A,[__r1]
    42F7: 01 01    ADD   A,0x1
    42F9: 54 01    MOV   [X+1],A
    42FB: 51 99    MOV   A,[__r0]
    42FD: 09 00    ADC   A,0x0
    42FF: 54 00    MOV   [X+0],A
    4301: 51 99    MOV   A,[__r0]
    4303: 60 D5    MOV   REG[0xD5],A
    4305: 50 30    MOV   A,0x30
    4307: 3F 98    MVI   [__r1],A
    4309: 80 36    JMP   0x4340
    430B: 50 00    MOV   A,0x0
    430D: 08       PUSH  A
    430E: 50 0A    MOV   A,0xA
    4310: 08       PUSH  A
    4311: 52 0C    MOV   A,[X+12]
    4313: 08       PUSH  A
    4314: 52 0D    MOV   A,[X+13]
    4316: 08       PUSH  A
    4317: 52 0E    MOV   A,[X+14]
    4319: 08       PUSH  A
    431A: 52 0F    MOV   A,[X+15]
    431C: 08       PUSH  A
    431D: 52 00    MOV   A,[X+0]
    431F: 08       PUSH  A
    4320: 52 01    MOV   A,[X+1]
    4322: 08       PUSH  A
    4323: 7C 3D F8 LCALL _ltoa
    4326: 38 F8    ADD   SP,0xF8
    4328: 80 06    JMP   0x432F
    432A: 77 01    INC   [X+1]
    432C: 0F 00 00 ADC   [X+0],0x0
    432F: 62 D0 00 MOV   REG[0xD0],0x0
    4332: 52 01    MOV   A,[X+1]
    4334: 53 98    MOV   [__r1],A
    4336: 52 00    MOV   A,[X+0]
    4338: 60 D4    MOV   REG[0xD4],A
    433A: 3E 98    MVI   A,[__r1]
    433C: 39 00    CMP   A,0x0
    433E: BF EB    JNZ   0x432A
    4340: 62 D0 00 MOV   REG[0xD0],0x0
    4343: 52 01    MOV   A,[X+1]
    4345: 53 98    MOV   [__r1],A
    4347: 52 00    MOV   A,[X+0]
    4349: 53 99    MOV   [__r0],A
    434B: 51 98    MOV   A,[__r1]
    434D: 01 01    ADD   A,0x1
    434F: 54 01    MOV   [X+1],A
    4351: 51 99    MOV   A,[__r0]
    4353: 09 00    ADC   A,0x0
    4355: 54 00    MOV   [X+0],A
    4357: 51 99    MOV   A,[__r0]
    4359: 60 D5    MOV   REG[0xD5],A
    435B: 50 2E    MOV   A,0x2E
    435D: 3F 98    MVI   [__r1],A
    435F: 3D 02 00 CMP   [X+2],0x0
    4362: B0 31    JNZ   0x4394
    4364: 3D 03 00 CMP   [X+3],0x0
    4367: B0 2C    JNZ   0x4394
    4369: 3D 04 00 CMP   [X+4],0x0
    436C: B0 27    JNZ   0x4394
    436E: 3D 05 00 CMP   [X+5],0x0
    4371: B0 22    JNZ   0x4394
    4373: 62 D0 00 MOV   REG[0xD0],0x0
    4376: 52 01    MOV   A,[X+1]
    4378: 53 98    MOV   [__r1],A
    437A: 52 00    MOV   A,[X+0]
    437C: 53 99    MOV   [__r0],A
    437E: 51 98    MOV   A,[__r1]
    4380: 01 01    ADD   A,0x1
    4382: 54 01    MOV   [X+1],A
    4384: 51 99    MOV   A,[__r0]
    4386: 09 00    ADC   A,0x0
    4388: 54 00    MOV   [X+0],A
    438A: 51 99    MOV   A,[__r0]
    438C: 60 D5    MOV   REG[0xD5],A
    438E: 50 30    MOV   A,0x30
    4390: 3F 98    MVI   [__r1],A
    4392: 81 14    JMP   0x44A7
    4394: 62 D0 00 MOV   REG[0xD0],0x0
    4397: 52 01    MOV   A,[X+1]
    4399: 11 9A    SUB   A,0x9A
    439B: 53 98    MOV   [__r1],A
    439D: 52 00    MOV   A,[X+0]
    439F: 19 00    SBB   A,0x0
    43A1: 53 99    MOV   [__r0],A
    43A3: 50 0F    MOV   A,0xF
    43A5: 12 98    SUB   A,[__r1]
    43A7: 53 98    MOV   [__r1],A
    43A9: 50 00    MOV   A,0x0
    43AB: 1A 99    SBB   A,[__r0]
    43AD: 53 99    MOV   [__r0],A
    43AF: 16 98 01 SUB   [__r1],0x1
    43B2: 1E 99 00 SBB   [__r0],0x0
    43B5: 51 98    MOV   A,[__r1]
    43B7: 54 15    MOV   [X+21],A
    43B9: 50 07    MOV   A,0x7
    43BB: 3B 15    CMP   A,[X+21]
    43BD: D0 04    JNC   0x43C2
    43BF: 56 15 07 MOV   [X+21],0x7
    43C2: 56 14 00 MOV   [X+20],0x0
    43C5: 80 A5    JMP   0x446B
    43C7: 62 D0 00 MOV   REG[0xD0],0x0
    43CA: 52 02    MOV   A,[X+2]
    43CC: 53 99    MOV   [__r0],A
    43CE: 52 03    MOV   A,[X+3]
    43D0: 53 98    MOV   [__r1],A
    43D2: 52 04    MOV   A,[X+4]
    43D4: 53 97    MOV   [__r2],A
    43D6: 52 05    MOV   A,[X+5]
    43D8: 53 96    MOV   [__r3],A
    43DA: 65 96    ASL   [__r3]
    43DC: 6B 97    RLC   [__r2]
    43DE: 6B 98    RLC   [__r1]
    43E0: 6B 99    RLC   [__r0]
    43E2: 52 02    MOV   A,[X+2]
    43E4: 53 95    MOV   [__r4],A
    43E6: 52 03    MOV   A,[X+3]
    43E8: 53 94    MOV   [__r5],A
    43EA: 52 04    MOV   A,[X+4]
    43EC: 53 93    MOV   [__r6],A
    43EE: 52 05    MOV   A,[X+5]
    43F0: 53 92    MOV   [__r7],A
    43F2: 50 03    MOV   A,0x3
    43F4: 62 D0 00 MOV   REG[0xD0],0x0
    43F7: 65 92    ASL   [__r7]
    43F9: 6B 93    RLC   [__r6]
    43FB: 6B 94    RLC   [__r5]
    43FD: 6B 95    RLC   [__r4]
    43FF: 78       DEC   A
    4400: BF F3    JNZ   0x43F4
    4402: 51 92    MOV   A,[__r7]
    4404: 02 96    ADD   A,[__r3]
    4406: 54 05    MOV   [X+5],A
    4408: 51 93    MOV   A,[__r6]
    440A: 0A 97    ADC   A,[__r2]
    440C: 54 04    MOV   [X+4],A
    440E: 51 94    MOV   A,[__r5]
    4410: 0A 98    ADC   A,[__r1]
    4412: 54 03    MOV   [X+3],A
    4414: 51 95    MOV   A,[__r4]
    4416: 0A 99    ADC   A,[__r0]
    4418: 54 02    MOV   [X+2],A
    441A: 52 01    MOV   A,[X+1]
    441C: 53 98    MOV   [__r1],A
    441E: 52 00    MOV   A,[X+0]
    4420: 53 99    MOV   [__r0],A
    4422: 51 98    MOV   A,[__r1]
    4424: 01 01    ADD   A,0x1
    4426: 54 01    MOV   [X+1],A
    4428: 51 99    MOV   A,[__r0]
    442A: 09 00    ADC   A,0x0
    442C: 54 00    MOV   [X+0],A
    442E: 52 02    MOV   A,[X+2]
    4430: 53 95    MOV   [__r4],A
    4432: 52 03    MOV   A,[X+3]
    4434: 53 94    MOV   [__r5],A
    4436: 52 04    MOV   A,[X+4]
    4438: 53 93    MOV   [__r6],A
    443A: 52 05    MOV   A,[X+5]
    443C: 53 92    MOV   [__r7],A
    443E: 50 18    MOV   A,0x18
    4440: 62 D0 00 MOV   REG[0xD0],0x0
    4443: 68 95    ASR   [__r4]
    4445: 6E 94    RRC   [__r5]
    4447: 6E 93    RRC   [__r6]
    4449: 6E 92    RRC   [__r7]
    444B: 78       DEC   A
    444C: BF F3    JNZ   0x4440
    444E: 06 92 30 ADD   [__r7],0x30
    4451: 0E 93 00 ADC   [__r6],0x0
    4454: 0E 94 00 ADC   [__r5],0x0
    4457: 0E 95 00 ADC   [__r4],0x0
    445A: 51 92    MOV   A,[__r7]
    445C: 53 97    MOV   [__r2],A
    445E: 51 99    MOV   A,[__r0]
    4460: 60 D5    MOV   REG[0xD5],A
    4462: 51 97    MOV   A,[__r2]
    4464: 3F 98    MVI   [__r1],A
    4466: 27 02 00 AND   [X+2],0x0
    4469: 77 14    INC   [X+20]
    446B: 52 14    MOV   A,[X+20]
    446D: 3B 15    CMP   A,[X+21]
    446F: CF 57    JC    0x43C7
    4471: 07 01 FF ADD   [X+1],0xFF
    4474: 0F 00 FF ADC   [X+0],0xFF
    4477: 80 07    JMP   0x447F
    4479: 07 01 FF ADD   [X+1],0xFF
    447C: 0F 00 FF ADC   [X+0],0xFF
    447F: 62 D0 00 MOV   REG[0xD0],0x0
    4482: 52 01    MOV   A,[X+1]
    4484: 53 98    MOV   [__r1],A
    4486: 52 00    MOV   A,[X+0]
    4488: 60 D4    MOV   REG[0xD4],A
    448A: 3E 98    MVI   A,[__r1]
    448C: 39 30    CMP   A,0x30
    448E: B0 13    JNZ   0x44A2
    4490: 52 01    MOV   A,[X+1]
    4492: 01 FF    ADD   A,0xFF
    4494: 53 98    MOV   [__r1],A
    4496: 52 00    MOV   A,[X+0]
    4498: 09 FF    ADC   A,0xFF
    449A: 60 D4    MOV   REG[0xD4],A
    449C: 3E 98    MVI   A,[__r1]
    449E: 39 2E    CMP   A,0x2E
    44A0: BF D8    JNZ   0x4479
    44A2: 77 01    INC   [X+1]
    44A4: 0F 00 00 ADC   [X+0],0x0
    44A7: 62 D0 00 MOV   REG[0xD0],0x0
    44AA: 52 01    MOV   A,[X+1]
    44AC: 53 98    MOV   [__r1],A
    44AE: 52 00    MOV   A,[X+0]
    44B0: 60 D5    MOV   REG[0xD5],A
    44B2: 50 00    MOV   A,0x0
    44B4: 3F 98    MVI   [__r1],A
    44B6: 55 98 9A MOV   [__r1],0x9A
    44B9: 55 99 00 MOV   [__r0],0x0
    44BC: 38 EA    ADD   SP,0xEA
    44BE: 20       POP   X
    44BF: 7F       RET   
_satan:
    44C0: 10       PUSH  X
    44C1: 4F       MOV   X,SP
    44C2: 50 3E    MOV   A,0x3E
    44C4: 08       PUSH  A
    44C5: 50 D4    MOV   A,0xD4
    44C7: 08       PUSH  A
    44C8: 50 13    MOV   A,0x13
    44CA: 08       PUSH  A
    44CB: 50 CD    MOV   A,0xCD
    44CD: 08       PUSH  A
    44CE: 52 F9    MOV   A,[X-7]
    44D0: 08       PUSH  A
    44D1: 52 FA    MOV   A,[X-6]
    44D3: 08       PUSH  A
    44D4: 52 FB    MOV   A,[X-5]
    44D6: 08       PUSH  A
    44D7: 52 FC    MOV   A,[X-4]
    44D9: 08       PUSH  A
    44DA: 62 D0 00 MOV   REG[0xD0],0x0
    44DD: 7C 3A 0B LCALL 0x3A0B
    44E0: 38 F8    ADD   SP,0xF8
    44E2: 39 00    CMP   A,0x0
    44E4: A0 17    JZ    0x44FC
    44E6: 39 01    CMP   A,0x1
    44E8: A0 13    JZ    0x44FC
    44EA: 52 F9    MOV   A,[X-7]
    44EC: 08       PUSH  A
    44ED: 52 FA    MOV   A,[X-6]
    44EF: 08       PUSH  A
    44F0: 52 FB    MOV   A,[X-5]
    44F2: 08       PUSH  A
    44F3: 52 FC    MOV   A,[X-4]
    44F5: 08       PUSH  A
    44F6: 91 3D    CALL  _xatan
    44F8: 38 FC    ADD   SP,0xFC
    44FA: 81 38    JMP   0x4633
    44FC: 50 40    MOV   A,0x40
    44FE: 08       PUSH  A
    44FF: 50 1A    MOV   A,0x1A
    4501: 08       PUSH  A
    4502: 50 82    MOV   A,0x82
    4504: 08       PUSH  A
    4505: 50 7A    MOV   A,0x7A
    4507: 08       PUSH  A
    4508: 52 F9    MOV   A,[X-7]
    450A: 08       PUSH  A
    450B: 52 FA    MOV   A,[X-6]
    450D: 08       PUSH  A
    450E: 52 FB    MOV   A,[X-5]
    4510: 08       PUSH  A
    4511: 52 FC    MOV   A,[X-4]
    4513: 08       PUSH  A
    4514: 62 D0 00 MOV   REG[0xD0],0x0
    4517: 7C 3A 0B LCALL 0x3A0B
    451A: 38 F8    ADD   SP,0xF8
    451C: 39 00    CMP   A,0x0
    451E: A0 66    JZ    0x4585
    4520: 39 01    CMP   A,0x1
    4522: B0 62    JNZ   0x4585
    4524: 52 F9    MOV   A,[X-7]
    4526: 08       PUSH  A
    4527: 52 FA    MOV   A,[X-6]
    4529: 08       PUSH  A
    452A: 52 FB    MOV   A,[X-5]
    452C: 08       PUSH  A
    452D: 52 FC    MOV   A,[X-4]
    452F: 08       PUSH  A
    4530: 50 3F    MOV   A,0x3F
    4532: 08       PUSH  A
    4533: 50 80    MOV   A,0x80
    4535: 08       PUSH  A
    4536: 50 00    MOV   A,0x0
    4538: 08       PUSH  A
    4539: 08       PUSH  A
    453A: 7C 3A 68 LCALL 0x3A68
    453D: 18       POP   A
    453E: 53 96    MOV   [__r3],A
    4540: 18       POP   A
    4541: 53 97    MOV   [__r2],A
    4543: 18       POP   A
    4544: 53 98    MOV   [__r1],A
    4546: 18       POP   A
    4547: 38 FC    ADD   SP,0xFC
    4549: 08       PUSH  A
    454A: 51 98    MOV   A,[__r1]
    454C: 08       PUSH  A
    454D: 51 97    MOV   A,[__r2]
    454F: 08       PUSH  A
    4550: 51 96    MOV   A,[__r3]
    4552: 08       PUSH  A
    4553: 90 E0    CALL  _xatan
    4555: 38 FC    ADD   SP,0xFC
    4557: 62 D0 00 MOV   REG[0xD0],0x0
    455A: 51 99    MOV   A,[__r0]
    455C: 08       PUSH  A
    455D: 51 98    MOV   A,[__r1]
    455F: 08       PUSH  A
    4560: 51 97    MOV   A,[__r2]
    4562: 08       PUSH  A
    4563: 51 96    MOV   A,[__r3]
    4565: 08       PUSH  A
    4566: 50 3F    MOV   A,0x3F
    4568: 08       PUSH  A
    4569: 50 C9    MOV   A,0xC9
    456B: 08       PUSH  A
    456C: 50 0F    MOV   A,0xF
    456E: 08       PUSH  A
    456F: 50 DB    MOV   A,0xDB
    4571: 08       PUSH  A
    4572: 7C 3C 75 LCALL 0x3C75
    4575: 18       POP   A
    4576: 53 96    MOV   [__r3],A
    4578: 18       POP   A
    4579: 53 97    MOV   [__r2],A
    457B: 18       POP   A
    457C: 53 98    MOV   [__r1],A
    457E: 18       POP   A
    457F: 53 99    MOV   [__r0],A
    4581: 38 FC    ADD   SP,0xFC
    4583: 80 AF    JMP   0x4633
    4585: 62 D0 00 MOV   REG[0xD0],0x0
    4588: 50 3F    MOV   A,0x3F
    458A: 08       PUSH  A
    458B: 50 80    MOV   A,0x80
    458D: 08       PUSH  A
    458E: 50 00    MOV   A,0x0
    4590: 08       PUSH  A
    4591: 08       PUSH  A
    4592: 52 F9    MOV   A,[X-7]
    4594: 08       PUSH  A
    4595: 52 FA    MOV   A,[X-6]
    4597: 08       PUSH  A
    4598: 52 FB    MOV   A,[X-5]
    459A: 08       PUSH  A
    459B: 52 FC    MOV   A,[X-4]
    459D: 08       PUSH  A
    459E: 7C 3C 75 LCALL 0x3C75
    45A1: 18       POP   A
    45A2: 53 96    MOV   [__r3],A
    45A4: 18       POP   A
    45A5: 53 97    MOV   [__r2],A
    45A7: 18       POP   A
    45A8: 53 98    MOV   [__r1],A
    45AA: 18       POP   A
    45AB: 53 99    MOV   [__r0],A
    45AD: 38 FC    ADD   SP,0xFC
    45AF: 50 3F    MOV   A,0x3F
    45B1: 08       PUSH  A
    45B2: 50 80    MOV   A,0x80
    45B4: 08       PUSH  A
    45B5: 50 00    MOV   A,0x0
    45B7: 08       PUSH  A
    45B8: 08       PUSH  A
    45B9: 52 F9    MOV   A,[X-7]
    45BB: 08       PUSH  A
    45BC: 52 FA    MOV   A,[X-6]
    45BE: 08       PUSH  A
    45BF: 52 FB    MOV   A,[X-5]
    45C1: 08       PUSH  A
    45C2: 52 FC    MOV   A,[X-4]
    45C4: 08       PUSH  A
    45C5: 7C 39 0B LCALL 0x390B
    45C8: 18       POP   A
    45C9: 53 92    MOV   [__r7],A
    45CB: 18       POP   A
    45CC: 53 93    MOV   [__r6],A
    45CE: 18       POP   A
    45CF: 53 94    MOV   [__r5],A
    45D1: 18       POP   A
    45D2: 38 FC    ADD   SP,0xFC
    45D4: 08       PUSH  A
    45D5: 51 94    MOV   A,[__r5]
    45D7: 08       PUSH  A
    45D8: 51 93    MOV   A,[__r6]
    45DA: 08       PUSH  A
    45DB: 51 92    MOV   A,[__r7]
    45DD: 08       PUSH  A
    45DE: 51 99    MOV   A,[__r0]
    45E0: 08       PUSH  A
    45E1: 51 98    MOV   A,[__r1]
    45E3: 08       PUSH  A
    45E4: 51 97    MOV   A,[__r2]
    45E6: 08       PUSH  A
    45E7: 51 96    MOV   A,[__r3]
    45E9: 08       PUSH  A
    45EA: 7C 3A 68 LCALL 0x3A68
    45ED: 18       POP   A
    45EE: 53 96    MOV   [__r3],A
    45F0: 18       POP   A
    45F1: 53 97    MOV   [__r2],A
    45F3: 18       POP   A
    45F4: 53 98    MOV   [__r1],A
    45F6: 18       POP   A
    45F7: 38 FC    ADD   SP,0xFC
    45F9: 08       PUSH  A
    45FA: 51 98    MOV   A,[__r1]
    45FC: 08       PUSH  A
    45FD: 51 97    MOV   A,[__r2]
    45FF: 08       PUSH  A
    4600: 51 96    MOV   A,[__r3]
    4602: 08       PUSH  A
    4603: 90 30    CALL  _xatan
    4605: 38 FC    ADD   SP,0xFC
    4607: 62 D0 00 MOV   REG[0xD0],0x0
    460A: 50 3F    MOV   A,0x3F
    460C: 08       PUSH  A
    460D: 50 49    MOV   A,0x49
    460F: 08       PUSH  A
    4610: 50 0F    MOV   A,0xF
    4612: 08       PUSH  A
    4613: 50 DB    MOV   A,0xDB
    4615: 08       PUSH  A
    4616: 51 99    MOV   A,[__r0]
    4618: 08       PUSH  A
    4619: 51 98    MOV   A,[__r1]
    461B: 08       PUSH  A
    461C: 51 97    MOV   A,[__r2]
    461E: 08       PUSH  A
    461F: 51 96    MOV   A,[__r3]
    4621: 08       PUSH  A
    4622: 7C 39 0B LCALL 0x390B
    4625: 18       POP   A
    4626: 53 96    MOV   [__r3],A
    4628: 18       POP   A
    4629: 53 97    MOV   [__r2],A
    462B: 18       POP   A
    462C: 53 98    MOV   [__r1],A
    462E: 18       POP   A
    462F: 53 99    MOV   [__r0],A
    4631: 38 FC    ADD   SP,0xFC
    4633: 20       POP   X
    4634: 7F       RET   
_xatan:
    4635: 10       PUSH  X
    4636: 4F       MOV   X,SP
    4637: 38 04    ADD   SP,0x4
    4639: 52 F9    MOV   A,[X-7]
    463B: 08       PUSH  A
    463C: 52 FA    MOV   A,[X-6]
    463E: 08       PUSH  A
    463F: 52 FB    MOV   A,[X-5]
    4641: 08       PUSH  A
    4642: 52 FC    MOV   A,[X-4]
    4644: 08       PUSH  A
    4645: 52 F9    MOV   A,[X-7]
    4647: 08       PUSH  A
    4648: 52 FA    MOV   A,[X-6]
    464A: 08       PUSH  A
    464B: 52 FB    MOV   A,[X-5]
    464D: 08       PUSH  A
    464E: 52 FC    MOV   A,[X-4]
    4650: 08       PUSH  A
    4651: 62 D0 00 MOV   REG[0xD0],0x0
    4654: 7C 3B 4B LCALL 0x3B4B
    4657: 18       POP   A
    4658: 54 03    MOV   [X+3],A
    465A: 18       POP   A
    465B: 54 02    MOV   [X+2],A
    465D: 18       POP   A
    465E: 54 01    MOV   [X+1],A
    4660: 18       POP   A
    4661: 54 00    MOV   [X+0],A
    4663: 38 FC    ADD   SP,0xFC
    4665: 52 00    MOV   A,[X+0]
    4667: 08       PUSH  A
    4668: 52 01    MOV   A,[X+1]
    466A: 08       PUSH  A
    466B: 52 02    MOV   A,[X+2]
    466D: 08       PUSH  A
    466E: 52 03    MOV   A,[X+3]
    4670: 08       PUSH  A
    4671: 50 40    MOV   A,0x40
    4673: 08       PUSH  A
    4674: 50 CB    MOV   A,0xCB
    4676: 08       PUSH  A
    4677: 50 D0    MOV   A,0xD0
    4679: 08       PUSH  A
    467A: 50 65    MOV   A,0x65
    467C: 08       PUSH  A
    467D: 7C 3B 4B LCALL 0x3B4B
    4680: 18       POP   A
    4681: 53 96    MOV   [__r3],A
    4683: 18       POP   A
    4684: 53 97    MOV   [__r2],A
    4686: 18       POP   A
    4687: 53 98    MOV   [__r1],A
    4689: 18       POP   A
    468A: 53 99    MOV   [__r0],A
    468C: 38 FC    ADD   SP,0xFC
    468E: 50 41    MOV   A,0x41
    4690: 08       PUSH  A
    4691: 50 4A    MOV   A,0x4A
    4693: 08       PUSH  A
    4694: 50 8F    MOV   A,0x8F
    4696: 08       PUSH  A
    4697: 50 4E    MOV   A,0x4E
    4699: 08       PUSH  A
    469A: 51 99    MOV   A,[__r0]
    469C: 08       PUSH  A
    469D: 51 98    MOV   A,[__r1]
    469F: 08       PUSH  A
    46A0: 51 97    MOV   A,[__r2]
    46A2: 08       PUSH  A
    46A3: 51 96    MOV   A,[__r3]
    46A5: 08       PUSH  A
    46A6: 7C 39 0B LCALL 0x390B
    46A9: 18       POP   A
    46AA: 53 96    MOV   [__r3],A
    46AC: 18       POP   A
    46AD: 53 97    MOV   [__r2],A
    46AF: 18       POP   A
    46B0: 53 98    MOV   [__r1],A
    46B2: 18       POP   A
    46B3: 38 FC    ADD   SP,0xFC
    46B5: 08       PUSH  A
    46B6: 51 98    MOV   A,[__r1]
    46B8: 08       PUSH  A
    46B9: 51 97    MOV   A,[__r2]
    46BB: 08       PUSH  A
    46BC: 51 96    MOV   A,[__r3]
    46BE: 08       PUSH  A
    46BF: 52 F9    MOV   A,[X-7]
    46C1: 08       PUSH  A
    46C2: 52 FA    MOV   A,[X-6]
    46C4: 08       PUSH  A
    46C5: 52 FB    MOV   A,[X-5]
    46C7: 08       PUSH  A
    46C8: 52 FC    MOV   A,[X-4]
    46CA: 08       PUSH  A
    46CB: 7C 3B 4B LCALL 0x3B4B
    46CE: 18       POP   A
    46CF: 53 96    MOV   [__r3],A
    46D1: 18       POP   A
    46D2: 53 97    MOV   [__r2],A
    46D4: 18       POP   A
    46D5: 53 98    MOV   [__r1],A
    46D7: 18       POP   A
    46D8: 53 99    MOV   [__r0],A
    46DA: 38 FC    ADD   SP,0xFC
    46DC: 50 41    MOV   A,0x41
    46DE: 08       PUSH  A
    46DF: 50 29    MOV   A,0x29
    46E1: 08       PUSH  A
    46E2: 50 6D    MOV   A,0x6D
    46E4: 08       PUSH  A
    46E5: 50 00    MOV   A,0x0
    46E7: 08       PUSH  A
    46E8: 52 00    MOV   A,[X+0]
    46EA: 08       PUSH  A
    46EB: 52 01    MOV   A,[X+1]
    46ED: 08       PUSH  A
    46EE: 52 02    MOV   A,[X+2]
    46F0: 08       PUSH  A
    46F1: 52 03    MOV   A,[X+3]
    46F3: 08       PUSH  A
    46F4: 7C 39 0B LCALL 0x390B
    46F7: 18       POP   A
    46F8: 53 92    MOV   [__r7],A
    46FA: 18       POP   A
    46FB: 53 93    MOV   [__r6],A
    46FD: 18       POP   A
    46FE: 53 94    MOV   [__r5],A
    4700: 18       POP   A
    4701: 38 FC    ADD   SP,0xFC
    4703: 08       PUSH  A
    4704: 51 94    MOV   A,[__r5]
    4706: 08       PUSH  A
    4707: 51 93    MOV   A,[__r6]
    4709: 08       PUSH  A
    470A: 51 92    MOV   A,[__r7]
    470C: 08       PUSH  A
    470D: 52 00    MOV   A,[X+0]
    470F: 08       PUSH  A
    4710: 52 01    MOV   A,[X+1]
    4712: 08       PUSH  A
    4713: 52 02    MOV   A,[X+2]
    4715: 08       PUSH  A
    4716: 52 03    MOV   A,[X+3]
    4718: 08       PUSH  A
    4719: 7C 3B 4B LCALL 0x3B4B
    471C: 18       POP   A
    471D: 53 92    MOV   [__r7],A
    471F: 18       POP   A
    4720: 53 93    MOV   [__r6],A
    4722: 18       POP   A
    4723: 53 94    MOV   [__r5],A
    4725: 18       POP   A
    4726: 53 95    MOV   [__r4],A
    4728: 38 FC    ADD   SP,0xFC
    472A: 50 41    MOV   A,0x41
    472C: 08       PUSH  A
    472D: 50 4A    MOV   A,0x4A
    472F: 08       PUSH  A
    4730: 50 8F    MOV   A,0x8F
    4732: 08       PUSH  A
    4733: 50 4E    MOV   A,0x4E
    4735: 08       PUSH  A
    4736: 51 95    MOV   A,[__r4]
    4738: 08       PUSH  A
    4739: 51 94    MOV   A,[__r5]
    473B: 08       PUSH  A
    473C: 51 93    MOV   A,[__r6]
    473E: 08       PUSH  A
    473F: 51 92    MOV   A,[__r7]
    4741: 08       PUSH  A
    4742: 7C 39 0B LCALL 0x390B
    4745: 18       POP   A
    4746: 53 92    MOV   [__r7],A
    4748: 18       POP   A
    4749: 53 93    MOV   [__r6],A
    474B: 18       POP   A
    474C: 53 94    MOV   [__r5],A
    474E: 18       POP   A
    474F: 38 FC    ADD   SP,0xFC
    4751: 08       PUSH  A
    4752: 51 94    MOV   A,[__r5]
    4754: 08       PUSH  A
    4755: 51 93    MOV   A,[__r6]
    4757: 08       PUSH  A
    4758: 51 92    MOV   A,[__r7]
    475A: 08       PUSH  A
    475B: 51 99    MOV   A,[__r0]
    475D: 08       PUSH  A
    475E: 51 98    MOV   A,[__r1]
    4760: 08       PUSH  A
    4761: 51 97    MOV   A,[__r2]
    4763: 08       PUSH  A
    4764: 51 96    MOV   A,[__r3]
    4766: 08       PUSH  A
    4767: 7C 3A 68 LCALL 0x3A68
    476A: 18       POP   A
    476B: 53 96    MOV   [__r3],A
    476D: 18       POP   A
    476E: 53 97    MOV   [__r2],A
    4770: 18       POP   A
    4771: 53 98    MOV   [__r1],A
    4773: 18       POP   A
    4774: 53 99    MOV   [__r0],A
    4776: 38 FC    ADD   SP,0xFC
    4778: 38 FC    ADD   SP,0xFC
    477A: 20       POP   X
    477B: 7F       RET   
_asinf:
    477C: 10       PUSH  X
    477D: 4F       MOV   X,SP
    477E: 38 05    ADD   SP,0x5
    4780: 50 BF    MOV   A,0xBF
    4782: 08       PUSH  A
    4783: 50 80    MOV   A,0x80
    4785: 08       PUSH  A
    4786: 50 00    MOV   A,0x0
    4788: 08       PUSH  A
    4789: 08       PUSH  A
    478A: 52 F9    MOV   A,[X-7]
    478C: 08       PUSH  A
    478D: 52 FA    MOV   A,[X-6]
    478F: 08       PUSH  A
    4790: 52 FB    MOV   A,[X-5]
    4792: 08       PUSH  A
    4793: 52 FC    MOV   A,[X-4]
    4795: 08       PUSH  A
    4796: 62 D0 00 MOV   REG[0xD0],0x0
    4799: 7C 3A 0B LCALL 0x3A0B
    479C: 38 F8    ADD   SP,0xF8
    479E: 39 FF    CMP   A,0xFF
    47A0: A0 24    JZ    0x47C5
    47A2: 50 3F    MOV   A,0x3F
    47A4: 08       PUSH  A
    47A5: 50 80    MOV   A,0x80
    47A7: 08       PUSH  A
    47A8: 50 00    MOV   A,0x0
    47AA: 08       PUSH  A
    47AB: 08       PUSH  A
    47AC: 52 F9    MOV   A,[X-7]
    47AE: 08       PUSH  A
    47AF: 52 FA    MOV   A,[X-6]
    47B1: 08       PUSH  A
    47B2: 52 FB    MOV   A,[X-5]
    47B4: 08       PUSH  A
    47B5: 52 FC    MOV   A,[X-4]
    47B7: 08       PUSH  A
    47B8: 7C 3A 0B LCALL 0x3A0B
    47BB: 38 F8    ADD   SP,0xF8
    47BD: 39 00    CMP   A,0x0
    47BF: A0 1F    JZ    0x47DF
    47C1: 39 01    CMP   A,0x1
    47C3: B0 1B    JNZ   0x47DF
    47C5: 62 D0 06 MOV   REG[0xD0],0x6
    47C8: 55 9D 01 MOV   [errno+1],0x1
    47CB: 55 9C 00 MOV   [errno],0x0
    47CE: 62 D0 00 MOV   REG[0xD0],0x0
    47D1: 55 99 00 MOV   [__r0],0x0
    47D4: 55 98 00 MOV   [__r1],0x0
    47D7: 55 97 00 MOV   [__r2],0x0
    47DA: 55 96 00 MOV   [__r3],0x0
    47DD: 81 A3    JMP   0x4981
    47DF: 50 00    MOV   A,0x0
    47E1: 08       PUSH  A
    47E2: 08       PUSH  A
    47E3: 08       PUSH  A
    47E4: 08       PUSH  A
    47E5: 52 F9    MOV   A,[X-7]
    47E7: 08       PUSH  A
    47E8: 52 FA    MOV   A,[X-6]
    47EA: 08       PUSH  A
    47EB: 52 FB    MOV   A,[X-5]
    47ED: 08       PUSH  A
    47EE: 52 FC    MOV   A,[X-4]
    47F0: 08       PUSH  A
    47F1: 62 D0 00 MOV   REG[0xD0],0x0
    47F4: 7C 3A 0B LCALL 0x3A0B
    47F7: 38 F8    ADD   SP,0xF8
    47F9: 39 FF    CMP   A,0xFF
    47FB: A0 06    JZ    0x4802
    47FD: 56 04 01 MOV   [X+4],0x1
    4800: 80 07    JMP   0x4808
    4802: 37 F9 80 XOR   [X-7],0x80
    4805: 56 04 FF MOV   [X+4],0xFF
    4808: 62 D0 00 MOV   REG[0xD0],0x0
    480B: 52 F9    MOV   A,[X-7]
    480D: 08       PUSH  A
    480E: 52 FA    MOV   A,[X-6]
    4810: 08       PUSH  A
    4811: 52 FB    MOV   A,[X-5]
    4813: 08       PUSH  A
    4814: 52 FC    MOV   A,[X-4]
    4816: 08       PUSH  A
    4817: 52 F9    MOV   A,[X-7]
    4819: 08       PUSH  A
    481A: 52 FA    MOV   A,[X-6]
    481C: 08       PUSH  A
    481D: 52 FB    MOV   A,[X-5]
    481F: 08       PUSH  A
    4820: 52 FC    MOV   A,[X-4]
    4822: 08       PUSH  A
    4823: 7C 3B 4B LCALL 0x3B4B
    4826: 18       POP   A
    4827: 53 96    MOV   [__r3],A
    4829: 18       POP   A
    482A: 53 97    MOV   [__r2],A
    482C: 18       POP   A
    482D: 53 98    MOV   [__r1],A
    482F: 18       POP   A
    4830: 38 FC    ADD   SP,0xFC
    4832: 08       PUSH  A
    4833: 51 98    MOV   A,[__r1]
    4835: 08       PUSH  A
    4836: 51 97    MOV   A,[__r2]
    4838: 08       PUSH  A
    4839: 51 96    MOV   A,[__r3]
    483B: 08       PUSH  A
    483C: 50 3F    MOV   A,0x3F
    483E: 08       PUSH  A
    483F: 50 80    MOV   A,0x80
    4841: 08       PUSH  A
    4842: 50 00    MOV   A,0x0
    4844: 08       PUSH  A
    4845: 08       PUSH  A
    4846: 7C 3C 75 LCALL 0x3C75
    4849: 18       POP   A
    484A: 53 96    MOV   [__r3],A
    484C: 18       POP   A
    484D: 53 97    MOV   [__r2],A
    484F: 18       POP   A
    4850: 53 98    MOV   [__r1],A
    4852: 18       POP   A
    4853: 38 FC    ADD   SP,0xFC
    4855: 08       PUSH  A
    4856: 51 98    MOV   A,[__r1]
    4858: 08       PUSH  A
    4859: 51 97    MOV   A,[__r2]
    485B: 08       PUSH  A
    485C: 51 96    MOV   A,[__r3]
    485E: 08       PUSH  A
    485F: 7C 52 8F LCALL _sqrtf
    4862: 38 FC    ADD   SP,0xFC
    4864: 62 D0 00 MOV   REG[0xD0],0x0
    4867: 51 99    MOV   A,[__r0]
    4869: 54 00    MOV   [X+0],A
    486B: 51 98    MOV   A,[__r1]
    486D: 54 01    MOV   [X+1],A
    486F: 51 97    MOV   A,[__r2]
    4871: 54 02    MOV   [X+2],A
    4873: 51 96    MOV   A,[__r3]
    4875: 54 03    MOV   [X+3],A
    4877: 50 3F    MOV   A,0x3F
    4879: 08       PUSH  A
    487A: 50 35    MOV   A,0x35
    487C: 08       PUSH  A
    487D: 50 04    MOV   A,0x4
    487F: 08       PUSH  A
    4880: 50 F3    MOV   A,0xF3
    4882: 08       PUSH  A
    4883: 52 F9    MOV   A,[X-7]
    4885: 08       PUSH  A
    4886: 52 FA    MOV   A,[X-6]
    4888: 08       PUSH  A
    4889: 52 FB    MOV   A,[X-5]
    488B: 08       PUSH  A
    488C: 52 FC    MOV   A,[X-4]
    488E: 08       PUSH  A
    488F: 7C 3A 0B LCALL 0x3A0B
    4892: 38 F8    ADD   SP,0xF8
    4894: 39 00    CMP   A,0x0
    4896: A0 68    JZ    0x48FF
    4898: 39 01    CMP   A,0x1
    489A: B0 64    JNZ   0x48FF
    489C: 52 F9    MOV   A,[X-7]
    489E: 08       PUSH  A
    489F: 52 FA    MOV   A,[X-6]
    48A1: 08       PUSH  A
    48A2: 52 FB    MOV   A,[X-5]
    48A4: 08       PUSH  A
    48A5: 52 FC    MOV   A,[X-4]
    48A7: 08       PUSH  A
    48A8: 52 00    MOV   A,[X+0]
    48AA: 08       PUSH  A
    48AB: 52 01    MOV   A,[X+1]
    48AD: 08       PUSH  A
    48AE: 52 02    MOV   A,[X+2]
    48B0: 08       PUSH  A
    48B1: 52 03    MOV   A,[X+3]
    48B3: 08       PUSH  A
    48B4: 7C 3A 68 LCALL 0x3A68
    48B7: 18       POP   A
    48B8: 53 96    MOV   [__r3],A
    48BA: 18       POP   A
    48BB: 53 97    MOV   [__r2],A
    48BD: 18       POP   A
    48BE: 53 98    MOV   [__r1],A
    48C0: 18       POP   A
    48C1: 38 FC    ADD   SP,0xFC
    48C3: 08       PUSH  A
    48C4: 51 98    MOV   A,[__r1]
    48C6: 08       PUSH  A
    48C7: 51 97    MOV   A,[__r2]
    48C9: 08       PUSH  A
    48CA: 51 96    MOV   A,[__r3]
    48CC: 08       PUSH  A
    48CD: 9B F1    CALL  _satan
    48CF: 38 FC    ADD   SP,0xFC
    48D1: 62 D0 00 MOV   REG[0xD0],0x0
    48D4: 51 99    MOV   A,[__r0]
    48D6: 08       PUSH  A
    48D7: 51 98    MOV   A,[__r1]
    48D9: 08       PUSH  A
    48DA: 51 97    MOV   A,[__r2]
    48DC: 08       PUSH  A
    48DD: 51 96    MOV   A,[__r3]
    48DF: 08       PUSH  A
    48E0: 50 3F    MOV   A,0x3F
    48E2: 08       PUSH  A
    48E3: 50 C9    MOV   A,0xC9
    48E5: 08       PUSH  A
    48E6: 50 0F    MOV   A,0xF
    48E8: 08       PUSH  A
    48E9: 50 DB    MOV   A,0xDB
    48EB: 08       PUSH  A
    48EC: 7C 3C 75 LCALL 0x3C75
    48EF: 18       POP   A
    48F0: 54 03    MOV   [X+3],A
    48F2: 18       POP   A
    48F3: 54 02    MOV   [X+2],A
    48F5: 18       POP   A
    48F6: 54 01    MOV   [X+1],A
    48F8: 18       POP   A
    48F9: 54 00    MOV   [X+0],A
    48FB: 38 FC    ADD   SP,0xFC
    48FD: 80 4C    JMP   0x494A
    48FF: 62 D0 00 MOV   REG[0xD0],0x0
    4902: 52 00    MOV   A,[X+0]
    4904: 08       PUSH  A
    4905: 52 01    MOV   A,[X+1]
    4907: 08       PUSH  A
    4908: 52 02    MOV   A,[X+2]
    490A: 08       PUSH  A
    490B: 52 03    MOV   A,[X+3]
    490D: 08       PUSH  A
    490E: 52 F9    MOV   A,[X-7]
    4910: 08       PUSH  A
    4911: 52 FA    MOV   A,[X-6]
    4913: 08       PUSH  A
    4914: 52 FB    MOV   A,[X-5]
    4916: 08       PUSH  A
    4917: 52 FC    MOV   A,[X-4]
    4919: 08       PUSH  A
    491A: 7C 3A 68 LCALL 0x3A68
    491D: 18       POP   A
    491E: 53 96    MOV   [__r3],A
    4920: 18       POP   A
    4921: 53 97    MOV   [__r2],A
    4923: 18       POP   A
    4924: 53 98    MOV   [__r1],A
    4926: 18       POP   A
    4927: 38 FC    ADD   SP,0xFC
    4929: 08       PUSH  A
    492A: 51 98    MOV   A,[__r1]
    492C: 08       PUSH  A
    492D: 51 97    MOV   A,[__r2]
    492F: 08       PUSH  A
    4930: 51 96    MOV   A,[__r3]
    4932: 08       PUSH  A
    4933: 9B 8B    CALL  _satan
    4935: 38 FC    ADD   SP,0xFC
    4937: 62 D0 00 MOV   REG[0xD0],0x0
    493A: 51 99    MOV   A,[__r0]
    493C: 54 00    MOV   [X+0],A
    493E: 51 98    MOV   A,[__r1]
    4940: 54 01    MOV   [X+1],A
    4942: 51 97    MOV   A,[__r2]
    4944: 54 02    MOV   [X+2],A
    4946: 51 96    MOV   A,[__r3]
    4948: 54 03    MOV   [X+3],A
    494A: 50 00    MOV   A,0x0
    494C: 3B 04    CMP   A,[X+4]
    494E: 6D       RRC   A
    494F: 33 04    XOR   A,[X+4]
    4951: 31 00    XOR   A,0x0
    4953: 6A       RLC   A
    4954: D0 16    JNC   0x496B
    4956: 62 D0 00 MOV   REG[0xD0],0x0
    4959: 52 00    MOV   A,[X+0]
    495B: 53 99    MOV   [__r0],A
    495D: 52 01    MOV   A,[X+1]
    495F: 53 98    MOV   [__r1],A
    4961: 52 02    MOV   A,[X+2]
    4963: 53 97    MOV   [__r2],A
    4965: 52 03    MOV   A,[X+3]
    4967: 53 96    MOV   [__r3],A
    4969: 80 17    JMP   0x4981
    496B: 62 D0 00 MOV   REG[0xD0],0x0
    496E: 52 00    MOV   A,[X+0]
    4970: 53 99    MOV   [__r0],A
    4972: 52 01    MOV   A,[X+1]
    4974: 53 98    MOV   [__r1],A
    4976: 52 02    MOV   A,[X+2]
    4978: 53 97    MOV   [__r2],A
    497A: 52 03    MOV   A,[X+3]
    497C: 53 96    MOV   [__r3],A
    497E: 36 99 80 XOR   [__r0],0x80
    4981: 38 FB    ADD   SP,0xFB
    4983: 20       POP   X
    4984: 7F       RET   
_atanf:
    4985: 10       PUSH  X
    4986: 4F       MOV   X,SP
    4987: 50 00    MOV   A,0x0
    4989: 08       PUSH  A
    498A: 08       PUSH  A
    498B: 08       PUSH  A
    498C: 08       PUSH  A
    498D: 52 F9    MOV   A,[X-7]
    498F: 08       PUSH  A
    4990: 52 FA    MOV   A,[X-6]
    4992: 08       PUSH  A
    4993: 52 FB    MOV   A,[X-5]
    4995: 08       PUSH  A
    4996: 52 FC    MOV   A,[X-4]
    4998: 08       PUSH  A
    4999: 62 D0 00 MOV   REG[0xD0],0x0
    499C: 7C 3A 0B LCALL 0x3A0B
    499F: 38 F8    ADD   SP,0xF8
    49A1: 39 FF    CMP   A,0xFF
    49A3: A0 14    JZ    0x49B8
    49A5: 52 F9    MOV   A,[X-7]
    49A7: 08       PUSH  A
    49A8: 52 FA    MOV   A,[X-6]
    49AA: 08       PUSH  A
    49AB: 52 FB    MOV   A,[X-5]
    49AD: 08       PUSH  A
    49AE: 52 FC    MOV   A,[X-4]
    49B0: 08       PUSH  A
    49B1: 7C 44 C0 LCALL _satan
    49B4: 38 FC    ADD   SP,0xFC
    49B6: 80 2E    JMP   0x49E5
    49B8: 62 D0 00 MOV   REG[0xD0],0x0
    49BB: 52 F9    MOV   A,[X-7]
    49BD: 53 99    MOV   [__r0],A
    49BF: 52 FA    MOV   A,[X-6]
    49C1: 53 98    MOV   [__r1],A
    49C3: 52 FB    MOV   A,[X-5]
    49C5: 53 97    MOV   [__r2],A
    49C7: 52 FC    MOV   A,[X-4]
    49C9: 53 96    MOV   [__r3],A
    49CB: 36 99 80 XOR   [__r0],0x80
    49CE: 51 99    MOV   A,[__r0]
    49D0: 08       PUSH  A
    49D1: 51 98    MOV   A,[__r1]
    49D3: 08       PUSH  A
    49D4: 51 97    MOV   A,[__r2]
    49D6: 08       PUSH  A
    49D7: 51 96    MOV   A,[__r3]
    49D9: 08       PUSH  A
    49DA: 7C 44 C0 LCALL _satan
    49DD: 38 FC    ADD   SP,0xFC
    49DF: 62 D0 00 MOV   REG[0xD0],0x0
    49E2: 36 99 80 XOR   [__r0],0x80
    49E5: 20       POP   X
    49E6: 7F       RET   
_cosf:
    49E7: 10       PUSH  X
    49E8: 4F       MOV   X,SP
    49E9: 50 00    MOV   A,0x0
    49EB: 08       PUSH  A
    49EC: 08       PUSH  A
    49ED: 08       PUSH  A
    49EE: 08       PUSH  A
    49EF: 52 F9    MOV   A,[X-7]
    49F1: 08       PUSH  A
    49F2: 52 FA    MOV   A,[X-6]
    49F4: 08       PUSH  A
    49F5: 52 FB    MOV   A,[X-5]
    49F7: 08       PUSH  A
    49F8: 52 FC    MOV   A,[X-4]
    49FA: 08       PUSH  A
    49FB: 62 D0 00 MOV   REG[0xD0],0x0
    49FE: 7C 3A 0B LCALL 0x3A0B
    4A01: 38 F8    ADD   SP,0xF8
    4A03: 39 FF    CMP   A,0xFF
    4A05: A0 17    JZ    0x4A1D
    4A07: 50 01    MOV   A,0x1
    4A09: 08       PUSH  A
    4A0A: 52 F9    MOV   A,[X-7]
    4A0C: 08       PUSH  A
    4A0D: 52 FA    MOV   A,[X-6]
    4A0F: 08       PUSH  A
    4A10: 52 FB    MOV   A,[X-5]
    4A12: 08       PUSH  A
    4A13: 52 FC    MOV   A,[X-4]
    4A15: 08       PUSH  A
    4A16: 7C 4E EE LCALL _sinus
    4A19: 38 FB    ADD   SP,0xFB
    4A1B: 80 2B    JMP   0x4A47
    4A1D: 50 01    MOV   A,0x1
    4A1F: 08       PUSH  A
    4A20: 62 D0 00 MOV   REG[0xD0],0x0
    4A23: 52 F9    MOV   A,[X-7]
    4A25: 53 99    MOV   [__r0],A
    4A27: 52 FA    MOV   A,[X-6]
    4A29: 53 98    MOV   [__r1],A
    4A2B: 52 FB    MOV   A,[X-5]
    4A2D: 53 97    MOV   [__r2],A
    4A2F: 52 FC    MOV   A,[X-4]
    4A31: 53 96    MOV   [__r3],A
    4A33: 36 99 80 XOR   [__r0],0x80
    4A36: 51 99    MOV   A,[__r0]
    4A38: 08       PUSH  A
    4A39: 51 98    MOV   A,[__r1]
    4A3B: 08       PUSH  A
    4A3C: 51 97    MOV   A,[__r2]
    4A3E: 08       PUSH  A
    4A3F: 51 96    MOV   A,[__r3]
    4A41: 08       PUSH  A
    4A42: 7C 4E EE LCALL _sinus
    4A45: 38 FB    ADD   SP,0xFB
    4A47: 20       POP   X
    4A48: 7F       RET   
_floorf:
    4A49: 10       PUSH  X
    4A4A: 4F       MOV   X,SP
    4A4B: 38 08    ADD   SP,0x8
    4A4D: 52 F9    MOV   A,[X-7]
    4A4F: 54 04    MOV   [X+4],A
    4A51: 52 FA    MOV   A,[X-6]
    4A53: 54 05    MOV   [X+5],A
    4A55: 52 FB    MOV   A,[X-5]
    4A57: 54 06    MOV   [X+6],A
    4A59: 52 FC    MOV   A,[X-4]
    4A5B: 54 07    MOV   [X+7],A
    4A5D: 52 F9    MOV   A,[X-7]
    4A5F: 08       PUSH  A
    4A60: 52 FA    MOV   A,[X-6]
    4A62: 08       PUSH  A
    4A63: 52 FB    MOV   A,[X-5]
    4A65: 08       PUSH  A
    4A66: 52 FC    MOV   A,[X-4]
    4A68: 08       PUSH  A
    4A69: 62 D0 00 MOV   REG[0xD0],0x0
    4A6C: 7C 37 FA LCALL 0x37FA
    4A6F: 18       POP   A
    4A70: 54 03    MOV   [X+3],A
    4A72: 18       POP   A
    4A73: 54 02    MOV   [X+2],A
    4A75: 18       POP   A
    4A76: 54 01    MOV   [X+1],A
    4A78: 18       POP   A
    4A79: 54 00    MOV   [X+0],A
    4A7B: 52 00    MOV   A,[X+0]
    4A7D: 08       PUSH  A
    4A7E: 52 01    MOV   A,[X+1]
    4A80: 08       PUSH  A
    4A81: 52 02    MOV   A,[X+2]
    4A83: 08       PUSH  A
    4A84: 52 03    MOV   A,[X+3]
    4A86: 08       PUSH  A
    4A87: 7C 3D 4F LCALL 0x3D4F
    4A8A: 18       POP   A
    4A8B: 53 96    MOV   [__r3],A
    4A8D: 18       POP   A
    4A8E: 53 97    MOV   [__r2],A
    4A90: 18       POP   A
    4A91: 53 98    MOV   [__r1],A
    4A93: 18       POP   A
    4A94: 53 99    MOV   [__r0],A
    4A96: 52 F9    MOV   A,[X-7]
    4A98: 08       PUSH  A
    4A99: 52 FA    MOV   A,[X-6]
    4A9B: 08       PUSH  A
    4A9C: 52 FB    MOV   A,[X-5]
    4A9E: 08       PUSH  A
    4A9F: 52 FC    MOV   A,[X-4]
    4AA1: 08       PUSH  A
    4AA2: 51 99    MOV   A,[__r0]
    4AA4: 08       PUSH  A
    4AA5: 51 98    MOV   A,[__r1]
    4AA7: 08       PUSH  A
    4AA8: 51 97    MOV   A,[__r2]
    4AAA: 08       PUSH  A
    4AAB: 51 96    MOV   A,[__r3]
    4AAD: 08       PUSH  A
    4AAE: 7C 3A 0B LCALL 0x3A0B
    4AB1: 38 F8    ADD   SP,0xF8
    4AB3: 39 00    CMP   A,0x0
    4AB5: A0 17    JZ    0x4ACD
    4AB7: 52 05    MOV   A,[X+5]
    4AB9: 21 80    AND   A,0x80
    4ABB: 53 98    MOV   [__r1],A
    4ABD: 52 04    MOV   A,[X+4]
    4ABF: 21 7F    AND   A,0x7F
    4AC1: 53 99    MOV   [__r0],A
    4AC3: 51 98    MOV   A,[__r1]
    4AC5: 11 80    SUB   A,0x80
    4AC7: 51 99    MOV   A,[__r0]
    4AC9: 19 4B    SBB   A,0x4B
    4ACB: C0 16    JC    0x4AE2
    4ACD: 62 D0 00 MOV   REG[0xD0],0x0
    4AD0: 52 F9    MOV   A,[X-7]
    4AD2: 53 99    MOV   [__r0],A
    4AD4: 52 FA    MOV   A,[X-6]
    4AD6: 53 98    MOV   [__r1],A
    4AD8: 52 FB    MOV   A,[X-5]
    4ADA: 53 97    MOV   [__r2],A
    4ADC: 52 FC    MOV   A,[X-4]
    4ADE: 53 96    MOV   [__r3],A
    4AE0: 80 84    JMP   0x4B65
    4AE2: 50 00    MOV   A,0x0
    4AE4: 08       PUSH  A
    4AE5: 08       PUSH  A
    4AE6: 08       PUSH  A
    4AE7: 08       PUSH  A
    4AE8: 52 F9    MOV   A,[X-7]
    4AEA: 08       PUSH  A
    4AEB: 52 FA    MOV   A,[X-6]
    4AED: 08       PUSH  A
    4AEE: 52 FB    MOV   A,[X-5]
    4AF0: 08       PUSH  A
    4AF1: 52 FC    MOV   A,[X-4]
    4AF3: 08       PUSH  A
    4AF4: 62 D0 00 MOV   REG[0xD0],0x0
    4AF7: 7C 3A 0B LCALL 0x3A0B
    4AFA: 38 F8    ADD   SP,0xF8
    4AFC: 39 00    CMP   A,0x0
    4AFE: A0 22    JZ    0x4B21
    4B00: 39 01    CMP   A,0x1
    4B02: B0 1E    JNZ   0x4B21
    4B04: 52 00    MOV   A,[X+0]
    4B06: 08       PUSH  A
    4B07: 52 01    MOV   A,[X+1]
    4B09: 08       PUSH  A
    4B0A: 52 02    MOV   A,[X+2]
    4B0C: 08       PUSH  A
    4B0D: 52 03    MOV   A,[X+3]
    4B0F: 08       PUSH  A
    4B10: 7C 3D 4F LCALL 0x3D4F
    4B13: 18       POP   A
    4B14: 53 96    MOV   [__r3],A
    4B16: 18       POP   A
    4B17: 53 97    MOV   [__r2],A
    4B19: 18       POP   A
    4B1A: 53 98    MOV   [__r1],A
    4B1C: 18       POP   A
    4B1D: 53 99    MOV   [__r0],A
    4B1F: 80 45    JMP   0x4B65
    4B21: 62 D0 00 MOV   REG[0xD0],0x0
    4B24: 52 03    MOV   A,[X+3]
    4B26: 11 01    SUB   A,0x1
    4B28: 53 96    MOV   [__r3],A
    4B2A: 52 02    MOV   A,[X+2]
    4B2C: 19 00    SBB   A,0x0
    4B2E: 53 97    MOV   [__r2],A
    4B30: 52 01    MOV   A,[X+1]
    4B32: 19 00    SBB   A,0x0
    4B34: 53 98    MOV   [__r1],A
    4B36: 52 00    MOV   A,[X+0]
    4B38: 19 00    SBB   A,0x0
    4B3A: 53 99    MOV   [__r0],A
    4B3C: 54 00    MOV   [X+0],A
    4B3E: 51 98    MOV   A,[__r1]
    4B40: 54 01    MOV   [X+1],A
    4B42: 51 97    MOV   A,[__r2]
    4B44: 54 02    MOV   [X+2],A
    4B46: 51 96    MOV   A,[__r3]
    4B48: 54 03    MOV   [X+3],A
    4B4A: 51 99    MOV   A,[__r0]
    4B4C: 08       PUSH  A
    4B4D: 51 98    MOV   A,[__r1]
    4B4F: 08       PUSH  A
    4B50: 51 97    MOV   A,[__r2]
    4B52: 08       PUSH  A
    4B53: 51 96    MOV   A,[__r3]
    4B55: 08       PUSH  A
    4B56: 7C 3D 4F LCALL 0x3D4F
    4B59: 18       POP   A
    4B5A: 53 96    MOV   [__r3],A
    4B5C: 18       POP   A
    4B5D: 53 97    MOV   [__r2],A
    4B5F: 18       POP   A
    4B60: 53 98    MOV   [__r1],A
    4B62: 18       POP   A
    4B63: 53 99    MOV   [__r0],A
    4B65: 38 F8    ADD   SP,0xF8
    4B67: 20       POP   X
    4B68: 7F       RET   
_frexpf:
    4B69: 10       PUSH  X
    4B6A: 4F       MOV   X,SP
    4B6B: 38 08    ADD   SP,0x8
    4B6D: 50 00    MOV   A,0x0
    4B6F: 08       PUSH  A
    4B70: 08       PUSH  A
    4B71: 08       PUSH  A
    4B72: 08       PUSH  A
    4B73: 52 F9    MOV   A,[X-7]
    4B75: 08       PUSH  A
    4B76: 52 FA    MOV   A,[X-6]
    4B78: 08       PUSH  A
    4B79: 52 FB    MOV   A,[X-5]
    4B7B: 08       PUSH  A
    4B7C: 52 FC    MOV   A,[X-4]
    4B7E: 08       PUSH  A
    4B7F: 62 D0 00 MOV   REG[0xD0],0x0
    4B82: 7C 3A 0B LCALL 0x3A0B
    4B85: 38 F8    ADD   SP,0xF8
    4B87: 39 00    CMP   A,0x0
    4B89: B0 1D    JNZ   0x4BA7
    4B8B: 52 F8    MOV   A,[X-8]
    4B8D: 53 98    MOV   [__r1],A
    4B8F: 52 F7    MOV   A,[X-9]
    4B91: 60 D5    MOV   REG[0xD5],A
    4B93: 50 00    MOV   A,0x0
    4B95: 3F 98    MVI   [__r1],A
    4B97: 3F 98    MVI   [__r1],A
    4B99: 55 99 00 MOV   [__r0],0x0
    4B9C: 55 98 00 MOV   [__r1],0x0
    4B9F: 55 97 00 MOV   [__r2],0x0
    4BA2: 55 96 00 MOV   [__r3],0x0
    4BA5: 80 95    JMP   0x4C3B
    4BA7: 52 F9    MOV   A,[X-7]
    4BA9: 54 00    MOV   [X+0],A
    4BAB: 52 FA    MOV   A,[X-6]
    4BAD: 54 01    MOV   [X+1],A
    4BAF: 52 FB    MOV   A,[X-5]
    4BB1: 54 02    MOV   [X+2],A
    4BB3: 52 FC    MOV   A,[X-4]
    4BB5: 54 03    MOV   [X+3],A
    4BB7: 66 01    ASL   [X+1]
    4BB9: 6C 00    RLC   [X+0]
    4BBB: 62 D0 00 MOV   REG[0xD0],0x0
    4BBE: 52 00    MOV   A,[X+0]
    4BC0: 53 98    MOV   [__r1],A
    4BC2: 55 99 00 MOV   [__r0],0x0
    4BC5: 16 98 7E SUB   [__r1],0x7E
    4BC8: 1E 99 00 SBB   [__r0],0x0
    4BCB: 52 F8    MOV   A,[X-8]
    4BCD: 53 96    MOV   [__r3],A
    4BCF: 52 F7    MOV   A,[X-9]
    4BD1: 60 D5    MOV   REG[0xD5],A
    4BD3: 51 99    MOV   A,[__r0]
    4BD5: 3F 96    MVI   [__r3],A
    4BD7: 51 98    MOV   A,[__r1]
    4BD9: 3F 96    MVI   [__r3],A
    4BDB: 56 00 7E MOV   [X+0],0x7E
    4BDE: 70 FB    AND   F,0xFB
    4BE0: 6F 00    RRC   [X+0]
    4BE2: 6F 01    RRC   [X+1]
    4BE4: 50 00    MOV   A,0x0
    4BE6: 08       PUSH  A
    4BE7: 08       PUSH  A
    4BE8: 08       PUSH  A
    4BE9: 08       PUSH  A
    4BEA: 52 F9    MOV   A,[X-7]
    4BEC: 08       PUSH  A
    4BED: 52 FA    MOV   A,[X-6]
    4BEF: 08       PUSH  A
    4BF0: 52 FB    MOV   A,[X-5]
    4BF2: 08       PUSH  A
    4BF3: 52 FC    MOV   A,[X-4]
    4BF5: 08       PUSH  A
    4BF6: 7C 3A 0B LCALL 0x3A0B
    4BF9: 38 F8    ADD   SP,0xF8
    4BFB: 39 00    CMP   A,0x0
    4BFD: A0 1A    JZ    0x4C18
    4BFF: 39 01    CMP   A,0x1
    4C01: A0 16    JZ    0x4C18
    4C03: 52 00    MOV   A,[X+0]
    4C05: 54 04    MOV   [X+4],A
    4C07: 52 01    MOV   A,[X+1]
    4C09: 54 05    MOV   [X+5],A
    4C0B: 52 02    MOV   A,[X+2]
    4C0D: 54 06    MOV   [X+6],A
    4C0F: 52 03    MOV   A,[X+3]
    4C11: 54 07    MOV   [X+7],A
    4C13: 37 04 80 XOR   [X+4],0x80
    4C16: 80 11    JMP   0x4C28
    4C18: 52 00    MOV   A,[X+0]
    4C1A: 54 04    MOV   [X+4],A
    4C1C: 52 01    MOV   A,[X+1]
    4C1E: 54 05    MOV   [X+5],A
    4C20: 52 02    MOV   A,[X+2]
    4C22: 54 06    MOV   [X+6],A
    4C24: 52 03    MOV   A,[X+3]
    4C26: 54 07    MOV   [X+7],A
    4C28: 62 D0 00 MOV   REG[0xD0],0x0
    4C2B: 52 04    MOV   A,[X+4]
    4C2D: 53 99    MOV   [__r0],A
    4C2F: 52 05    MOV   A,[X+5]
    4C31: 53 98    MOV   [__r1],A
    4C33: 52 06    MOV   A,[X+6]
    4C35: 53 97    MOV   [__r2],A
    4C37: 52 07    MOV   A,[X+7]
    4C39: 53 96    MOV   [__r3],A
    4C3B: 38 F8    ADD   SP,0xF8
    4C3D: 20       POP   X
    4C3E: 7F       RET   
_logf:
    4C3F: 10       PUSH  X
    4C40: 4F       MOV   X,SP
    4C41: 38 06    ADD   SP,0x6
    4C43: 50 00    MOV   A,0x0
    4C45: 08       PUSH  A
    4C46: 08       PUSH  A
    4C47: 08       PUSH  A
    4C48: 08       PUSH  A
    4C49: 52 F9    MOV   A,[X-7]
    4C4B: 08       PUSH  A
    4C4C: 52 FA    MOV   A,[X-6]
    4C4E: 08       PUSH  A
    4C4F: 52 FB    MOV   A,[X-5]
    4C51: 08       PUSH  A
    4C52: 52 FC    MOV   A,[X-4]
    4C54: 08       PUSH  A
    4C55: 62 D0 00 MOV   REG[0xD0],0x0
    4C58: 7C 3A 0B LCALL 0x3A0B
    4C5B: 38 F8    ADD   SP,0xF8
    4C5D: 39 01    CMP   A,0x1
    4C5F: A0 1B    JZ    0x4C7B
    4C61: 62 D0 06 MOV   REG[0xD0],0x6
    4C64: 55 9D 01 MOV   [errno+1],0x1
    4C67: 55 9C 00 MOV   [errno],0x0
    4C6A: 62 D0 00 MOV   REG[0xD0],0x0
    4C6D: 55 99 FF MOV   [__r0],0xFF
    4C70: 55 98 7F MOV   [__r1],0x7F
    4C73: 55 97 FF MOV   [__r2],0xFF
    4C76: 55 96 FF MOV   [__r3],0xFF
    4C79: 82 70    JMP   0x4EEA
    4C7B: 62 D0 00 MOV   REG[0xD0],0x0
    4C7E: 5A 98    MOV   [__r1],X
    4C80: 06 98 04 ADD   [__r1],0x4
    4C83: 50 07    MOV   A,0x7
    4C85: 08       PUSH  A
    4C86: 51 98    MOV   A,[__r1]
    4C88: 08       PUSH  A
    4C89: 52 F9    MOV   A,[X-7]
    4C8B: 08       PUSH  A
    4C8C: 52 FA    MOV   A,[X-6]
    4C8E: 08       PUSH  A
    4C8F: 52 FB    MOV   A,[X-5]
    4C91: 08       PUSH  A
    4C92: 52 FC    MOV   A,[X-4]
    4C94: 08       PUSH  A
    4C95: 7C 4B 69 LCALL _frexpf
    4C98: 38 FA    ADD   SP,0xFA
    4C9A: 62 D0 00 MOV   REG[0xD0],0x0
    4C9D: 51 99    MOV   A,[__r0]
    4C9F: 54 F9    MOV   [X-7],A
    4CA1: 51 98    MOV   A,[__r1]
    4CA3: 54 FA    MOV   [X-6],A
    4CA5: 51 97    MOV   A,[__r2]
    4CA7: 54 FB    MOV   [X-5],A
    4CA9: 51 96    MOV   A,[__r3]
    4CAB: 54 FC    MOV   [X-4],A
    4CAD: 50 3F    MOV   A,0x3F
    4CAF: 08       PUSH  A
    4CB0: 50 35    MOV   A,0x35
    4CB2: 08       PUSH  A
    4CB3: 50 04    MOV   A,0x4
    4CB5: 08       PUSH  A
    4CB6: 50 F3    MOV   A,0xF3
    4CB8: 08       PUSH  A
    4CB9: 52 F9    MOV   A,[X-7]
    4CBB: 08       PUSH  A
    4CBC: 52 FA    MOV   A,[X-6]
    4CBE: 08       PUSH  A
    4CBF: 52 FB    MOV   A,[X-5]
    4CC1: 08       PUSH  A
    4CC2: 52 FC    MOV   A,[X-4]
    4CC4: 08       PUSH  A
    4CC5: 7C 3A 0B LCALL 0x3A0B
    4CC8: 38 F8    ADD   SP,0xF8
    4CCA: 39 00    CMP   A,0x0
    4CCC: A0 33    JZ    0x4D00
    4CCE: 39 01    CMP   A,0x1
    4CD0: A0 2F    JZ    0x4D00
    4CD2: 52 F9    MOV   A,[X-7]
    4CD4: 08       PUSH  A
    4CD5: 52 FA    MOV   A,[X-6]
    4CD7: 08       PUSH  A
    4CD8: 52 FB    MOV   A,[X-5]
    4CDA: 08       PUSH  A
    4CDB: 52 FC    MOV   A,[X-4]
    4CDD: 08       PUSH  A
    4CDE: 52 F9    MOV   A,[X-7]
    4CE0: 08       PUSH  A
    4CE1: 52 FA    MOV   A,[X-6]
    4CE3: 08       PUSH  A
    4CE4: 52 FB    MOV   A,[X-5]
    4CE6: 08       PUSH  A
    4CE7: 52 FC    MOV   A,[X-4]
    4CE9: 08       PUSH  A
    4CEA: 7C 39 0B LCALL 0x390B
    4CED: 18       POP   A
    4CEE: 54 FC    MOV   [X-4],A
    4CF0: 18       POP   A
    4CF1: 54 FB    MOV   [X-5],A
    4CF3: 18       POP   A
    4CF4: 54 FA    MOV   [X-6],A
    4CF6: 18       POP   A
    4CF7: 54 F9    MOV   [X-7],A
    4CF9: 38 FC    ADD   SP,0xFC
    4CFB: 7B 05    DEC   [X+5]
    4CFD: 1F 04 00 SBB   [X+4],0x0
    4D00: 62 D0 00 MOV   REG[0xD0],0x0
    4D03: 50 3F    MOV   A,0x3F
    4D05: 08       PUSH  A
    4D06: 50 80    MOV   A,0x80
    4D08: 08       PUSH  A
    4D09: 50 00    MOV   A,0x0
    4D0B: 08       PUSH  A
    4D0C: 08       PUSH  A
    4D0D: 52 F9    MOV   A,[X-7]
    4D0F: 08       PUSH  A
    4D10: 52 FA    MOV   A,[X-6]
    4D12: 08       PUSH  A
    4D13: 52 FB    MOV   A,[X-5]
    4D15: 08       PUSH  A
    4D16: 52 FC    MOV   A,[X-4]
    4D18: 08       PUSH  A
    4D19: 7C 3C 75 LCALL 0x3C75
    4D1C: 18       POP   A
    4D1D: 53 96    MOV   [__r3],A
    4D1F: 18       POP   A
    4D20: 53 97    MOV   [__r2],A
    4D22: 18       POP   A
    4D23: 53 98    MOV   [__r1],A
    4D25: 18       POP   A
    4D26: 53 99    MOV   [__r0],A
    4D28: 38 FC    ADD   SP,0xFC
    4D2A: 50 3F    MOV   A,0x3F
    4D2C: 08       PUSH  A
    4D2D: 50 80    MOV   A,0x80
    4D2F: 08       PUSH  A
    4D30: 50 00    MOV   A,0x0
    4D32: 08       PUSH  A
    4D33: 08       PUSH  A
    4D34: 52 F9    MOV   A,[X-7]
    4D36: 08       PUSH  A
    4D37: 52 FA    MOV   A,[X-6]
    4D39: 08       PUSH  A
    4D3A: 52 FB    MOV   A,[X-5]
    4D3C: 08       PUSH  A
    4D3D: 52 FC    MOV   A,[X-4]
    4D3F: 08       PUSH  A
    4D40: 7C 39 0B LCALL 0x390B
    4D43: 18       POP   A
    4D44: 53 92    MOV   [__r7],A
    4D46: 18       POP   A
    4D47: 53 93    MOV   [__r6],A
    4D49: 18       POP   A
    4D4A: 53 94    MOV   [__r5],A
    4D4C: 18       POP   A
    4D4D: 38 FC    ADD   SP,0xFC
    4D4F: 08       PUSH  A
    4D50: 51 94    MOV   A,[__r5]
    4D52: 08       PUSH  A
    4D53: 51 93    MOV   A,[__r6]
    4D55: 08       PUSH  A
    4D56: 51 92    MOV   A,[__r7]
    4D58: 08       PUSH  A
    4D59: 51 99    MOV   A,[__r0]
    4D5B: 08       PUSH  A
    4D5C: 51 98    MOV   A,[__r1]
    4D5E: 08       PUSH  A
    4D5F: 51 97    MOV   A,[__r2]
    4D61: 08       PUSH  A
    4D62: 51 96    MOV   A,[__r3]
    4D64: 08       PUSH  A
    4D65: 7C 3A 68 LCALL 0x3A68
    4D68: 18       POP   A
    4D69: 54 FC    MOV   [X-4],A
    4D6B: 18       POP   A
    4D6C: 54 FB    MOV   [X-5],A
    4D6E: 18       POP   A
    4D6F: 54 FA    MOV   [X-6],A
    4D71: 18       POP   A
    4D72: 54 F9    MOV   [X-7],A
    4D74: 38 FC    ADD   SP,0xFC
    4D76: 52 F9    MOV   A,[X-7]
    4D78: 08       PUSH  A
    4D79: 52 FA    MOV   A,[X-6]
    4D7B: 08       PUSH  A
    4D7C: 52 FB    MOV   A,[X-5]
    4D7E: 08       PUSH  A
    4D7F: 52 FC    MOV   A,[X-4]
    4D81: 08       PUSH  A
    4D82: 52 F9    MOV   A,[X-7]
    4D84: 08       PUSH  A
    4D85: 52 FA    MOV   A,[X-6]
    4D87: 08       PUSH  A
    4D88: 52 FB    MOV   A,[X-5]
    4D8A: 08       PUSH  A
    4D8B: 52 FC    MOV   A,[X-4]
    4D8D: 08       PUSH  A
    4D8E: 7C 3B 4B LCALL 0x3B4B
    4D91: 18       POP   A
    4D92: 54 03    MOV   [X+3],A
    4D94: 18       POP   A
    4D95: 54 02    MOV   [X+2],A
    4D97: 18       POP   A
    4D98: 54 01    MOV   [X+1],A
    4D9A: 18       POP   A
    4D9B: 54 00    MOV   [X+0],A
    4D9D: 38 FC    ADD   SP,0xFC
    4D9F: 52 00    MOV   A,[X+0]
    4DA1: 08       PUSH  A
    4DA2: 52 01    MOV   A,[X+1]
    4DA4: 08       PUSH  A
    4DA5: 52 02    MOV   A,[X+2]
    4DA7: 08       PUSH  A
    4DA8: 52 03    MOV   A,[X+3]
    4DAA: 08       PUSH  A
    4DAB: 50 3F    MOV   A,0x3F
    4DAD: 08       PUSH  A
    4DAE: 50 65    MOV   A,0x65
    4DB0: 08       PUSH  A
    4DB1: 50 42    MOV   A,0x42
    4DB3: 08       PUSH  A
    4DB4: 50 26    MOV   A,0x26
    4DB6: 08       PUSH  A
    4DB7: 7C 3B 4B LCALL 0x3B4B
    4DBA: 18       POP   A
    4DBB: 53 96    MOV   [__r3],A
    4DBD: 18       POP   A
    4DBE: 53 97    MOV   [__r2],A
    4DC0: 18       POP   A
    4DC1: 53 98    MOV   [__r1],A
    4DC3: 18       POP   A
    4DC4: 53 99    MOV   [__r0],A
    4DC6: 38 FC    ADD   SP,0xFC
    4DC8: 50 40    MOV   A,0x40
    4DCA: 08       PUSH  A
    4DCB: 50 54    MOV   A,0x54
    4DCD: 08       PUSH  A
    4DCE: 50 11    MOV   A,0x11
    4DD0: 08       PUSH  A
    4DD1: 50 4E    MOV   A,0x4E
    4DD3: 08       PUSH  A
    4DD4: 51 99    MOV   A,[__r0]
    4DD6: 08       PUSH  A
    4DD7: 51 98    MOV   A,[__r1]
    4DD9: 08       PUSH  A
    4DDA: 51 97    MOV   A,[__r2]
    4DDC: 08       PUSH  A
    4DDD: 51 96    MOV   A,[__r3]
    4DDF: 08       PUSH  A
    4DE0: 7C 3C 75 LCALL 0x3C75
    4DE3: 18       POP   A
    4DE4: 53 96    MOV   [__r3],A
    4DE6: 18       POP   A
    4DE7: 53 97    MOV   [__r2],A
    4DE9: 18       POP   A
    4DEA: 53 98    MOV   [__r1],A
    4DEC: 18       POP   A
    4DED: 38 FC    ADD   SP,0xFC
    4DEF: 08       PUSH  A
    4DF0: 51 98    MOV   A,[__r1]
    4DF2: 08       PUSH  A
    4DF3: 51 97    MOV   A,[__r2]
    4DF5: 08       PUSH  A
    4DF6: 51 96    MOV   A,[__r3]
    4DF8: 08       PUSH  A
    4DF9: 52 F9    MOV   A,[X-7]
    4DFB: 08       PUSH  A
    4DFC: 52 FA    MOV   A,[X-6]
    4DFE: 08       PUSH  A
    4DFF: 52 FB    MOV   A,[X-5]
    4E01: 08       PUSH  A
    4E02: 52 FC    MOV   A,[X-4]
    4E04: 08       PUSH  A
    4E05: 7C 3B 4B LCALL 0x3B4B
    4E08: 18       POP   A
    4E09: 53 96    MOV   [__r3],A
    4E0B: 18       POP   A
    4E0C: 53 97    MOV   [__r2],A
    4E0E: 18       POP   A
    4E0F: 53 98    MOV   [__r1],A
    4E11: 18       POP   A
    4E12: 53 99    MOV   [__r0],A
    4E14: 38 FC    ADD   SP,0xFC
    4E16: 50 3F    MOV   A,0x3F
    4E18: 08       PUSH  A
    4E19: 50 D4    MOV   A,0xD4
    4E1B: 08       PUSH  A
    4E1C: 50 11    MOV   A,0x11
    4E1E: 08       PUSH  A
    4E1F: 50 4D    MOV   A,0x4D
    4E21: 08       PUSH  A
    4E22: 52 00    MOV   A,[X+0]
    4E24: 08       PUSH  A
    4E25: 52 01    MOV   A,[X+1]
    4E27: 08       PUSH  A
    4E28: 52 02    MOV   A,[X+2]
    4E2A: 08       PUSH  A
    4E2B: 52 03    MOV   A,[X+3]
    4E2D: 08       PUSH  A
    4E2E: 7C 3C 75 LCALL 0x3C75
    4E31: 18       POP   A
    4E32: 53 92    MOV   [__r7],A
    4E34: 18       POP   A
    4E35: 53 93    MOV   [__r6],A
    4E37: 18       POP   A
    4E38: 53 94    MOV   [__r5],A
    4E3A: 18       POP   A
    4E3B: 38 FC    ADD   SP,0xFC
    4E3D: 08       PUSH  A
    4E3E: 51 94    MOV   A,[__r5]
    4E40: 08       PUSH  A
    4E41: 51 93    MOV   A,[__r6]
    4E43: 08       PUSH  A
    4E44: 51 92    MOV   A,[__r7]
    4E46: 08       PUSH  A
    4E47: 51 99    MOV   A,[__r0]
    4E49: 08       PUSH  A
    4E4A: 51 98    MOV   A,[__r1]
    4E4C: 08       PUSH  A
    4E4D: 51 97    MOV   A,[__r2]
    4E4F: 08       PUSH  A
    4E50: 51 96    MOV   A,[__r3]
    4E52: 08       PUSH  A
    4E53: 7C 3A 68 LCALL 0x3A68
    4E56: 18       POP   A
    4E57: 53 96    MOV   [__r3],A
    4E59: 18       POP   A
    4E5A: 53 97    MOV   [__r2],A
    4E5C: 18       POP   A
    4E5D: 53 98    MOV   [__r1],A
    4E5F: 18       POP   A
    4E60: 53 99    MOV   [__r0],A
    4E62: 38 FC    ADD   SP,0xFC
    4E64: 52 05    MOV   A,[X+5]
    4E66: 53 92    MOV   [__r7],A
    4E68: 52 04    MOV   A,[X+4]
    4E6A: 53 93    MOV   [__r6],A
    4E6C: 47 93 80 TST   [__r6],0x80
    4E6F: A0 09    JZ    0x4E79
    4E71: 55 94 FF MOV   [__r5],0xFF
    4E74: 55 95 FF MOV   [__r4],0xFF
    4E77: 80 0A    JMP   0x4E82
    4E79: 62 D0 00 MOV   REG[0xD0],0x0
    4E7C: 55 94 00 MOV   [__r5],0x0
    4E7F: 55 95 00 MOV   [__r4],0x0
    4E82: 62 D0 00 MOV   REG[0xD0],0x0
    4E85: 51 95    MOV   A,[__r4]
    4E87: 08       PUSH  A
    4E88: 51 94    MOV   A,[__r5]
    4E8A: 08       PUSH  A
    4E8B: 51 93    MOV   A,[__r6]
    4E8D: 08       PUSH  A
    4E8E: 51 92    MOV   A,[__r7]
    4E90: 08       PUSH  A
    4E91: 7C 3D 4F LCALL 0x3D4F
    4E94: 18       POP   A
    4E95: 53 92    MOV   [__r7],A
    4E97: 18       POP   A
    4E98: 53 93    MOV   [__r6],A
    4E9A: 18       POP   A
    4E9B: 53 94    MOV   [__r5],A
    4E9D: 18       POP   A
    4E9E: 08       PUSH  A
    4E9F: 51 94    MOV   A,[__r5]
    4EA1: 08       PUSH  A
    4EA2: 51 93    MOV   A,[__r6]
    4EA4: 08       PUSH  A
    4EA5: 51 92    MOV   A,[__r7]
    4EA7: 08       PUSH  A
    4EA8: 50 3F    MOV   A,0x3F
    4EAA: 08       PUSH  A
    4EAB: 50 31    MOV   A,0x31
    4EAD: 08       PUSH  A
    4EAE: 50 72    MOV   A,0x72
    4EB0: 08       PUSH  A
    4EB1: 50 18    MOV   A,0x18
    4EB3: 08       PUSH  A
    4EB4: 7C 3B 4B LCALL 0x3B4B
    4EB7: 18       POP   A
    4EB8: 53 92    MOV   [__r7],A
    4EBA: 18       POP   A
    4EBB: 53 93    MOV   [__r6],A
    4EBD: 18       POP   A
    4EBE: 53 94    MOV   [__r5],A
    4EC0: 18       POP   A
    4EC1: 38 FC    ADD   SP,0xFC
    4EC3: 08       PUSH  A
    4EC4: 51 94    MOV   A,[__r5]
    4EC6: 08       PUSH  A
    4EC7: 51 93    MOV   A,[__r6]
    4EC9: 08       PUSH  A
    4ECA: 51 92    MOV   A,[__r7]
    4ECC: 08       PUSH  A
    4ECD: 51 99    MOV   A,[__r0]
    4ECF: 08       PUSH  A
    4ED0: 51 98    MOV   A,[__r1]
    4ED2: 08       PUSH  A
    4ED3: 51 97    MOV   A,[__r2]
    4ED5: 08       PUSH  A
    4ED6: 51 96    MOV   A,[__r3]
    4ED8: 08       PUSH  A
    4ED9: 7C 39 0B LCALL 0x390B
    4EDC: 18       POP   A
    4EDD: 53 96    MOV   [__r3],A
    4EDF: 18       POP   A
    4EE0: 53 97    MOV   [__r2],A
    4EE2: 18       POP   A
    4EE3: 53 98    MOV   [__r1],A
    4EE5: 18       POP   A
    4EE6: 53 99    MOV   [__r0],A
    4EE8: 38 FC    ADD   SP,0xFC
    4EEA: 38 FA    ADD   SP,0xFA
    4EEC: 20       POP   X
    4EED: 7F       RET   
_sinus:
    4EEE: 10       PUSH  X
    4EEF: 4F       MOV   X,SP
    4EF0: 38 08    ADD   SP,0x8
    4EF2: 52 F9    MOV   A,[X-7]
    4EF4: 08       PUSH  A
    4EF5: 52 FA    MOV   A,[X-6]
    4EF7: 08       PUSH  A
    4EF8: 52 FB    MOV   A,[X-5]
    4EFA: 08       PUSH  A
    4EFB: 52 FC    MOV   A,[X-4]
    4EFD: 08       PUSH  A
    4EFE: 50 3F    MOV   A,0x3F
    4F00: 08       PUSH  A
    4F01: 50 22    MOV   A,0x22
    4F03: 08       PUSH  A
    4F04: 50 F9    MOV   A,0xF9
    4F06: 08       PUSH  A
    4F07: 50 83    MOV   A,0x83
    4F09: 08       PUSH  A
    4F0A: 62 D0 00 MOV   REG[0xD0],0x0
    4F0D: 7C 3B 4B LCALL 0x3B4B
    4F10: 18       POP   A
    4F11: 54 FC    MOV   [X-4],A
    4F13: 18       POP   A
    4F14: 54 FB    MOV   [X-5],A
    4F16: 18       POP   A
    4F17: 54 FA    MOV   [X-6],A
    4F19: 18       POP   A
    4F1A: 54 F9    MOV   [X-7],A
    4F1C: 38 FC    ADD   SP,0xFC
    4F1E: 52 F9    MOV   A,[X-7]
    4F20: 08       PUSH  A
    4F21: 52 FA    MOV   A,[X-6]
    4F23: 08       PUSH  A
    4F24: 52 FB    MOV   A,[X-5]
    4F26: 08       PUSH  A
    4F27: 52 FC    MOV   A,[X-4]
    4F29: 08       PUSH  A
    4F2A: 7C 4A 49 LCALL _floorf
    4F2D: 38 FC    ADD   SP,0xFC
    4F2F: 62 D0 00 MOV   REG[0xD0],0x0
    4F32: 51 99    MOV   A,[__r0]
    4F34: 54 00    MOV   [X+0],A
    4F36: 51 98    MOV   A,[__r1]
    4F38: 54 01    MOV   [X+1],A
    4F3A: 51 97    MOV   A,[__r2]
    4F3C: 54 02    MOV   [X+2],A
    4F3E: 51 96    MOV   A,[__r3]
    4F40: 54 03    MOV   [X+3],A
    4F42: 52 00    MOV   A,[X+0]
    4F44: 08       PUSH  A
    4F45: 52 01    MOV   A,[X+1]
    4F47: 08       PUSH  A
    4F48: 52 02    MOV   A,[X+2]
    4F4A: 08       PUSH  A
    4F4B: 52 03    MOV   A,[X+3]
    4F4D: 08       PUSH  A
    4F4E: 52 F9    MOV   A,[X-7]
    4F50: 08       PUSH  A
    4F51: 52 FA    MOV   A,[X-6]
    4F53: 08       PUSH  A
    4F54: 52 FB    MOV   A,[X-5]
    4F56: 08       PUSH  A
    4F57: 52 FC    MOV   A,[X-4]
    4F59: 08       PUSH  A
    4F5A: 7C 3C 75 LCALL 0x3C75
    4F5D: 18       POP   A
    4F5E: 54 FC    MOV   [X-4],A
    4F60: 18       POP   A
    4F61: 54 FB    MOV   [X-5],A
    4F63: 18       POP   A
    4F64: 54 FA    MOV   [X-6],A
    4F66: 18       POP   A
    4F67: 54 F9    MOV   [X-7],A
    4F69: 38 FC    ADD   SP,0xFC
    4F6B: 50 47    MOV   A,0x47
    4F6D: 08       PUSH  A
    4F6E: 50 00    MOV   A,0x0
    4F70: 08       PUSH  A
    4F71: 08       PUSH  A
    4F72: 08       PUSH  A
    4F73: 52 00    MOV   A,[X+0]
    4F75: 08       PUSH  A
    4F76: 52 01    MOV   A,[X+1]
    4F78: 08       PUSH  A
    4F79: 52 02    MOV   A,[X+2]
    4F7B: 08       PUSH  A
    4F7C: 52 03    MOV   A,[X+3]
    4F7E: 08       PUSH  A
    4F7F: 7C 3A 0B LCALL 0x3A0B
    4F82: 38 F8    ADD   SP,0xF8
    4F84: 39 FF    CMP   A,0xFF
    4F86: A0 47    JZ    0x4FCE
    4F88: 50 47    MOV   A,0x47
    4F8A: 08       PUSH  A
    4F8B: 50 00    MOV   A,0x0
    4F8D: 08       PUSH  A
    4F8E: 08       PUSH  A
    4F8F: 08       PUSH  A
    4F90: 52 00    MOV   A,[X+0]
    4F92: 08       PUSH  A
    4F93: 52 01    MOV   A,[X+1]
    4F95: 08       PUSH  A
    4F96: 52 02    MOV   A,[X+2]
    4F98: 08       PUSH  A
    4F99: 52 03    MOV   A,[X+3]
    4F9B: 08       PUSH  A
    4F9C: 7C 3C 75 LCALL 0x3C75
    4F9F: 18       POP   A
    4FA0: 53 96    MOV   [__r3],A
    4FA2: 18       POP   A
    4FA3: 53 97    MOV   [__r2],A
    4FA5: 18       POP   A
    4FA6: 53 98    MOV   [__r1],A
    4FA8: 18       POP   A
    4FA9: 38 FC    ADD   SP,0xFC
    4FAB: 08       PUSH  A
    4FAC: 51 98    MOV   A,[__r1]
    4FAE: 08       PUSH  A
    4FAF: 51 97    MOV   A,[__r2]
    4FB1: 08       PUSH  A
    4FB2: 51 96    MOV   A,[__r3]
    4FB4: 08       PUSH  A
    4FB5: 7C 37 FA LCALL 0x37FA
    4FB8: 18       POP   A
    4FB9: 53 98    MOV   [__r1],A
    4FBB: 18       POP   A
    4FBC: 53 99    MOV   [__r0],A
    4FBE: 38 FE    ADD   SP,0xFE
    4FC0: 51 98    MOV   A,[__r1]
    4FC2: 01 00    ADD   A,0x0
    4FC4: 54 07    MOV   [X+7],A
    4FC6: 51 99    MOV   A,[__r0]
    4FC8: 09 80    ADC   A,0x80
    4FCA: 54 06    MOV   [X+6],A
    4FCC: 80 23    JMP   0x4FF0
    4FCE: 62 D0 00 MOV   REG[0xD0],0x0
    4FD1: 52 00    MOV   A,[X+0]
    4FD3: 08       PUSH  A
    4FD4: 52 01    MOV   A,[X+1]
    4FD6: 08       PUSH  A
    4FD7: 52 02    MOV   A,[X+2]
    4FD9: 08       PUSH  A
    4FDA: 52 03    MOV   A,[X+3]
    4FDC: 08       PUSH  A
    4FDD: 7C 37 FA LCALL 0x37FA
    4FE0: 18       POP   A
    4FE1: 53 98    MOV   [__r1],A
    4FE3: 18       POP   A
    4FE4: 53 99    MOV   [__r0],A
    4FE6: 38 FE    ADD   SP,0xFE
    4FE8: 51 98    MOV   A,[__r1]
    4FEA: 54 07    MOV   [X+7],A
    4FEC: 51 99    MOV   A,[__r0]
    4FEE: 54 06    MOV   [X+6],A
    4FF0: 62 D0 00 MOV   REG[0xD0],0x0
    4FF3: 52 F8    MOV   A,[X-8]
    4FF5: 53 98    MOV   [__r1],A
    4FF7: 55 99 00 MOV   [__r0],0x0
    4FFA: 52 07    MOV   A,[X+7]
    4FFC: 02 98    ADD   A,[__r1]
    4FFE: 53 98    MOV   [__r1],A
    5000: 50 00    MOV   A,0x0
    5002: 0A 99    ADC   A,[__r0]
    5004: 53 99    MOV   [__r0],A
    5006: 50 00    MOV   A,0x0
    5008: 08       PUSH  A
    5009: 50 04    MOV   A,0x4
    500B: 08       PUSH  A
    500C: 51 99    MOV   A,[__r0]
    500E: 08       PUSH  A
    500F: 51 98    MOV   A,[__r1]
    5011: 08       PUSH  A
    5012: 7C 37 9D LCALL 0x379D
    5015: 38 FE    ADD   SP,0xFE
    5017: 18       POP   A
    5018: 54 05    MOV   [X+5],A
    501A: 18       POP   A
    501B: 54 04    MOV   [X+4],A
    501D: 3D 04 00 CMP   [X+4],0x0
    5020: B0 06    JNZ   0x5027
    5022: 3D 05 01 CMP   [X+5],0x1
    5025: A0 17    JZ    0x503D
    5027: 3D 04 00 CMP   [X+4],0x0
    502A: B0 06    JNZ   0x5031
    502C: 3D 05 02 CMP   [X+5],0x2
    502F: A0 39    JZ    0x5069
    5031: 3D 04 00 CMP   [X+4],0x0
    5034: B0 06    JNZ   0x503B
    5036: 3D 05 03 CMP   [X+5],0x3
    5039: A0 34    JZ    0x506E
    503B: 80 5C    JMP   0x5098
    503D: 52 F9    MOV   A,[X-7]
    503F: 08       PUSH  A
    5040: 52 FA    MOV   A,[X-6]
    5042: 08       PUSH  A
    5043: 52 FB    MOV   A,[X-5]
    5045: 08       PUSH  A
    5046: 52 FC    MOV   A,[X-4]
    5048: 08       PUSH  A
    5049: 50 3F    MOV   A,0x3F
    504B: 08       PUSH  A
    504C: 50 80    MOV   A,0x80
    504E: 08       PUSH  A
    504F: 50 00    MOV   A,0x0
    5051: 08       PUSH  A
    5052: 08       PUSH  A
    5053: 62 D0 00 MOV   REG[0xD0],0x0
    5056: 7C 3C 75 LCALL 0x3C75
    5059: 18       POP   A
    505A: 54 FC    MOV   [X-4],A
    505C: 18       POP   A
    505D: 54 FB    MOV   [X-5],A
    505F: 18       POP   A
    5060: 54 FA    MOV   [X-6],A
    5062: 18       POP   A
    5063: 54 F9    MOV   [X-7],A
    5065: 38 FC    ADD   SP,0xFC
    5067: 80 30    JMP   0x5098
    5069: 37 F9 80 XOR   [X-7],0x80
    506C: 80 2B    JMP   0x5098
    506E: 50 3F    MOV   A,0x3F
    5070: 08       PUSH  A
    5071: 50 80    MOV   A,0x80
    5073: 08       PUSH  A
    5074: 50 00    MOV   A,0x0
    5076: 08       PUSH  A
    5077: 08       PUSH  A
    5078: 52 F9    MOV   A,[X-7]
    507A: 08       PUSH  A
    507B: 52 FA    MOV   A,[X-6]
    507D: 08       PUSH  A
    507E: 52 FB    MOV   A,[X-5]
    5080: 08       PUSH  A
    5081: 52 FC    MOV   A,[X-4]
    5083: 08       PUSH  A
    5084: 62 D0 00 MOV   REG[0xD0],0x0
    5087: 7C 3C 75 LCALL 0x3C75
    508A: 18       POP   A
    508B: 54 FC    MOV   [X-4],A
    508D: 18       POP   A
    508E: 54 FB    MOV   [X-5],A
    5090: 18       POP   A
    5091: 54 FA    MOV   [X-6],A
    5093: 18       POP   A
    5094: 54 F9    MOV   [X-7],A
    5096: 38 FC    ADD   SP,0xFC
    5098: 52 F9    MOV   A,[X-7]
    509A: 08       PUSH  A
    509B: 52 FA    MOV   A,[X-6]
    509D: 08       PUSH  A
    509E: 52 FB    MOV   A,[X-5]
    50A0: 08       PUSH  A
    50A1: 52 FC    MOV   A,[X-4]
    50A3: 08       PUSH  A
    50A4: 52 F9    MOV   A,[X-7]
    50A6: 08       PUSH  A
    50A7: 52 FA    MOV   A,[X-6]
    50A9: 08       PUSH  A
    50AA: 52 FB    MOV   A,[X-5]
    50AC: 08       PUSH  A
    50AD: 52 FC    MOV   A,[X-4]
    50AF: 08       PUSH  A
    50B0: 62 D0 00 MOV   REG[0xD0],0x0
    50B3: 7C 3B 4B LCALL 0x3B4B
    50B6: 18       POP   A
    50B7: 54 03    MOV   [X+3],A
    50B9: 18       POP   A
    50BA: 54 02    MOV   [X+2],A
    50BC: 18       POP   A
    50BD: 54 01    MOV   [X+1],A
    50BF: 18       POP   A
    50C0: 54 00    MOV   [X+0],A
    50C2: 38 FC    ADD   SP,0xFC
    50C4: 52 00    MOV   A,[X+0]
    50C6: 08       PUSH  A
    50C7: 52 01    MOV   A,[X+1]
    50C9: 08       PUSH  A
    50CA: 52 02    MOV   A,[X+2]
    50CC: 08       PUSH  A
    50CD: 52 03    MOV   A,[X+3]
    50CF: 08       PUSH  A
    50D0: 50 41    MOV   A,0x41
    50D2: 08       PUSH  A
    50D3: 50 26    MOV   A,0x26
    50D5: 08       PUSH  A
    50D6: 50 C4    MOV   A,0xC4
    50D8: 08       PUSH  A
    50D9: 50 B1    MOV   A,0xB1
    50DB: 08       PUSH  A
    50DC: 7C 3B 4B LCALL 0x3B4B
    50DF: 18       POP   A
    50E0: 53 96    MOV   [__r3],A
    50E2: 18       POP   A
    50E3: 53 97    MOV   [__r2],A
    50E5: 18       POP   A
    50E6: 53 98    MOV   [__r1],A
    50E8: 18       POP   A
    50E9: 53 99    MOV   [__r0],A
    50EB: 38 FC    ADD   SP,0xFC
    50ED: 50 43    MOV   A,0x43
    50EF: 08       PUSH  A
    50F0: 50 2D    MOV   A,0x2D
    50F2: 08       PUSH  A
    50F3: 50 E5    MOV   A,0xE5
    50F5: 08       PUSH  A
    50F6: 50 1D    MOV   A,0x1D
    50F8: 08       PUSH  A
    50F9: 51 99    MOV   A,[__r0]
    50FB: 08       PUSH  A
    50FC: 51 98    MOV   A,[__r1]
    50FE: 08       PUSH  A
    50FF: 51 97    MOV   A,[__r2]
    5101: 08       PUSH  A
    5102: 51 96    MOV   A,[__r3]
    5104: 08       PUSH  A
    5105: 7C 3C 75 LCALL 0x3C75
    5108: 18       POP   A
    5109: 53 96    MOV   [__r3],A
    510B: 18       POP   A
    510C: 53 97    MOV   [__r2],A
    510E: 18       POP   A
    510F: 53 98    MOV   [__r1],A
    5111: 18       POP   A
    5112: 38 FC    ADD   SP,0xFC
    5114: 08       PUSH  A
    5115: 51 98    MOV   A,[__r1]
    5117: 08       PUSH  A
    5118: 51 97    MOV   A,[__r2]
    511A: 08       PUSH  A
    511B: 51 96    MOV   A,[__r3]
    511D: 08       PUSH  A
    511E: 52 00    MOV   A,[X+0]
    5120: 08       PUSH  A
    5121: 52 01    MOV   A,[X+1]
    5123: 08       PUSH  A
    5124: 52 02    MOV   A,[X+2]
    5126: 08       PUSH  A
    5127: 52 03    MOV   A,[X+3]
    5129: 08       PUSH  A
    512A: 7C 3B 4B LCALL 0x3B4B
    512D: 18       POP   A
    512E: 53 96    MOV   [__r3],A
    5130: 18       POP   A
    5131: 53 97    MOV   [__r2],A
    5133: 18       POP   A
    5134: 53 98    MOV   [__r1],A
    5136: 18       POP   A
    5137: 53 99    MOV   [__r0],A
    5139: 38 FC    ADD   SP,0xFC
    513B: 50 44    MOV   A,0x44
    513D: 08       PUSH  A
    513E: 50 04    MOV   A,0x4
    5140: 08       PUSH  A
    5141: 50 53    MOV   A,0x53
    5143: 08       PUSH  A
    5144: 50 4C    MOV   A,0x4C
    5146: 08       PUSH  A
    5147: 51 99    MOV   A,[__r0]
    5149: 08       PUSH  A
    514A: 51 98    MOV   A,[__r1]
    514C: 08       PUSH  A
    514D: 51 97    MOV   A,[__r2]
    514F: 08       PUSH  A
    5150: 51 96    MOV   A,[__r3]
    5152: 08       PUSH  A
    5153: 7C 39 0B LCALL 0x390B
    5156: 18       POP   A
    5157: 53 96    MOV   [__r3],A
    5159: 18       POP   A
    515A: 53 97    MOV   [__r2],A
    515C: 18       POP   A
    515D: 53 98    MOV   [__r1],A
    515F: 18       POP   A
    5160: 38 FC    ADD   SP,0xFC
    5162: 08       PUSH  A
    5163: 51 98    MOV   A,[__r1]
    5165: 08       PUSH  A
    5166: 51 97    MOV   A,[__r2]
    5168: 08       PUSH  A
    5169: 51 96    MOV   A,[__r3]
    516B: 08       PUSH  A
    516C: 52 F9    MOV   A,[X-7]
    516E: 08       PUSH  A
    516F: 52 FA    MOV   A,[X-6]
    5171: 08       PUSH  A
    5172: 52 FB    MOV   A,[X-5]
    5174: 08       PUSH  A
    5175: 52 FC    MOV   A,[X-4]
    5177: 08       PUSH  A
    5178: 7C 3B 4B LCALL 0x3B4B
    517B: 18       POP   A
    517C: 53 96    MOV   [__r3],A
    517E: 18       POP   A
    517F: 53 97    MOV   [__r2],A
    5181: 18       POP   A
    5182: 53 98    MOV   [__r1],A
    5184: 18       POP   A
    5185: 53 99    MOV   [__r0],A
    5187: 38 FC    ADD   SP,0xFC
    5189: 50 41    MOV   A,0x41
    518B: 08       PUSH  A
    518C: 50 DE    MOV   A,0xDE
    518E: 08       PUSH  A
    518F: 50 ED    MOV   A,0xED
    5191: 08       PUSH  A
    5192: 50 11    MOV   A,0x11
    5194: 08       PUSH  A
    5195: 52 00    MOV   A,[X+0]
    5197: 08       PUSH  A
    5198: 52 01    MOV   A,[X+1]
    519A: 08       PUSH  A
    519B: 52 02    MOV   A,[X+2]
    519D: 08       PUSH  A
    519E: 52 03    MOV   A,[X+3]
    51A0: 08       PUSH  A
    51A1: 7C 39 0B LCALL 0x390B
    51A4: 18       POP   A
    51A5: 53 92    MOV   [__r7],A
    51A7: 18       POP   A
    51A8: 53 93    MOV   [__r6],A
    51AA: 18       POP   A
    51AB: 53 94    MOV   [__r5],A
    51AD: 18       POP   A
    51AE: 38 FC    ADD   SP,0xFC
    51B0: 08       PUSH  A
    51B1: 51 94    MOV   A,[__r5]
    51B3: 08       PUSH  A
    51B4: 51 93    MOV   A,[__r6]
    51B6: 08       PUSH  A
    51B7: 51 92    MOV   A,[__r7]
    51B9: 08       PUSH  A
    51BA: 52 00    MOV   A,[X+0]
    51BC: 08       PUSH  A
    51BD: 52 01    MOV   A,[X+1]
    51BF: 08       PUSH  A
    51C0: 52 02    MOV   A,[X+2]
    51C2: 08       PUSH  A
    51C3: 52 03    MOV   A,[X+3]
    51C5: 08       PUSH  A
    51C6: 7C 3B 4B LCALL 0x3B4B
    51C9: 18       POP   A
    51CA: 53 92    MOV   [__r7],A
    51CC: 18       POP   A
    51CD: 53 93    MOV   [__r6],A
    51CF: 18       POP   A
    51D0: 53 94    MOV   [__r5],A
    51D2: 18       POP   A
    51D3: 53 95    MOV   [__r4],A
    51D5: 38 FC    ADD   SP,0xFC
    51D7: 50 43    MOV   A,0x43
    51D9: 08       PUSH  A
    51DA: 50 A8    MOV   A,0xA8
    51DC: 08       PUSH  A
    51DD: 50 7B    MOV   A,0x7B
    51DF: 08       PUSH  A
    51E0: 50 5E    MOV   A,0x5E
    51E2: 08       PUSH  A
    51E3: 51 95    MOV   A,[__r4]
    51E5: 08       PUSH  A
    51E6: 51 94    MOV   A,[__r5]
    51E8: 08       PUSH  A
    51E9: 51 93    MOV   A,[__r6]
    51EB: 08       PUSH  A
    51EC: 51 92    MOV   A,[__r7]
    51EE: 08       PUSH  A
    51EF: 7C 39 0B LCALL 0x390B
    51F2: 18       POP   A
    51F3: 53 92    MOV   [__r7],A
    51F5: 18       POP   A
    51F6: 53 93    MOV   [__r6],A
    51F8: 18       POP   A
    51F9: 53 94    MOV   [__r5],A
    51FB: 18       POP   A
    51FC: 38 FC    ADD   SP,0xFC
    51FE: 08       PUSH  A
    51FF: 51 94    MOV   A,[__r5]
    5201: 08       PUSH  A
    5202: 51 93    MOV   A,[__r6]
    5204: 08       PUSH  A
    5205: 51 92    MOV   A,[__r7]
    5207: 08       PUSH  A
    5208: 51 99    MOV   A,[__r0]
    520A: 08       PUSH  A
    520B: 51 98    MOV   A,[__r1]
    520D: 08       PUSH  A
    520E: 51 97    MOV   A,[__r2]
    5210: 08       PUSH  A
    5211: 51 96    MOV   A,[__r3]
    5213: 08       PUSH  A
    5214: 7C 3A 68 LCALL 0x3A68
    5217: 18       POP   A
    5218: 53 96    MOV   [__r3],A
    521A: 18       POP   A
    521B: 53 97    MOV   [__r2],A
    521D: 18       POP   A
    521E: 53 98    MOV   [__r1],A
    5220: 18       POP   A
    5221: 53 99    MOV   [__r0],A
    5223: 38 FC    ADD   SP,0xFC
    5225: 38 F8    ADD   SP,0xF8
    5227: 20       POP   X
    5228: 7F       RET   
_sinf:
    5229: 10       PUSH  X
    522A: 4F       MOV   X,SP
    522B: 50 00    MOV   A,0x0
    522D: 08       PUSH  A
    522E: 08       PUSH  A
    522F: 08       PUSH  A
    5230: 08       PUSH  A
    5231: 52 F9    MOV   A,[X-7]
    5233: 08       PUSH  A
    5234: 52 FA    MOV   A,[X-6]
    5236: 08       PUSH  A
    5237: 52 FB    MOV   A,[X-5]
    5239: 08       PUSH  A
    523A: 52 FC    MOV   A,[X-4]
    523C: 08       PUSH  A
    523D: 62 D0 00 MOV   REG[0xD0],0x0
    5240: 7C 3A 0B LCALL 0x3A0B
    5243: 38 F8    ADD   SP,0xF8
    5245: 39 FF    CMP   A,0xFF
    5247: A0 16    JZ    0x525E
    5249: 50 00    MOV   A,0x0
    524B: 08       PUSH  A
    524C: 52 F9    MOV   A,[X-7]
    524E: 08       PUSH  A
    524F: 52 FA    MOV   A,[X-6]
    5251: 08       PUSH  A
    5252: 52 FB    MOV   A,[X-5]
    5254: 08       PUSH  A
    5255: 52 FC    MOV   A,[X-4]
    5257: 08       PUSH  A
    5258: 9C 94    CALL  _sinus
    525A: 38 FB    ADD   SP,0xFB
    525C: 80 30    JMP   0x528D
    525E: 50 00    MOV   A,0x0
    5260: 08       PUSH  A
    5261: 62 D0 00 MOV   REG[0xD0],0x0
    5264: 52 F9    MOV   A,[X-7]
    5266: 53 99    MOV   [__r0],A
    5268: 52 FA    MOV   A,[X-6]
    526A: 53 98    MOV   [__r1],A
    526C: 52 FB    MOV   A,[X-5]
    526E: 53 97    MOV   [__r2],A
    5270: 52 FC    MOV   A,[X-4]
    5272: 53 96    MOV   [__r3],A
    5274: 36 99 80 XOR   [__r0],0x80
    5277: 51 99    MOV   A,[__r0]
    5279: 08       PUSH  A
    527A: 51 98    MOV   A,[__r1]
    527C: 08       PUSH  A
    527D: 51 97    MOV   A,[__r2]
    527F: 08       PUSH  A
    5280: 51 96    MOV   A,[__r3]
    5282: 08       PUSH  A
    5283: 9C 69    CALL  _sinus
    5285: 38 FB    ADD   SP,0xFB
    5287: 62 D0 00 MOV   REG[0xD0],0x0
    528A: 36 99 80 XOR   [__r0],0x80
    528D: 20       POP   X
    528E: 7F       RET   
_sqrtf:
    528F: 10       PUSH  X
    5290: 4F       MOV   X,SP
    5291: 38 0A    ADD   SP,0xA
    5293: 50 00    MOV   A,0x0
    5295: 08       PUSH  A
    5296: 08       PUSH  A
    5297: 08       PUSH  A
    5298: 08       PUSH  A
    5299: 52 F9    MOV   A,[X-7]
    529B: 08       PUSH  A
    529C: 52 FA    MOV   A,[X-6]
    529E: 08       PUSH  A
    529F: 52 FB    MOV   A,[X-5]
    52A1: 08       PUSH  A
    52A2: 52 FC    MOV   A,[X-4]
    52A4: 08       PUSH  A
    52A5: 62 D0 00 MOV   REG[0xD0],0x0
    52A8: 7C 3A 0B LCALL 0x3A0B
    52AB: 38 F8    ADD   SP,0xF8
    52AD: 39 00    CMP   A,0x0
    52AF: A0 1F    JZ    0x52CF
    52B1: 39 01    CMP   A,0x1
    52B3: A0 1B    JZ    0x52CF
    52B5: 62 D0 06 MOV   REG[0xD0],0x6
    52B8: 55 9D 01 MOV   [errno+1],0x1
    52BB: 55 9C 00 MOV   [errno],0x0
    52BE: 62 D0 00 MOV   REG[0xD0],0x0
    52C1: 55 99 00 MOV   [__r0],0x0
    52C4: 55 98 00 MOV   [__r1],0x0
    52C7: 55 97 00 MOV   [__r2],0x0
    52CA: 55 96 00 MOV   [__r3],0x0
    52CD: 83 36    JMP   0x5604
    52CF: 50 00    MOV   A,0x0
    52D1: 08       PUSH  A
    52D2: 08       PUSH  A
    52D3: 08       PUSH  A
    52D4: 08       PUSH  A
    52D5: 52 F9    MOV   A,[X-7]
    52D7: 08       PUSH  A
    52D8: 52 FA    MOV   A,[X-6]
    52DA: 08       PUSH  A
    52DB: 52 FB    MOV   A,[X-5]
    52DD: 08       PUSH  A
    52DE: 52 FC    MOV   A,[X-4]
    52E0: 08       PUSH  A
    52E1: 62 D0 00 MOV   REG[0xD0],0x0
    52E4: 7C 3A 0B LCALL 0x3A0B
    52E7: 38 F8    ADD   SP,0xF8
    52E9: 39 00    CMP   A,0x0
    52EB: B0 0F    JNZ   0x52FB
    52ED: 55 99 00 MOV   [__r0],0x0
    52F0: 55 98 00 MOV   [__r1],0x0
    52F3: 55 97 00 MOV   [__r2],0x0
    52F6: 55 96 00 MOV   [__r3],0x0
    52F9: 83 0A    JMP   0x5604
    52FB: 62 D0 00 MOV   REG[0xD0],0x0
    52FE: 50 07    MOV   A,0x7
    5300: 08       PUSH  A
    5301: 10       PUSH  X
    5302: 52 F9    MOV   A,[X-7]
    5304: 08       PUSH  A
    5305: 52 FA    MOV   A,[X-6]
    5307: 08       PUSH  A
    5308: 52 FB    MOV   A,[X-5]
    530A: 08       PUSH  A
    530B: 52 FC    MOV   A,[X-4]
    530D: 08       PUSH  A
    530E: 7C 4B 69 LCALL _frexpf
    5311: 38 FA    ADD   SP,0xFA
    5313: 62 D0 00 MOV   REG[0xD0],0x0
    5316: 51 99    MOV   A,[__r0]
    5318: 54 02    MOV   [X+2],A
    531A: 51 98    MOV   A,[__r1]
    531C: 54 03    MOV   [X+3],A
    531E: 51 97    MOV   A,[__r2]
    5320: 54 04    MOV   [X+4],A
    5322: 51 96    MOV   A,[__r3]
    5324: 54 05    MOV   [X+5],A
    5326: 52 01    MOV   A,[X+1]
    5328: 21 01    AND   A,0x1
    532A: 53 98    MOV   [__r1],A
    532C: 52 00    MOV   A,[X+0]
    532E: 21 00    AND   A,0x0
    5330: 39 00    CMP   A,0x0
    5332: B0 06    JNZ   0x5339
    5334: 3C 98 00 CMP   [__r1],0x0
    5337: A0 32    JZ    0x536A
    5339: 52 02    MOV   A,[X+2]
    533B: 08       PUSH  A
    533C: 52 03    MOV   A,[X+3]
    533E: 08       PUSH  A
    533F: 52 04    MOV   A,[X+4]
    5341: 08       PUSH  A
    5342: 52 05    MOV   A,[X+5]
    5344: 08       PUSH  A
    5345: 52 02    MOV   A,[X+2]
    5347: 08       PUSH  A
    5348: 52 03    MOV   A,[X+3]
    534A: 08       PUSH  A
    534B: 52 04    MOV   A,[X+4]
    534D: 08       PUSH  A
    534E: 52 05    MOV   A,[X+5]
    5350: 08       PUSH  A
    5351: 62 D0 00 MOV   REG[0xD0],0x0
    5354: 7C 39 0B LCALL 0x390B
    5357: 18       POP   A
    5358: 54 05    MOV   [X+5],A
    535A: 18       POP   A
    535B: 54 04    MOV   [X+4],A
    535D: 18       POP   A
    535E: 54 03    MOV   [X+3],A
    5360: 18       POP   A
    5361: 54 02    MOV   [X+2],A
    5363: 38 FC    ADD   SP,0xFC
    5365: 7B 01    DEC   [X+1]
    5367: 1F 00 00 SBB   [X+0],0x0
    536A: 62 D0 00 MOV   REG[0xD0],0x0
    536D: 50 3F    MOV   A,0x3F
    536F: 08       PUSH  A
    5370: 50 80    MOV   A,0x80
    5372: 08       PUSH  A
    5373: 50 00    MOV   A,0x0
    5375: 08       PUSH  A
    5376: 08       PUSH  A
    5377: 52 02    MOV   A,[X+2]
    5379: 08       PUSH  A
    537A: 52 03    MOV   A,[X+3]
    537C: 08       PUSH  A
    537D: 52 04    MOV   A,[X+4]
    537F: 08       PUSH  A
    5380: 52 05    MOV   A,[X+5]
    5382: 08       PUSH  A
    5383: 7C 39 0B LCALL 0x390B
    5386: 18       POP   A
    5387: 53 96    MOV   [__r3],A
    5389: 18       POP   A
    538A: 53 97    MOV   [__r2],A
    538C: 18       POP   A
    538D: 53 98    MOV   [__r1],A
    538F: 18       POP   A
    5390: 38 FC    ADD   SP,0xFC
    5392: 08       PUSH  A
    5393: 51 98    MOV   A,[__r1]
    5395: 08       PUSH  A
    5396: 51 97    MOV   A,[__r2]
    5398: 08       PUSH  A
    5399: 51 96    MOV   A,[__r3]
    539B: 08       PUSH  A
    539C: 50 3F    MOV   A,0x3F
    539E: 08       PUSH  A
    539F: 50 00    MOV   A,0x0
    53A1: 08       PUSH  A
    53A2: 08       PUSH  A
    53A3: 08       PUSH  A
    53A4: 7C 3B 4B LCALL 0x3B4B
    53A7: 18       POP   A
    53A8: 54 05    MOV   [X+5],A
    53AA: 18       POP   A
    53AB: 54 04    MOV   [X+4],A
    53AD: 18       POP   A
    53AE: 54 03    MOV   [X+3],A
    53B0: 18       POP   A
    53B1: 54 02    MOV   [X+2],A
    53B3: 38 FC    ADD   SP,0xFC
    53B5: 80 31    JMP   0x53E7
    53B7: 52 02    MOV   A,[X+2]
    53B9: 08       PUSH  A
    53BA: 52 03    MOV   A,[X+3]
    53BC: 08       PUSH  A
    53BD: 52 04    MOV   A,[X+4]
    53BF: 08       PUSH  A
    53C0: 52 05    MOV   A,[X+5]
    53C2: 08       PUSH  A
    53C3: 50 4E    MOV   A,0x4E
    53C5: 08       PUSH  A
    53C6: 50 80    MOV   A,0x80
    53C8: 08       PUSH  A
    53C9: 50 00    MOV   A,0x0
    53CB: 08       PUSH  A
    53CC: 08       PUSH  A
    53CD: 62 D0 00 MOV   REG[0xD0],0x0
    53D0: 7C 3B 4B LCALL 0x3B4B
    53D3: 18       POP   A
    53D4: 54 05    MOV   [X+5],A
    53D6: 18       POP   A
    53D7: 54 04    MOV   [X+4],A
    53D9: 18       POP   A
    53DA: 54 03    MOV   [X+3],A
    53DC: 18       POP   A
    53DD: 54 02    MOV   [X+2],A
    53DF: 38 FC    ADD   SP,0xFC
    53E1: 17 01 3C SUB   [X+1],0x3C
    53E4: 1F 00 00 SBB   [X+0],0x0
    53E7: 50 3C    MOV   A,0x3C
    53E9: 13 01    SUB   A,[X+1]
    53EB: 52 00    MOV   A,[X+0]
    53ED: 31 80    XOR   A,0x80
    53EF: 62 D0 00 MOV   REG[0xD0],0x0
    53F2: 53 8D    MOV   [__rX],A
    53F4: 50 80    MOV   A,0x80
    53F6: 1A 8D    SBB   A,[__rX]
    53F8: CF BE    JC    0x53B7
    53FA: 80 31    JMP   0x542C
    53FC: 50 4E    MOV   A,0x4E
    53FE: 08       PUSH  A
    53FF: 50 80    MOV   A,0x80
    5401: 08       PUSH  A
    5402: 50 00    MOV   A,0x0
    5404: 08       PUSH  A
    5405: 08       PUSH  A
    5406: 52 02    MOV   A,[X+2]
    5408: 08       PUSH  A
    5409: 52 03    MOV   A,[X+3]
    540B: 08       PUSH  A
    540C: 52 04    MOV   A,[X+4]
    540E: 08       PUSH  A
    540F: 52 05    MOV   A,[X+5]
    5411: 08       PUSH  A
    5412: 62 D0 00 MOV   REG[0xD0],0x0
    5415: 7C 3A 68 LCALL 0x3A68
    5418: 18       POP   A
    5419: 54 05    MOV   [X+5],A
    541B: 18       POP   A
    541C: 54 04    MOV   [X+4],A
    541E: 18       POP   A
    541F: 54 03    MOV   [X+3],A
    5421: 18       POP   A
    5422: 54 02    MOV   [X+2],A
    5424: 38 FC    ADD   SP,0xFC
    5426: 07 01 3C ADD   [X+1],0x3C
    5429: 0F 00 00 ADC   [X+0],0x0
    542C: 52 01    MOV   A,[X+1]
    542E: 11 C4    SUB   A,0xC4
    5430: 52 00    MOV   A,[X+0]
    5432: 31 80    XOR   A,0x80
    5434: 19 7F    SBB   A,0x7F
    5436: CF C5    JC    0x53FC
    5438: 56 06 00 MOV   [X+6],0x0
    543B: 56 07 00 MOV   [X+7],0x0
    543E: 56 08 00 MOV   [X+8],0x0
    5441: 56 09 01 MOV   [X+9],0x1
    5444: 52 01    MOV   A,[X+1]
    5446: 11 00    SUB   A,0x0
    5448: 52 00    MOV   A,[X+0]
    544A: 31 80    XOR   A,0x80
    544C: 19 80    SBB   A,0x80
    544E: C0 89    JC    0x54D8
    5450: 62 D0 00 MOV   REG[0xD0],0x0
    5453: 52 01    MOV   A,[X+1]
    5455: 53 98    MOV   [__r1],A
    5457: 52 00    MOV   A,[X+0]
    5459: 53 99    MOV   [__r0],A
    545B: 68 99    ASR   [__r0]
    545D: 6E 98    RRC   [__r1]
    545F: 52 06    MOV   A,[X+6]
    5461: 53 95    MOV   [__r4],A
    5463: 52 07    MOV   A,[X+7]
    5465: 53 94    MOV   [__r5],A
    5467: 52 08    MOV   A,[X+8]
    5469: 53 93    MOV   [__r6],A
    546B: 52 09    MOV   A,[X+9]
    546D: 53 92    MOV   [__r7],A
    546F: 51 98    MOV   A,[__r1]
    5471: 21 1F    AND   A,0x1F
    5473: A0 0F    JZ    0x5483
    5475: 62 D0 00 MOV   REG[0xD0],0x0
    5478: 65 92    ASL   [__r7]
    547A: 6B 93    RLC   [__r6]
    547C: 6B 94    RLC   [__r5]
    547E: 6B 95    RLC   [__r4]
    5480: 78       DEC   A
    5481: BF F3    JNZ   0x5475
    5483: 62 D0 00 MOV   REG[0xD0],0x0
    5486: 51 95    MOV   A,[__r4]
    5488: 54 06    MOV   [X+6],A
    548A: 51 94    MOV   A,[__r5]
    548C: 54 07    MOV   [X+7],A
    548E: 51 93    MOV   A,[__r6]
    5490: 54 08    MOV   [X+8],A
    5492: 51 92    MOV   A,[__r7]
    5494: 54 09    MOV   [X+9],A
    5496: 52 06    MOV   A,[X+6]
    5498: 08       PUSH  A
    5499: 52 07    MOV   A,[X+7]
    549B: 08       PUSH  A
    549C: 52 08    MOV   A,[X+8]
    549E: 08       PUSH  A
    549F: 52 09    MOV   A,[X+9]
    54A1: 08       PUSH  A
    54A2: 7C 3D 4F LCALL 0x3D4F
    54A5: 18       POP   A
    54A6: 53 96    MOV   [__r3],A
    54A8: 18       POP   A
    54A9: 53 97    MOV   [__r2],A
    54AB: 18       POP   A
    54AC: 53 98    MOV   [__r1],A
    54AE: 18       POP   A
    54AF: 08       PUSH  A
    54B0: 51 98    MOV   A,[__r1]
    54B2: 08       PUSH  A
    54B3: 51 97    MOV   A,[__r2]
    54B5: 08       PUSH  A
    54B6: 51 96    MOV   A,[__r3]
    54B8: 08       PUSH  A
    54B9: 52 02    MOV   A,[X+2]
    54BB: 08       PUSH  A
    54BC: 52 03    MOV   A,[X+3]
    54BE: 08       PUSH  A
    54BF: 52 04    MOV   A,[X+4]
    54C1: 08       PUSH  A
    54C2: 52 05    MOV   A,[X+5]
    54C4: 08       PUSH  A
    54C5: 7C 3B 4B LCALL 0x3B4B
    54C8: 18       POP   A
    54C9: 54 05    MOV   [X+5],A
    54CB: 18       POP   A
    54CC: 54 04    MOV   [X+4],A
    54CE: 18       POP   A
    54CF: 54 03    MOV   [X+3],A
    54D1: 18       POP   A
    54D2: 54 02    MOV   [X+2],A
    54D4: 38 FC    ADD   SP,0xFC
    54D6: 80 8D    JMP   0x5564
    54D8: 62 D0 00 MOV   REG[0xD0],0x0
    54DB: 52 01    MOV   A,[X+1]
    54DD: 73       CPL   A
    54DE: 11 FF    SUB   A,0xFF
    54E0: 53 98    MOV   [__r1],A
    54E2: 52 00    MOV   A,[X+0]
    54E4: 73       CPL   A
    54E5: 19 FF    SBB   A,0xFF
    54E7: 53 99    MOV   [__r0],A
    54E9: 68 99    ASR   [__r0]
    54EB: 6E 98    RRC   [__r1]
    54ED: 52 06    MOV   A,[X+6]
    54EF: 53 95    MOV   [__r4],A
    54F1: 52 07    MOV   A,[X+7]
    54F3: 53 94    MOV   [__r5],A
    54F5: 52 08    MOV   A,[X+8]
    54F7: 53 93    MOV   [__r6],A
    54F9: 52 09    MOV   A,[X+9]
    54FB: 53 92    MOV   [__r7],A
    54FD: 51 98    MOV   A,[__r1]
    54FF: 21 1F    AND   A,0x1F
    5501: A0 0F    JZ    0x5511
    5503: 62 D0 00 MOV   REG[0xD0],0x0
    5506: 65 92    ASL   [__r7]
    5508: 6B 93    RLC   [__r6]
    550A: 6B 94    RLC   [__r5]
    550C: 6B 95    RLC   [__r4]
    550E: 78       DEC   A
    550F: BF F3    JNZ   0x5503
    5511: 62 D0 00 MOV   REG[0xD0],0x0
    5514: 51 95    MOV   A,[__r4]
    5516: 54 06    MOV   [X+6],A
    5518: 51 94    MOV   A,[__r5]
    551A: 54 07    MOV   [X+7],A
    551C: 51 93    MOV   A,[__r6]
    551E: 54 08    MOV   [X+8],A
    5520: 51 92    MOV   A,[__r7]
    5522: 54 09    MOV   [X+9],A
    5524: 52 06    MOV   A,[X+6]
    5526: 08       PUSH  A
    5527: 52 07    MOV   A,[X+7]
    5529: 08       PUSH  A
    552A: 52 08    MOV   A,[X+8]
    552C: 08       PUSH  A
    552D: 52 09    MOV   A,[X+9]
    552F: 08       PUSH  A
    5530: 7C 3D 4F LCALL 0x3D4F
    5533: 18       POP   A
    5534: 53 96    MOV   [__r3],A
    5536: 18       POP   A
    5537: 53 97    MOV   [__r2],A
    5539: 18       POP   A
    553A: 53 98    MOV   [__r1],A
    553C: 18       POP   A
    553D: 08       PUSH  A
    553E: 51 98    MOV   A,[__r1]
    5540: 08       PUSH  A
    5541: 51 97    MOV   A,[__r2]
    5543: 08       PUSH  A
    5544: 51 96    MOV   A,[__r3]
    5546: 08       PUSH  A
    5547: 52 02    MOV   A,[X+2]
    5549: 08       PUSH  A
    554A: 52 03    MOV   A,[X+3]
    554C: 08       PUSH  A
    554D: 52 04    MOV   A,[X+4]
    554F: 08       PUSH  A
    5550: 52 05    MOV   A,[X+5]
    5552: 08       PUSH  A
    5553: 7C 3A 68 LCALL 0x3A68
    5556: 18       POP   A
    5557: 54 05    MOV   [X+5],A
    5559: 18       POP   A
    555A: 54 04    MOV   [X+4],A
    555C: 18       POP   A
    555D: 54 03    MOV   [X+3],A
    555F: 18       POP   A
    5560: 54 02    MOV   [X+2],A
    5562: 38 FC    ADD   SP,0xFC
    5564: 56 01 00 MOV   [X+1],0x0
    5567: 56 00 00 MOV   [X+0],0x0
    556A: 62 D0 00 MOV   REG[0xD0],0x0
    556D: 52 02    MOV   A,[X+2]
    556F: 08       PUSH  A
    5570: 52 03    MOV   A,[X+3]
    5572: 08       PUSH  A
    5573: 52 04    MOV   A,[X+4]
    5575: 08       PUSH  A
    5576: 52 05    MOV   A,[X+5]
    5578: 08       PUSH  A
    5579: 52 F9    MOV   A,[X-7]
    557B: 08       PUSH  A
    557C: 52 FA    MOV   A,[X-6]
    557E: 08       PUSH  A
    557F: 52 FB    MOV   A,[X-5]
    5581: 08       PUSH  A
    5582: 52 FC    MOV   A,[X-4]
    5584: 08       PUSH  A
    5585: 7C 3A 68 LCALL 0x3A68
    5588: 18       POP   A
    5589: 53 96    MOV   [__r3],A
    558B: 18       POP   A
    558C: 53 97    MOV   [__r2],A
    558E: 18       POP   A
    558F: 53 98    MOV   [__r1],A
    5591: 18       POP   A
    5592: 53 99    MOV   [__r0],A
    5594: 38 FC    ADD   SP,0xFC
    5596: 52 02    MOV   A,[X+2]
    5598: 08       PUSH  A
    5599: 52 03    MOV   A,[X+3]
    559B: 08       PUSH  A
    559C: 52 04    MOV   A,[X+4]
    559E: 08       PUSH  A
    559F: 52 05    MOV   A,[X+5]
    55A1: 08       PUSH  A
    55A2: 51 99    MOV   A,[__r0]
    55A4: 08       PUSH  A
    55A5: 51 98    MOV   A,[__r1]
    55A7: 08       PUSH  A
    55A8: 51 97    MOV   A,[__r2]
    55AA: 08       PUSH  A
    55AB: 51 96    MOV   A,[__r3]
    55AD: 08       PUSH  A
    55AE: 7C 39 0B LCALL 0x390B
    55B1: 18       POP   A
    55B2: 53 96    MOV   [__r3],A
    55B4: 18       POP   A
    55B5: 53 97    MOV   [__r2],A
    55B7: 18       POP   A
    55B8: 53 98    MOV   [__r1],A
    55BA: 18       POP   A
    55BB: 38 FC    ADD   SP,0xFC
    55BD: 08       PUSH  A
    55BE: 51 98    MOV   A,[__r1]
    55C0: 08       PUSH  A
    55C1: 51 97    MOV   A,[__r2]
    55C3: 08       PUSH  A
    55C4: 51 96    MOV   A,[__r3]
    55C6: 08       PUSH  A
    55C7: 50 3F    MOV   A,0x3F
    55C9: 08       PUSH  A
    55CA: 50 00    MOV   A,0x0
    55CC: 08       PUSH  A
    55CD: 08       PUSH  A
    55CE: 08       PUSH  A
    55CF: 7C 3B 4B LCALL 0x3B4B
    55D2: 18       POP   A
    55D3: 54 05    MOV   [X+5],A
    55D5: 18       POP   A
    55D6: 54 04    MOV   [X+4],A
    55D8: 18       POP   A
    55D9: 54 03    MOV   [X+3],A
    55DB: 18       POP   A
    55DC: 54 02    MOV   [X+2],A
    55DE: 38 FC    ADD   SP,0xFC
    55E0: 77 01    INC   [X+1]
    55E2: 0F 00 00 ADC   [X+0],0x0
    55E5: 52 01    MOV   A,[X+1]
    55E7: 11 02    SUB   A,0x2
    55E9: 52 00    MOV   A,[X+0]
    55EB: 31 80    XOR   A,0x80
    55ED: 19 80    SBB   A,0x80
    55EF: CF 7A    JC    0x556A
    55F1: 62 D0 00 MOV   REG[0xD0],0x0
    55F4: 52 02    MOV   A,[X+2]
    55F6: 53 99    MOV   [__r0],A
    55F8: 52 03    MOV   A,[X+3]
    55FA: 53 98    MOV   [__r1],A
    55FC: 52 04    MOV   A,[X+4]
    55FE: 53 97    MOV   [__r2],A
    5600: 52 05    MOV   A,[X+5]
    5602: 53 96    MOV   [__r3],A
    5604: 38 F6    ADD   SP,0xF6
    5606: 20       POP   X
    5607: 7F       RET   
